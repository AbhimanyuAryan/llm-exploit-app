{"questionTitle": "Assign categorical column based on maximum value in group where other value is non-null", "question": "<p>Suppose that a polars DataFrame <code>df</code> contains a set of columns <code>group_cols</code>, and then 2 other columns <code>col1</code>, <code>col2</code>.</p>\n<p>I want to add a new column to this called <code>category</code> which takes values either <code>'primary'</code> or <code>'secondary'</code>. There should be exactly one occurrence of <code>'primary'</code> per group in <code>group_cols</code>, and it should be chosen where <code>col1</code> is maximal BUT <code>col2</code> is not null. (But if <code>col2</code> is always null, then it should simply be chosen where <code>col1</code> is maximal).</p>\n<p>So e.g. if we have in the same group 4 rows with values:</p>\n<ul>\n<li><code>col1</code> = <code>2</code>, <code>col2</code> = <code>None</code></li>\n<li><code>col1</code> = <code>1</code>, <code>col2</code> = <code>'not null'</code></li>\n<li><code>col1</code> = <code>1</code>, <code>col2</code> = <code>'not null also'</code></li>\n<li><code>col1</code> = <code>0</code>, <code>col2</code> = <code>'not null either'</code></li>\n</ul>\n<p>then either the 2nd or 3rd row in the group (it does not matter which, but only one of them) should have their <code>category</code> column value as <code>'primary'</code> and the rest should take values <code>'secondary'</code> in this column.</p>\n<p>I can do this with pandas quite easily by the following:</p>\n<pre><code>def assign_category(group):\n    if group['col2'].notnull().any():\n        max_col1_row = group.loc[group['col2'].notnull(), 'col1'].idxmax()\n        category_column = pd.Series('secondary', index=group.index)\n        if max_col1_row is not None:\n            category_column[max_col1_row] = 'primary'\n    else:\n        max_col1_row = group['col1'].idxmax()\n        category_column = pd.Series('secondary', index=group.index)\n        category_column[max_col1_row] = 'primary'\n    return category_column\n\ndf['category'] = df.groupby('group_cols').apply(assign_category).reset_index(drop=True)\n</code></pre>\n<p>and here is a reproducible example:</p>\n<pre><code>df = pd.DataFrame({\n    'group_cols': ['A', 'A', 'A', 'A', 'B', 'B', 'C', 'C', 'C', 'C', 'C'],\n    'col1': [2, 1, 1, 0, 3, 2, 3, None, 4, 4, 1],\n    'col2': [None, 'not null', 'also not null', 'not null either', 'not null', 'not null', None, None, None, None, None]\n})\n</code></pre>\n<p>becomes</p>\n<pre><code>pd.DataFrame({'group_cols': ['A', 'A', 'A', 'A', 'B', 'B', 'C', 'C', 'C', 'C', 'C'],\n 'col1': [2.0, 1.0, 1.0, 0.0, 3.0, 2.0, 3.0, nan, 4.0, 4.0, 1.0],\n 'col2': [None,\n  'not null',\n  'also not null',\n  'not null either',\n  'not null',\n  'not null',\n  None,\n  None,\n  None,\n  None,\n  None],\n 'category': ['secondary',\n  'primary',\n  'secondary',\n  'secondary',\n  'primary',\n  'secondary',\n  'secondary',\n  'secondary',\n  'primary',\n  'secondary',\n  'secondary']})\n</code></pre>\n<p>But I am struggling to even start replicating this kind of logic in polars, let alone without making use of the discouraged <a href=\"https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.html#polars.dataframe.group_by.GroupBy.map_groups\" rel=\"nofollow noreferrer\">map_groups</a>.</p>\n", "acceptedAnswer": "<p>There's probably quite a few ways to go about this.</p>\n<p>This is what came to mind:</p>\n<pre class=\"lang-py prettyprint-override\"><code>non_null_max = pl.col(&quot;col1&quot;).filter(pl.col(&quot;col2&quot;).is_not_null()).max()\nis_max = pl.col(&quot;col1&quot;) == non_null_max.fill_null(pl.col(&quot;col1&quot;).max())\n\ndf.with_columns(category = \n   pl.when((is_max &amp; is_max.is_first_distinct()).over(&quot;group_cols&quot;))\n     .then(pl.lit(&quot;primary&quot;))\n     .otherwise(pl.lit(&quot;secondary&quot;))\n)\n</code></pre>\n<pre class=\"lang-py prettyprint-override\"><code>shape: (11, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 group_cols \u2506 col1 \u2506 col2            \u2506 category  \u2502\n\u2502 ---        \u2506 ---  \u2506 ---             \u2506 ---       \u2502\n\u2502 str        \u2506 i64  \u2506 str             \u2506 str       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 A          \u2506 2    \u2506 null            \u2506 secondary \u2502\n\u2502 A          \u2506 1    \u2506 not null        \u2506 primary   \u2502\n\u2502 A          \u2506 1    \u2506 also not null   \u2506 secondary \u2502\n\u2502 A          \u2506 0    \u2506 not null either \u2506 secondary \u2502\n\u2502 B          \u2506 3    \u2506 not null        \u2506 primary   \u2502\n\u2502 B          \u2506 2    \u2506 not null        \u2506 secondary \u2502\n\u2502 C          \u2506 3    \u2506 null            \u2506 secondary \u2502\n\u2502 C          \u2506 null \u2506 null            \u2506 secondary \u2502\n\u2502 C          \u2506 4    \u2506 null            \u2506 primary   \u2502\n\u2502 C          \u2506 4    \u2506 null            \u2506 secondary \u2502\n\u2502 C          \u2506 1    \u2506 null            \u2506 secondary \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n<h3>Breakdown</h3>\n<p>We get the non-null max per group:</p>\n<pre class=\"lang-py prettyprint-override\"><code>df.with_columns(max = \n   pl.col(&quot;col1&quot;).filter(pl.col(&quot;col2&quot;).is_not_null()).max()\n     .over(&quot;group_cols&quot;)\n)\n</code></pre>\n<pre class=\"lang-py prettyprint-override\"><code>shape: (11, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 group_cols \u2506 col1 \u2506 col2            \u2506 max  \u2502\n\u2502 ---        \u2506 ---  \u2506 ---             \u2506 ---  \u2502\n\u2502 str        \u2506 i64  \u2506 str             \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 A          \u2506 2    \u2506 null            \u2506 1    \u2502\n\u2502 A          \u2506 1    \u2506 not null        \u2506 1    \u2502\n\u2502 A          \u2506 1    \u2506 also not null   \u2506 1    \u2502\n\u2502 A          \u2506 0    \u2506 not null either \u2506 1    \u2502\n\u2502 B          \u2506 3    \u2506 not null        \u2506 3    \u2502\n\u2502 B          \u2506 2    \u2506 not null        \u2506 3    \u2502\n\u2502 C          \u2506 3    \u2506 null            \u2506 null \u2502\n\u2502 C          \u2506 null \u2506 null            \u2506 null \u2502\n\u2502 C          \u2506 4    \u2506 null            \u2506 null \u2502\n\u2502 C          \u2506 4    \u2506 null            \u2506 null \u2502\n\u2502 C          \u2506 1    \u2506 null            \u2506 null \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n<p>Then fill_null for the case when all values are null:</p>\n<pre class=\"lang-py prettyprint-override\"><code>df.with_columns(max = \n   pl.col(&quot;col1&quot;).filter(pl.col(&quot;col2&quot;).is_not_null()).max()\n     .fill_null(pl.col(&quot;col1&quot;).max())\n     .over(&quot;group_cols&quot;)\n)\n</code></pre>\n<pre class=\"lang-py prettyprint-override\"><code>shape: (11, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 group_cols \u2506 col1 \u2506 col2            \u2506 max \u2502\n\u2502 ---        \u2506 ---  \u2506 ---             \u2506 --- \u2502\n\u2502 str        \u2506 i64  \u2506 str             \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 A          \u2506 2    \u2506 null            \u2506 1   \u2502\n\u2502 A          \u2506 1    \u2506 not null        \u2506 1   \u2502\n\u2502 A          \u2506 1    \u2506 also not null   \u2506 1   \u2502\n\u2502 A          \u2506 0    \u2506 not null either \u2506 1   \u2502\n\u2502 B          \u2506 3    \u2506 not null        \u2506 3   \u2502\n\u2502 B          \u2506 2    \u2506 not null        \u2506 3   \u2502\n\u2502 C          \u2506 3    \u2506 null            \u2506 4   \u2502\n\u2502 C          \u2506 null \u2506 null            \u2506 4   \u2502\n\u2502 C          \u2506 4    \u2506 null            \u2506 4   \u2502\n\u2502 C          \u2506 4    \u2506 null            \u2506 4   \u2502\n\u2502 C          \u2506 1    \u2506 null            \u2506 4   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n<p>Finally we add <a href=\"https://docs.pola.rs/docs/python/dev/reference/expressions/api/polars.Expr.is_first_distinct.html#polars-expr-is-first-distinct\" rel=\"nofollow noreferrer\"><code>.is_first_distinct()</code></a> to ask: <em>&quot;is the first maximum per group?&quot;</em></p>\n", "questionSource": "https://stackoverflow.com/questions/78275374/assign-categorical-column-based-on-maximum-value-in-group-where-other-value-is-n"}