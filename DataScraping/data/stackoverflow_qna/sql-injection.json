[
    {
        "Title": "PHP Code Functioning as Intended but UNION Injection Payload Doesn&#39;t Work",
        "Question": "I am attempting to make a web application (LAMP stack - MySQL version: 8.0.36-0ubuntu0.22.04.1) that is vulnerable to a SQL UNION Injection attack (or some type of SQL injection attack). The code takes the user's input via POST parameters to get the VIN & mileage.\nThe following PHP Code handles the backend to adding the parameters to the database:\n// If SESSION variables are set then proceed to Mileage.php\n    if (isset($_SESSION['username'])) {\n        // PHP Code for Handling ADDING CAR\n        // Declare Variables\n        $username = $_SESSION['username'];\n        $vin = $_POST['vehicle'];\n        $mileage = $_POST['mileage'];\n\n        // Implement Try-catch for Error Hanlding\n        try {\n            // Add Mileage\n            if(isset($_POST['add_data'])) {\n                $query = \"INSERT INTO mileage_master.mileages (`username`, `VIN`, `mileage`) VALUES ('$username', '$vin', '$mileage')\";\n                $query_result = mysqli_query($db,$query);\n    \n            // Update Mileage\n            } elseif(isset($_POST['update_data'])) {\n                // Query to update associated VIN's Mileage\n                $update = \"UPDATE mileage_master.mileages SET mileage='$mileage' WHERE username='$username' AND VIN='$vin'\";\n                $update_result = mysqli_query($db,$update);\n            // Remove Mileage\n            } elseif(isset($_POST['remove_data'])) {\n                // Query to Remove VIN & Mileage\n                $remove = \"DELETE FROM mileage_master.mileages WHERE username='$username' AND VIN='$vin'\";\n                $remove_result = mysqli_query($db,$remove);\n            }\n        }\n        catch (mysqli_sql_exception $e) {\n            $showAlert = true;\n            // Display Syntax Error\n            $errorMessage = \"My SQL Error: \" . $e->getMessage();\n            // Display Query (Intentional Unsafe Coding Practices)\n            $errorMessage .= \"\\t||\\tQuery: \" . $sql;\n        }\n\n        \n    }    \n    else {\n        header(\"Location: /\");\n    }\n?>\n\nThe following PHP code prints the VIN & mileage to user's page:\n<?php\n    // Query to get all VINs associated with username\n    $result = mysqli_query($db,\"SELECT * FROM mileages WHERE username='$username'\");\n\n    echo \"<table style='margin-top: 35px;'>\";\n    echo \"<tr><th>VIN</th>\";\n    echo \"<th>Mileage</th></tr>\";\n\n    // While Loop to iterate through all returned rows\n    while($row = mysqli_fetch_assoc($result)) {\n        echo \"<tr style='text-align: center;'>\";\n        // VIN\n        echo \"<td>\" . $row['VIN'] . \"</td>\";\n        // Mileage\n        echo \"<td>\" . $row['mileage'] . \"</td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n?>\n\nMy thought process was that because the application uses dynamic queries an attacker could include some type of UNION SELECT statement. The UNION select statement's output would be stored within the VIN column for that query.\nHowever, I am unable to create a successful SQL Injection payload that would accomplish this.\nQuestion\nDo I need to change the logic of my application to make the exploit possible or is my idea not exploitable in the first place?\n",
        "Answer": "You can't get SQL injection in the SELECT query, since the user doesn't have control over the $username variable, and that's the only thing you substitute. But you can do it in the INSERT query, to insert extra rows in the table with arbitrary values.\nIt needs to terminate the current value list, then it can use a subquery in another value list, and finally it has to provide the beginning to match the end of the original value list.\n$vin = \"12345', '20'), ('baduser', (SELECT '67890'), (SELECT '30')), ('baduser2', '1111\";\n\nThis will put a bogus VIN and mileage into the row for $username, then insert additional rows for baduser and baduser2. baduser2 will get another bogus VIN and the mileage from the parameter.\nbaduser can use subqueries to get its VIN and mileage values, as long as the subqueries each only return one row and column. I used literals in the above example, but you can make them arbitrarily complex.\n",
        "Source": "https://stackoverflow.com/questions/78093937/php-code-functioning-as-intended-but-union-injection-payload-doesnt-work"
    },
    {
        "Title": "How to fix SQL injection if we have to use DB name dynamically in SQL Server?",
        "Question": "This is the implementation in code: the schema name comes from a configuration file and is different for each environment. Sonar throws SQL injection alert at this statement:\nselect * \nfrom dbName.dbo.stu_name;     <<dbname is the variable that comes from property file>>\n\nI tried these solutions:\n\nUsing query.setParameter(?,dbname). Tried passing dbname dynamically and vulnerability was fixed. When debugging, the query was throwing an error and did not execute.\n\nUsed String.format(select * from \\'%s\\',tablename.replace(\"\\'\",\"\\'\\'\")) - vulnerability fixed, but query failed to execute\n\n\nI tried various other solutions and nothing worked.\nCan anyone please help me with this?\n",
        "Answer": "The \"best\" defence you can do is not use dynamic SQL. Considering that this is the database that's dynamic, and based on a prior question, I would suggest that this is occurring from an application, so that means you don't need 3-part naming. Instead you parametrise the database name in the connection string and use 2-part naming; no dynamic SQL needed.\nIf you must use dynamic SQL, then the \"best\u2122\ufe0f\" defence would be to validate the database name, and then ensure you properly quote the database name when you inject it into your dynamic statement.\nHere I validate the database name in sys.databases and then use QUOTENAME to quote the name appropriately. If the database doesn't exist, no query is run (and no error is returned):\nDECLARE @DatabaseName sysname = N'YourDatabaseName';\n\nDECLARE @SQL nvarchar(MAX);\nSELECT @SQL = N'SELECT * FROM ' + QUOTENAME(d.name) + N'.dbo.stu_name;'\nFROM sys.databases d\nWHERE d.name = @DatabaseName;\n\nEXEC sys.sp_executesql @SQL;\n\n",
        "Source": "https://stackoverflow.com/questions/78027431/how-to-fix-sql-injection-if-we-have-to-use-db-name-dynamically-in-sql-server"
    },
    {
        "Title": "How to reduce vulnerability to cyber attacks from injection?",
        "Question": "I have very little knowledge about SQL injection, and there are probably other threats I am unaware of out there for stealing company data, how would I make this python code better in regards to security?\nmerge_query = \"\"\"\nMERGE INTO sql_table_name AS Target\nUSING (\n    VALUES {}\n) AS Source (transaction_year, month_num, month_name, price_nt)\nON Target.transaction_year = Source.transaction_year \nAND Target.month_num = Source.month_num\nWHEN MATCHED AND (Target.month_name != Source.month_name OR Target.price_nt != Source.price_nt) THEN\n    UPDATE SET Target.month_name = Source.month_name, Target.price_nt = Source.price_nt\nWHEN NOT MATCHED THEN\n    INSERT (transaction_year, month_num, month_name, price_nt) VALUES (Source.transaction_year, Source.month_num, Source.month_name, Source.price_nt);\n\"\"\".format(','.join(['(?,?,?,?)' for _ in range(len(data))]))\n\nparams = [item for sublist in data for item in sublist]\n\ntry:\n    obj_crsr.execute(merge_query, params)\n\nexcept Exception as e:\n    obj_crsr.rollback()\n    print(e)\n    print(\"Transaction rolled back\")\n\nelse:\n    obj_cnxn.commit()\n    obj_crsr.close()\n    obj_cnxn.close()\n\nThis python code is given data in the following format:\n[(2023, M12,    December,   541.44),\n(2023,  M11,    November,   486.64),\n(2023,  M10,    October,    468.23),\n(2023,  M09,    September,  478.80),\n(2023,  M08,    August,     475.41)]\n\nAnd then is converted to a list in the params variable.  That data looks like this:\n['2023', 'M12', 'December', '541.442', '2023', 'M11', 'November', '486.639', '2023', 'M10', 'October', '468.226', '2023', 'M09', 'September', '478.802', '2023', 'M08', 'August', '475.411']\n\nThis is the only method I have found to work when trying to merge data into an existing table using PYODBC.  I have heard of parameterizing the query or naming sql variables, but I don't know how to adapt existing examples/solution on stack overflow to my specific use case.  Any suggestions are appreciated.\n",
        "Answer": "There is nothing wrong with your existing code as far as injection is concerned.\nInjection only happens when user data is injected directly into the query. Here, that is not happening. What is happening is that a dynamic list of ? parameter markers are being injected, in a well-defined way (once per row), and the actual values are passed as a dynamic list of parameters. There is absolutely no scope for injection here.\nBe aware of a few points though:\n\nUsing such code does tend to focus minds on \"oh just inject the data\". Might be worth putting in a comment such as only paramaters are injected here.\nIf there are no rows at all to insert then you get invalid code ( VALUES ), so you should check for that.\nDynamic numbers of parameters mean you get a recompile for every possible variation of parameters. This is not as many as would be had if you actually injected the data, but still a concern.\nA Table-Valued Parameter or a bulk insert into a temp table are therefore both better options than any of this, but neither are supported by pyodbc. fast_executemany or to_sql might be options, or BULK INSERT from an external file.\nThe maximum number of parameters is 2100, you will hit performance issues well before that though.\n\n",
        "Source": "https://stackoverflow.com/questions/77996154/how-to-reduce-vulnerability-to-cyber-attacks-from-injection"
    },
    {
        "Title": "Is using Hibernate&#39;s Restrictions.eq() method safe against SQL injection?",
        "Question": "Is using Hibernate's Restrictions.eq() method, as used in the example below, safe against SQL injection? Or similar methods like Restrictions.in(), Restrictions.ge(), ...\nString vulnerable = //parameter from user interface \nCriteria ct = this.getCriteria();\nct.add(Restrictions.eq(\"propertyName\", vulnerable));\n\nI have found that probably is, as explained in this answer\nbut reviewing OWASP documentation, there is an example that shows a comment which confuses me (// This should REALLY be validated too). Is needed to validate the input, or is secure as is?\nThe example in the OWASP documentation\n// Criteria API\n// This should REALLY be validated too\nString userSuppliedParameter = request.getParameter(\"Product-Description\");\n// Perform input validation to detect attacks\nInventory inv = (Inventory) session.createCriteria(Inventory.class).add\n(Restrictions.eq(\"productDescription\", userSuppliedParameter)).uniqueResult();\n\n",
        "Answer": "Yes, Hibernate's Criteria API would protect you against SQL Injection, as it parameterises the query - you can see this in action by enabling sql logging.\nWhat you do need to be careful about is concatenating user inputs etc. I think the documentation may perhaps be referring to validate the user input at both client and server side.\n",
        "Source": "https://stackoverflow.com/questions/77993970/is-using-hibernates-restrictions-eq-method-safe-against-sql-injection"
    },
    {
        "Title": "Operand type clash: int is incompatible with date in sql",
        "Question": "i using am writing a insert statement but getting above error\nInsert query\nvar insertSql = string.Format(\n                $\"INSERT INTO Sales (Date, Team, Sales) VALUES ({0}, {1}, {2})\",\n                new List<SqlParameter>()\n                {\n                    new(\"@date\", sales.Date.ToString(\"yyyy-MM-dd\")),\n                    new(\"@team\", sales.Team),\n                    new(\"@sales\", sales.Sales),\n                });\n            var rowCount = Sql.ExecuteNonQuery(Conn,insertSql);\n\nhere is my table schema and class\nSaleId int,\nDate Date,\nTeam varchar(50),\nSales int\n\npublic class Sales\n{\n    public int SalesId { get; set; }\n    public DateTime Date { get; set; }\n    public string Team { get; set; }\n    public int Sales { get; set; }\n}\n\nI want to use parameterized query to achive this so tried this but giving above error\n",
        "Answer": "The immediate problem here is that $\"...\" is itself an interpolated string, and the values you are injecting are the literal 0, 1, and 2 - they're not placeholders: they're the values. Removing the $ would make it a literal string suitable for string.Format, but you don't want to use string.Format here; also, you don't want to format the date - just pass it as a date.\nHonestly: if you're writing the SQL yourself, I'm not sure EF is even needed here; with Dapper this would be simply:\nconn.Execute(\"INSERT INTO Sales (Date, Team, Sales) Values (@Date, @Team, @Sales)\",\n    sales);\n\nor with a trick for better SQL formatting:\nconn.Execute(\"\"\"\n    INSERT INTO Sales (Date, Team, Sales)\n    Values (@Date, @Team, @Sales)\n    \"\"\", sales);\n\nDapper will deal with finding sales.Date, sales.Team and sales.Sales, and add them correctly. EF may also have an API for doing ad-hoc queries like this, but... this feels more like a Dapper scenario, unless you're emotionally invested in EF.\n",
        "Source": "https://stackoverflow.com/questions/77926016/operand-type-clash-int-is-incompatible-with-date-in-sql"
    },
    {
        "Title": "How to limit memory usage with PDO in MariaDB : Fatal error: Allowed memory size of 67108864 bytes exhausted",
        "Question": "I am changing my SQL request to PDO in order to integrate more security against SQL injecting.  I was using before procedural msqli and everything was working ok.  Now I updated server to PHP 8.2 and I am using PDO and prepared statements.\nThe BD I am accessing is old MariaDB and has a table with 247 fields most of which are NULL on a single row. (It is sections for a description of mushrooms, but only some of each are really described in a single row (mushrooms)).\nMost of the 247 fields are set to mediumtext because they can content up to a couple paragraphs.\nMy connection script is :\ntry {\n\n    db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\nreturn;\n} \n\nWhen I select one row of that table in order to echo the not NULL descriptions column, as soon as I execute the statement I run into a full memory.  The error is at the stmt->execute() line, not even at the fetchAll line.\n$description = 'someTag';\n\n$sql = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n$stmt = $db->prepare($sql);\n$stmt->bindParam(':tag', $description, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n$result = $stmt->fetchAll();\n$stmt->closeCursor();\n\nThe error :\nFatal error: Allowed memory size of 67108864 bytes exhausted (tried to allocate 262144 bytes) in /home/mycoqueb/public_html/nou.mycoquebec.org/scripts/bd-query.php on line (**the $stmt->execute() line)\n\nI tried to use :\nwhile ($row = $stmt->fetch()) {\n\nInstead of fetchAll() but it changed noting, I used it on every other request from the same page and it changed noting.  I flushed variables that were no more useful to NULL on the rest of the page and it changed nothing.  I even isolated the script on an empty page and it exceeds the memory limit.\nI tried to add this to my connection script and it changed nothing :\ndb->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\nI tried to select only one field instead of * and this worked, but I don't have an easy way to find NOT NULL columns in the table for a specific tag (row).\nI tried to find a SQL statement to restrict my SELECT to NOT NULL columns but I was not successful.\nI know I could get add memory_limit = 256M to the phpini file, but that is not what I want since the website has a high usage and for now its on a multihosted server.\nThe best solution would be to reengineer the MariaDB database using a table with description sections labels and linking only used sections to the main description table for each row, but I have limited access to the db since it is online with the old website and the old website needs to stay online and up to date for 1-2 years after new deployment. I though of creating a daily cron job to do that but I would like to avoid for the moment.\nAny Idea how I can get this to work?  It was working fine using msqli on php 8.1.\nTo answer the worries of contributors that think it's related to another part of the page code, here is the complete code of the isolated test page.\nfunction convert($size)\n {\n    $unit=array('b','kb','mb','gb','tb','pb');\n    return @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];\n }\n\n\n$servername = \"localhost\";\n$username = \"myUser\";\n$password = \"myPass\";\n$dbname = \"myDB\";\n\n\ntry {\n\n    $db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    //$db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\n } catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\n    return;\n}   \n\n$query = (array_key_exists(\"query\",$_REQUEST) ? $_REQUEST[\"query\"] : \"\");\n\n\nif($query != \"\"){\n\n    $tag_desc = 'Aegerita candida';\n    // Code works if I limit to \"SELECT Titre FROM description WHERE tag = :tag LIMIT 1\";\n    $sql_description = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n    $stmt = $db->prepare($sql_description);\n    $stmt->bindParam(':tag', $tag_desc, PDO::PARAM_STR);\n    \n    echo convert(memory_get_usage(true));  // returns 2mb\n    $stmt->execute();\n    $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n    \n    $i = 0;\n    \n    while ($row = $stmt->fetch()) {\n\n        if($i == 0) {\n\n            ?><table style=\"border-collapse:collapse;border: 0;table-layout: fixed;color: #063850;background-color: #DDDDDD;text-align: left\"><thead><tr style=\"border: 2px solid #063850;\"> <?php\n            foreach (array_keys($row) as $key) {\n                //print_r($key);\n                echo (\"<th style='padding:5px;border: 2px solid #063850;position:sticky;top: -2;z-index:10;background-color:#e5a045'>$key</th>\");\n            }\n            echo (\"</tr></thead>\");\n        }\n\n        $i++;\n\n        echo (\"<tr style='border: 2px solid #063850'>\");\n        foreach ($row as $value) {\n            echo (\"<td style='padding:2px;border: 2px solid #063850'>$value</td>\");\n            // <img src=\\\"$value\\\" height=\\\"400\\\" >\n        }\n        echo (\"</tr>\");\n    }\n    \n    if ($i > 0) {\n        echo (\"</table>\");\n        echo ('<div style=\"margin-top:400px\">&nbsp;</div>');\n    } else {\n        echo \"Aucun r\u00e9sultat\";\n    }\n\n}\n\n$db = null;\n\nHas mentioned it automatically work if I limit my sql to a couple fields.\nThe error is still on the stmt->execute() line.\n",
        "Answer": "Could it be that the issue is your data model?\nIf you have a table that has a lot of nulls, then the data is most likely not normalized.\nInstead of having 256 columns in your table, maybe just have the ones that are always there, and then relate it to a separate table with three fields: foreign key to the main table, a tag field and a value field.\nIf you are rewriting your application to USE PDO anyway, some long-term considerations could be included.\nExample table\nLayout like yours (all data in one table):\n\n\n\n\nid\nname\nemail\nsomeotherdata\ntag1\ntag2\ntag3\ntag4\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\nNULL\na\nNULL\n100\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\nc\na\nNULL\n400\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\nNULL\nNULL\n5000\nNULL\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\nNULL\na\nNULL\n100\n\n\n\nSuggested Tag-Value table layout\nMain Table\n\n\n\n\nid\nname\nemail\nsomeotherdata\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\n\n\n\n\nTag-Value Table\n\n\n\n\nid\ntag\nvalue\n\n\n\n\n1\ntag2\na\n\n\n1\ntag4\n100\n\n\n2\ntag1\nc\n\n\n2\ntag2\na\n\n\n2\ntag4\n400\n\n\n3\ntag3\n5000\n\n\n4\ntag2\na\n\n\n4\ntag4\n100\n\n\n\nUsage\nInstead of selecting just your row, you WILL need to either join the results together, or make two separate calls. I would suggest two calls, especially since you are rtunning into memory issues.\nSELECT \n  id, \n  name,\n  email,\n  someotherdata\nFROM\n  MainTable\nWHERE\n  id = 1;\n\n-- and then the tags\nSELECT \n  id, \n  tag,\n  value\nFROM\n  TagValueTable\nWHERE\n  id = 1; -- reference to the main table\n\n\n\nAdvantaages of this normalized approach\n\nLess bloat (not so many nulls)\nSimpler structures\nREST ready\nMore resilient\n\nAdd tags without changing the DDL of the database (ALTER)\n\n\nYou can still get the original layout by making subselects and transpositions in mysql\nYou can easily make statistics on the tags related to each other\n\nDisadvantages\n\nComplexity of the data model increases\nYou need to do a lot of extra SQL gymnastics to get EXACTLY what you had before\n\n",
        "Source": "https://stackoverflow.com/questions/77895050/how-to-limit-memory-usage-with-pdo-in-mariadb-fatal-error-allowed-memory-size"
    },
    {
        "Title": "PHP: Prepare JSON selector to Prevent MySQL Injection",
        "Question": "What is the best/proper way to prepare a dynamic MySQL JSON selector for queries, in order to prevent SQL injection? As an example, say I want to execute the following query:\nSELECT `key` ->> \"$.key.path\" AS `setting_value`\nFROM `settings`\nLIMIT 1\n\nBut I want to make the key path dynamic, e.g.:\n$sql = <<<SQL\n    SELECT `key` ->> \"{$path}\" AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nWith conditional values, I can structure the SQL for a prepared statement using PDO, e.g.:\n$sql = <<<SQL\n    SELECT *\n    FROM `settings`\n    WHERE `other_field` = :field_val\n    LIMIT 1\nSQL;\n\n$statement = $this->handle()->prepare($sql);\n$statement->execute([':field_val' => 'some val']);\n$records = $statement->fetchAll(PDO::FETCH_OBJ);\n\nAdding something like the following to my database adapter (or even to my helper functions) seems rather inelegant and prone to errors/issues:\n    public function cleanJsonSelector(string $selector) : string {\n        return preg_replace('/[^-\\$a-zA-Z0-9_\\[\\].*\\s]/', '', $selector);\n    }\n\nThoughts/help?\n",
        "Answer": "The -> and ->> operators only support string literals. They do not expressions, variables, or parameters.\nBut you can use any expression \u2014\u00a0including a parameter placeholder \u2014\u00a0in the equivalent JSON function JSON_EXTRACT().\nThe ->> operator is like JSON_UNQUOTE(JSON_EXTRACT(json_doc, path))\n$sql = <<<SQL\n    SELECT JSON_UNQUOTE(JSON_EXTRACT(`key`, :path)) AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nThis seems like an unnecessary inconsistency in the functionality of MySQL's JSON operators, but this is how it's implemented in the current MySQL version 8.3.\n\nFor what it's worth, it was requested to support expressions after the -> operator (and presumably also the ->> operator) here: https://bugs.mysql.com/bug.php?id=87360\nYou may want to log into the MySQL bug tracker site and click the \"Affects Me\" button to hopefully increase the priority of implementing that feature.\n\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => true (the default), then parameters are not true parameters, they are string-substitutions into the SQL query before it is parsed. So what looks like a parameterized query really uses a string literal as far as MySQL is concerned, and the ->> operator is successful.\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => false, then parameters placeholders are parsed by MySQL during the prepare step. Since parameters are not supported as the argument to the ->> operator, this will fail.\nMysqli only supports true parameters, so it will always fail.\n",
        "Source": "https://stackoverflow.com/questions/77892840/php-prepare-json-selector-to-prevent-mysql-injection"
    },
    {
        "Title": "SQL-Injection in duckdb-queries on pandas dataframes",
        "Question": "In a project I am working with duckdb to perform some queries on dataframes. For one of the queries, I have some user-input that I need to add to the query. That is why I am wondering if SQL-Injection is possible in this case. Is there a way a user could harm the application or the system through the input? And if so, how could I prevent this case? It seems that duckdb has no PreparedStatement for queries on dataframes.\nI already looked up in the documentation (https://duckdb.org/docs/api/python/overview.html) but couldn't find anything useful. The method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\nThere is another question on stackoverflow (Syntax for Duckdb > Python SQL with Parameter\\Variable) about this topic but the answer only works on real sql-connections and the version with f-strings seems insecure to me.\nHere is a small code sample to show what I mean:\nimport duckdb\nimport pandas as pd\n\ndf_data = pd.DataFrame({'id': [1, 2, 3, 4], 'student': ['student_a', 'student_a', 'student_b', 'student_c']})\n    \nuser_input = 3  # fetch some user_input here\n    \n# How to prevent sql-injection, if its even possible in this case?\nresult = duckdb.query(\"SELECT * FROM df_data WHERE id={}\".format(user_input))\n\nSo how would you approach this problem? Is sql-injection even possible? Thanks for your help and feel free to ask for more details, if you need some more information!\nEDIT: Fixed a syntax error in the code\n",
        "Answer": "\nThe method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\n\nIt seems it's possible:\n>>> duckdb.execute(\"\"\"SELECT * FROM df_data WHERE id=?\"\"\", (user_input,)).df()\n\n   id    student\n0   3  student_b\n\n",
        "Source": "https://stackoverflow.com/questions/77884985/sql-injection-in-duckdb-queries-on-pandas-dataframes"
    },
    {
        "Title": "SQL injection error in Modsecurity logs in Plesk",
        "Question": "I am receiving the following error for 1 of my wordpress site running on a Plesk server.\n[client 000.00.00.000] ModSecurity: Access denied with code 403 (phase\n 2). Pattern match \"[\\\\\\\\[\\\\\\\\]\\\\\\\\x22',()\\\\\\\\.]{10}$|\\\\\\\\b(?:union\n\\\\\\\\sall\\\\\\\\sselect\\\\\\\\s(?:(?:null|\\\\\\\\d+),?)+|order\\\\\\\\sby\n\\\\\\\\s\\\\\\\\d{1,4}|(?:and|or)\\\\\\\\s\\\\\\\\d{4}=\\\\\\\\d{4}|waitfor\\\\\\\\sdelay\\\\\\\\s'\n\\\\\\\\d+:\\\\\\\\d+:\\\\\\\\d+'|(?:select|and|or)\\\\\\\\s(?:(?:pg_)?sleep\\\\\\\\(\\\\\\\\d+\n\\\\\\\\)|\\\\\\\\d+\\\\\\\\s?=\\\\\\\\s?(?:dbms_pipe\\\\\\\\.receive_message\\\\\\\\ ...\" at \nREQUEST_COOKIES:sbjs_first. [file \"/etc/httpd/conf/modsecurity.d/rules\n/comodo_free/22_SQL_SQLi.conf\"] [line \"66\"] [id \"218500\"] [rev \"18\"] \n[msg \"COMODO WAF: SQLmap attack detected||website name|F|2\"] [data \n\"Matched Data: |||id=(none) found within REQUEST_COOKIES:sbjs_first: \ntyp=typein|||src=(direct)|||mdm=(none)|||cmp=(none)|||cnt=(none)|||trm=\n(none)|||id=(none)\"] [severity \"CRITICAL\"] [tag \"CWAF\"] [tag \"SQLi\"] \n[hostname \"website name\"] [uri \"/wp-login.php\"] [unique_id \"ZamB-\n8j9IfDbYiJgRoahGwAAAAM\"], referer:\n\nWhen I visited some pages on the frontend it gives this error:\nServer Error\n403\nForbidden\nYou do not have permission to access this document.\nThat's what you can do\nReload Page Back to Previous Page Home Page\nI wonder if this a real attack? or false positive\nI was able to export the site to local. It seems working ok there.\n",
        "Answer": "CRS dev-on-duty here. Even if you don't use CRS rules and this is a problem of COMODO WAF rules, I'll try to help. While searching for the cookie name sbjs_first, I found this GitHub issue here, which is an indication that this sourcebuster cookie looks legitimate. Maybe you'll even the solution to your problem in one of the comments in this issue.\nIf this isn't the solution, you may need to tune the rules. Maybe you can also use our (CRS) documentation on false positives and rule tuning.\n",
        "Source": "https://stackoverflow.com/questions/77842169/sql-injection-error-in-modsecurity-logs-in-plesk"
    },
    {
        "Title": "Oracle SP Checkmarx SAST scan showing Parameter Tampering",
        "Question": "SP accepts key and returns flag status. In Checkmarx SAST scan key, It is saying parameter not validated before being used in query. Please help to understand what validation can be added so that it passes the vulnerability test.\nCreate procedure sp_name (key varchar2, v_flag out number) as\nv_key varchar2(50);\nv_sql clob;\nBegin\nIf key is null then\nv_flag:=-1;\nElse\nv_key:=sys.dbms_assert.enquote_literal(upper(trim(key)));\nv_key:=replace(v_key,'''');\nv_sql:=q'[select flag from tbl where key=:1]';\nExecute immediate v_sql into v_flag using v_key;\nEnd if;\nException when no_data_found then\nv_flag:=-1;\nEnd;\n\nI tried bind variable and dbms_assert but still it shows code is vulnerable\n",
        "Answer": "Stop using EXECUTE IMMEDIATE when you do not need to (and trying to make it overly complicated) and use a simple SELECT ... INTO ... statement with the PL/SQL variable as the bind variable (and give the PL/SQL variable a different name to the table's column).\nThe procedure can be simplified to:\nCREATE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  SELECT flag\n  INTO   v_flag\n  FROM   tbl\n  WHERE  key=v_key;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nThen, if you have the sample data:\nCREATE TABLE tbl (key, flag) AS\n  SELECT 'A',  1 FROM DUAL UNION ALL\n  SELECT 'B',  2 FROM DUAL UNION ALL\n  SELECT 'C',  3 FROM DUAL UNION ALL\n  SELECT NULL, 4 FROM DUAL;\n\nThen:\nDECLARE\n  v_flag TBL.FLAG%TYPE;\nBEGIN\n  sp_name('A', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('B', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('C', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('D', v_flag);\n  DBMS_OUTPUT.PUT_LINE('D: ' || v_flag);\n  sp_name(NULL, v_flag);\n  DBMS_OUTPUT.PUT_LINE('NULL: ' || v_flag);\nEND;\n/\n\nOutputs:\n\nA: 1\nB: 2\nC: 3\nD: -1\nNULL: -1\n\n\nOr, if you want it slightly more complicated to avoid the SELECT if the key is NULL then:\nCREATE OR REPLACE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  IF v_key IS NULL THEN\n    v_flag := -1;\n  ELSE\n    SELECT flag\n    INTO   v_flag\n    FROM   tbl\n    WHERE  key=v_key;\n  END IF;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nfiddle\n",
        "Source": "https://stackoverflow.com/questions/77841440/oracle-sp-checkmarx-sast-scan-showing-parameter-tampering"
    },
    {
        "Title": "What is the correct syntax for dollar-parameters in PostgreSQL queries?",
        "Question": "I am struggling with the correct syntax for a dollar-parameter. It sometimes works, sometimes not.\nI am using the 'pg' package for NodeJS, but since AFAIK parsing the query happens on the server side, I don't expect this to matter.\nCode:\nconst client: PoolClient = ...;\nawait client.query('SELECT \\'foo\\' = $1', [projectId]);\nawait client.query('SET \"gvc.currentProjectId\" = $1', [projectId]);\n\nThe first query is obviously useless, but I added it to experiment with the syntax. An error occurs in the second query, so the first one seems to work. The second one fails with:\nunexpected exception error: syntax error at or near \"$1\"\n\nIs it even possible to use dollar-parameters in the value for SET? I want to secure my application against SQL injection attacks, so manually escaping the projectId is a last resort.\n",
        "Answer": "As explained in https://dba.stackexchange.com/a/333947, SET can indeed only take literal values, no parameters or query results. That post links to the set_config command, which does not have such a restriction.\nhttps://pgpedia.info/s/set_config.html\n\nNeither the post not the documentation explain why both exist, nor why SET cannot take parameters since set_config demonstrates that it is possible to do so.\nSimply using set_config over SET solves the problem.\n",
        "Source": "https://stackoverflow.com/questions/77839814/what-is-the-correct-syntax-for-dollar-parameters-in-postgresql-queries"
    },
    {
        "Title": "How do I write prepared statements in ballerina?",
        "Question": "Is there a way to write prepared statements for SQL in ballerina? or is it a good practice to use the following method for that?\nfunction selectUserQuery(string username) returns sql:ParameterizedQuery => `SELECT * FROM users WHERE user_name=${username}`;\n\n",
        "Answer": "In ballerina sql:ParamerterizedQuery works as a prepared statement. (this differs a little from other languages as ballerina mandates giving the variable order, when writing the statement itself)\nYes, using functions is the best practise to keep SQL statements in ballerina.\nFor the sake of completeness, I would like to quote the following from this article.\nConsider the below statement,\nsql:ParameterizedQuery selectQuery = `SELECT * FROM users WHERE user_name=${username}`;\nBallerina executes this query in multiple steps,\n\nTemplate the query:\nThe sql module will replace the insertions in the query using ?. (e.g. `SELECT * FROM users where user_name=?`) Here, all insertions in the query are considered to be user inputs.\n\nThe database compiles the query:\nThe database validates the templated SQL query for syntax and semantics (column availability, authorization) errors. Finally, the server parses the query.\n\nPlaceholder replacement:\nThe programme sends all the user data values to the database. The database will replace the placeholders at this point. However, since the query is pre-compiled, even if the database appends the values, the scope of the execution will not change. i.e. SQL Injection cannot turn a SELECT command into a DELETE.\n\nQuery execution.\n\n\n",
        "Source": "https://stackoverflow.com/questions/77763194/how-do-i-write-prepared-statements-in-ballerina"
    },
    {
        "Title": "Problem with identical metrics results after machine learning",
        "Question": "When trying machine learning on a dataset, I got the same results for metrics such as accuracy and F-score on different machine learning algorithms.\nI have a dataset on which I trained my chosen algorithms. I found it on the Kaggle website: source.\nHere are code snippets from the Jupiter file, and the results of their execution:\nList of connected libraries\nIN:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report\nimport joblib\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras import models, layers\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nLoading dataset\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\ndf.head(10)\n\nLoad, process and split the data for further training of the classification model\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\n\ndf = df[(df['attack_type'] == 'sqli') | (df['attack_type'] == 'norm')]\n\nX = df['payload']\ny = df['label']\n\nvectorizer = CountVectorizer(min_df = 2, max_df = 0.8, stop_words = stopwords.words('english'))\nX = vectorizer.fit_transform(X.values.astype('U')).toarray()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)\n\nOUT:\n(8040, 1585)\n(8040,)\n(2011, 1585)\n(2011,)\n\nNaive Bayes Classifier\nIN:\nnb_clf = GaussianNB()\nnb_clf.fit(X_train, y_train)\ny_pred = nb_clf.predict(X_test)\nprint(f\"Accuracy of Naive Bayes on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Naive Bayes on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of Naive Bayes on test set : 0.9806066633515664\nF1 Score of Naive Bayes on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       0.97      0.98      0.97       732\n        norm       0.99      0.98      0.98      1279\n\n    accuracy                           0.98      2011\n   macro avg       0.98      0.98      0.98      2011\nweighted avg       0.98      0.98      0.98      2011\n\nRandom forest algorithm:\nIN:\nrf_clf = RandomForestClassifier()\nrf_clf.fit(X_train, y_train)\ny_pred_rf = rf_clf.predict(X_test)\nprint(f\"Accuracy of Random Forest on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Random Forest on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred_rf))\n\nOUT:\nAccuracy of Random Forest on test set : 0.9806066633515664\nF1 Score of Random Forest on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.96      0.98       732\n        norm       0.98      1.00      0.99      1279\n\n    accuracy                           0.99      2011\n   macro avg       0.99      0.98      0.99      2011\nweighted avg       0.99      0.99      0.99      2011\n\nSupport vector machine\nIN:\nsvm_clf = SVC(gamma = 'auto')\nsvm_clf.fit(X_train, y_train)\ny_pred = svm_clf.predict(X_test)\nprint(f\"Accuracy of SVM on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of SVM on test set: {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of SVM on test set : 0.9189457981103928\nF1 Score of SVM on test set: 0.8658436213991769\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.76      0.87       689\n        norm       0.89      1.00      0.94      1322\n\n    accuracy                           0.92      2011\n   macro avg       0.95      0.88      0.90      2011\nweighted avg       0.93      0.92      0.92      2011\n\nAs you can see when training on different machine learning algorithms, we get the same results in the case of random forest and naive Bayesian classifier.\nI hope you can help me to fix a possible bug in the code or improve it in some way.\n",
        "Answer": "In your code for Random Forest, you're storing predictions as y_pred_rf but calling your metrics on y_pred\n",
        "Source": "https://stackoverflow.com/questions/77686328/problem-with-identical-metrics-results-after-machine-learning"
    },
    {
        "Title": "WordPress sql injection",
        "Question": "Thanks for letting me post here, I'm just starting to learn programming.\nI have a problem with a WordPress site which I update for my dad's local motorcycle road safety training group, which is run as a charity/non-profit by volunteer instructors. The hosting company (LCN) has taken the site down and emailed the group the following:\n\n\nDomain name : kamg.org.uk\nDatabase : kamg_org_uk_dbtest\nMySQL Server : database3.lcn.com\nOur monitoring scripts have detected an SQL injection attack occurring on your web site kamg.org.uk, using exploitable code hosted there.\nThe SQL queries that have been flagged as suspicious/malicious are listed here :\n----- BEGIN REPORT -----\nTIME RUNNING: 01:34:02\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\nTIME RUNNING: 01:34:00\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\n----- END REPORT -----\n\nWP, plugins and theme are all kept up to date at all times.\nCan I safely just delete those lines from the database to clean the site?\nLCN offer the group free charity hosting but I have found over 1600 domains share the same server. Once the sql injection is cleaned the group will move to managed WP hosting in the hope it will be more secure.\nThx,\nNiels\nI have tried reinstalling WordPress by FTP, but the hosts have denied the attempt, having removed all permissions.\nTheir support is appalling, taking 4 days to respond to queries, and then answering the wrong question with a cut & paste stock response.\nI have just started learning, but I'd be happy to go in and edit files (with some nervousness) but haven't attempted anything at this stage.\n",
        "Answer": "It's not the data that is at fault, it's something in the code of WordPress, or more likely one of the plugins or themes you have installed.\nThe way the code works is something like this:\n$query = 'SELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key,\n  wp_usermeta.meta_value \nFROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"' . $variable . \n  '\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" \n  AND wp_users.ID = wp_usermeta.user_id';\n\nBut the value of $variable has been exploited by some attacker. They set it to the following string:\n\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\n\n(even including the quote characters.)\nWhen the variable is concatenated into the query, it causes the SQL query to have extra expression terms, that the attacker injected.\nIt looks like they're forcing sleep() calls to test if certain tables exist. They'll use this method to learn all your table names. Then they'll use information in subsequent attacks, to read those tables. SQL injection hackers have to probe using techniques like this to try to avoid detection.\nThe original query may be a normal part of the code of WordPress or one of the plugins or themes. But the programmer made a mistake by concatenating a variable whose value was set from untrusted input. Programmers aren't supposed to do this, but many are either unaware of the risk, or else they think it won't happen to their code.\nYou said you are up to date on all the versions of WordPress and plugins, but the vulnerability may exist in the current version. In other words, no newer version with a fix has been released (yet).\nSometimes it doesn't help to update the software, because the newest version has introduced a new vulnerability that didn't exist before. Programmers add new code in every version, and security vulnerabilities are the result of mistakes made by software developers. New vulnerabilities occur regularly.\nWordPress itself is pretty well tested, that's why I suppose the vulnerability may be in a plugin or theme. I don't know which plugins you use.\nOr you may have added custom code that has the vulnerability, so there is no other person who will update it. It's up to you.\nWhat you have to do now is figure out which line of code, not data, is responsible for the vulnerability. If you don't have the skills to do this (basically a text search across many files to find a line of code similar to the one I showed above), then you need to employ someone to help you.\nOnce you find the line of code responsible, either fix it yourself, or if it's in a plugin you could just uninstall that plugin to remove the vulnerable code.\nIt sounds like your hosting company isn't going to help. They probably have very little resources to provide customer service in this case. Even if you fix the code, it sounds like it will be a struggle to get them to allow you to restore your website.\nYou may need to find a new hosting provider if your current one won't communicate or let you have access to your site.\nBut a different hosting provider won't be more secure, because the fault is not with the hosting provider. The fault is in the code you are using.\nIf you install the same code on the current provider or another provider without fixing it, the code will still be vulnerable to hacks. If you upload code you know is vulnerable, then it'll be your fault.\n",
        "Source": "https://stackoverflow.com/questions/77602811/wordpress-sql-injection"
    },
    {
        "Title": "Protects dplyr against SQL injections?",
        "Question": "I would like to use R-Shiny to develop a web app that accesses an SQL database with sensitive data.\nSo far I have written the database query as a pure SQL string.\nHowever, this approach is very susceptible to SQL injections.\nMy intention is therefore to write the database query with dplyr, as the query is written in R and not in pure SQL.\nUnfortunately, I have not yet been able to find any more detailed information or an estimate on this topic online. Therefore I would like to clarify my request in this question.\nSo far I have only read a statement about the dbplyr::translate_sql() function that is supposed to protect SQL injections:\nhttps://dbplyr.tidyverse.org/articles/sql-translation.html#vectors\nAs my data is very confidential, dbplyr / dplyr should provide 100% protection against SQL injections.\nI would be very pleased to receive further information and assessments on this topic.\nUPDATE\nAs suggested in the comments, I have added an example for reproducibility:\n(adapted from: https://shiny.posit.co/r/articles/build/pool-dplyr/)\nlibrary(shiny)\nlibrary(DBI)\nlibrary(pool)\nlibrary(tidyverse)\nlibrary(dbplyr)\n\npool <- dbPool(\n  drv = RMySQL::MySQL(),\n  dbname = \"shinydemo\",\n  host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",\n  username = \"guest\",\n  password = \"guest\")\n\nui <- fluidPage(\n  textInput(\"ID\", \"Enter your ID:\", \"5\"),\n  tableOutput(\"tbl\"),\n  numericInput(\"nrows\", \"How many cities to show?\", 10),\n  plotOutput(\"popPlot\"))\n\nserver <- function(input, output, session) {\n  output$tbl <- renderTable({\n    pool %>% tbl(\"City\") %>%\n      filter(ID == !!input$ID)\n  })\n  output$popPlot <- renderPlot({\n    df <- pool %>% tbl(\"City\") %>%\n      head(as.integer(input$nrows)[1]) %>% collect()\n    pop <- df$Population\n    names(pop) <- df$Name\n    barplot(pop)\n  })\n}\n\nshinyApp(ui, server)\n\n",
        "Answer": "The threat of SQL injection depends on how the user-provided text is incorporated into the dynamic SQL query. So if you are trying to protect against injection, you need to assess each of the ways user input is used when querying the database.\nIn the example you have posted there are two pieces of user input:\n\ninput$nrows which is limited to numeric by the input widget\ninput$ID which is free text, and hence has greater risk of SQL injection.\n\nYou can use any of the approaches below to investigate each piece of user input. Overall, the approach I would choose is to Sanitise and then Review.\nThis answer focuses on the case where you are using dbplyr to translate from R to SQL. If other approaches are used to access the database (such as the DBI package) then a different approach will be required.\n\nOption 1) Review the SQL query that is generated\nConsider where input$ID is used in the example code:\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID)\n\nIn order to execute this, dbplyr will translate the dplyr commands from R into SQL. We can review this translation using the show_query command.\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID) %>%\n  show_query()\n\nThis will probably produce an SQL query similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value'\n\nYou do not need the entire Shiny app to test this for SQL injection. You can simply vary this query and see what happens. For example, try a simple alternative query:\nattempt_inject = 'my_id_value;SELECT 123'\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!attempt_inject) %>%\n  show_query()\n\nI suspect this will produce SQL similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value;SELECT 123'\n\nWhich would seem an effective prevention for SQL injection. But you will need to test this as thoroughly as required to ensure you are confident.\n\nOption 2) Review source code\nThe dbplyr package is open source and available online. You could review the source code to confirm how inputs are handled during translation.\nMy suspicion is that unless inputs are of type sql, then they will be escaped as either text or an SQL object.\nThere is an sql() function that converts input to type sql. One of its uses is to tell dbplyr not to translate the contents of the function but to use them as-is. This means that if your user can submit R objects as inputs then this is a significant area of vulnerability. However, this is unlikely to be the case as your app restricts users to submitting text and numeric input.\n\nOption 3) Sanitise your inputs before passing them to dbplyr\nR has several advantages over pure SQL, in that you can use R to validate users' input before including it in a dbplyr query.\nConsider this an an alternative to your output$tbl component of the app:\noutput$tbl <- renderTable({\n  current_ID = as.character(input$ID)\n  acceptable_ids = pool %>%\n    tbl(\"City\") %>%\n    select(ID) %>%\n    distinct() %>%\n    collect() %>%\n    pull()\n  req(current_ID %in% acceptable_ids)\n\n  pool %>%\n    tbl(\"City\") %>%\n    filter(ID == !!current_ID)\n})\n\nThis approach enforces that the user input is converted to type character and is a value found in the ID column, before passing the user input through to dbplyr.\nThe exact choice of checks will depend on how user input is used. I often include a check that user input does not contain special characters (such as ;{}[]* or spaces).\ndbplyr includes commands to delimit certain inputs. Investigate and use these commands where applicable.\nNotes\n\nreq is a Shiny command that stops execution of a component if the condition is not met. You can use stopifnot outside a Shiny context.\nFetching the list of acceptable ids within the renderTable statement is not efficient app design. This should be calculated once and reused multiple times.\n\n",
        "Source": "https://stackoverflow.com/questions/77598340/protects-dplyr-against-sql-injections"
    },
    {
        "Title": "Interfacing with &quot;API&quot; that only takes raw SQL: Node / pSQL sanitization without prepared statements or parameterization?",
        "Question": "I am working with an \"API\" provided by a client's ERP. They do not have actual endpoints, rather a REST endpoint that you can send raw sql queries to, that they then execute. To make matters even worse, they only recently upgraded to https.\nI am writing some Node cloud functions to interface with this system. There will be two roles working with this product, and I need to prevent the role with less permissions to fire unwanted queries in the application when they are searching with specific parameters.\nFor filtering, I can just check if the values are in an array of allowed terms, but with a search I am not quite sure how to approach this. My general opinion has always been to use parameterized statements, but that is not an option here as I can't actually establish a connection to their database. I also saw some posts where people suggested wrapping the strings in dollar signs since the underlying DB is PostgreSQL, but I could not find anything in the documentation for this purpose.\nI was also thinking about only allowing alpha-numeric characters, but this seems like a potentially weak approach. If anyone knows of any libraries or ideas for dealing with this situation, I would greatly appreciate it.\nI tried looking for a Node library or piece of documentation that could help this situation, but I could not find anything relevant.\n",
        "Answer": "I found this interesting post around the question: https://security.stackexchange.com/questions/172297/sanitizing-input-for-parameterized-queries.\nTo summarize it, doing data sanitization(more like general validation) is always good idea but it will not necessarily guarantee that query will be safe. Directly running queries without parameterized statements will be still quite a big risk even if you find some great library for cleaning data to make it SQL safe.\nInstead try to think of ways to not run user input directly. Add some kind of mapper in between which will accept some filter codes and translate it into SQL values. For example if I had delivery company and wanted to filter all deliveries with status delivered, I would use mapping like this:\nconst status_code = \"DELIVERED\"\nconst statusMapper = {DELIVERED: \"delivered\"(value to filter in sql)}\n\nAnd if my mapper does not find the exact match, return error or empty result and don't run the query at all. If its search bar, try to identify most frequent search keywords and build mapper for that. Obviously it will not be too accurate, but still better than having risk of sql injection, especially if you work with sensitive and important data(I assume you work with company's internal data since you integrate with ERP).\n",
        "Source": "https://stackoverflow.com/questions/77516509/interfacing-with-api-that-only-takes-raw-sql-node-psql-sanitization-without"
    },
    {
        "Title": "Dremio SQL injection vulnerability",
        "Question": "I'd like to query an S3 storage containing parquet files through my Spring Java app with Dremio. These are dynamic queries with user given parameters.\nI use Apache Arrow SQl driver and simply run queries by a JdbcTemplate instantiated with a DataSource from the following properties:\n  driver-class-name: org.apache.arrow.driver.jdbc.ArrowFlightJdbcDriver\n  url: jdbc:arrow-flight-sql://localhost:32010/?useEncryption=false\n  username: user\n  password: pwd\n\nFor the sql string I use a String formatted with the user given value:\n\"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = '%s';\".formatted(userInput)\n\nIt works well but needless to say how big of an SQL injection opportunity it is. If I try to use a Prepared Statement:\nString sql = \"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = ?\"\njdbcTemplate.query(sql, ps -> ps.setString(1, userInput), rs -> {\n  //handling the result set\n});\n\nI get the following error:\ncfjd.org.apache.arrow.flight.FlightRuntimeException: Cannot convert RexNode to equivalent Dremio expression. RexNode Class: org.apache.calcite.rex.RexDynamicParam, RexNode Digest: ?0\n\nI'm finding ambiguous information on the web. The claim that Dremio doesn't support prepared statements could be found in some forums, but all of these comments are several years old*, moreover the official Dremio site has an article recommending the usage of prepared statements..\nAs far as I know Dremio uses ANSI SQL under the hood, which I believe supports prepared statements. Or does that depend on the database engine and not the dialect? Can anyone confirm that it is still not possible with Dremio? Then I'll stop pursuing it further.\nIf that's the case, I will escape the unsafe characters, use a dictionary for encoding and decoding user given characteres, etc.\nIf you have some other advices or experiences mitigating SQL injection without prepared statements though, I would appreciate them as well!\nThank you!\n*latest update I found: https://community.dremio.com/t/sql-parameterization-support/1733/5\n",
        "Answer": "I'll post my findings as an answer, maybe it could be useful for someone in the same boat:\nIn lack of any other ideas I went down the encode/decode road.\nFor that the initial idea was to use an own dictionary, but I figured that hexadecimal encoding should be sufficient enough.\nLuckily Dremio SQL has a FROM_HEX function, which can return a BINARY value for the given hexadecimal string.\nWith that I can (so far..) safely build dynamic queries with any kind of user given input turned into HEX strings and then converting back at execution time, with the function behaving kind of like a wrapper.\nStill, this isn't a perfectly calming solution, but as far as I can see, there isn't really a better option at the moment. I heard Dremio will implement prepared statements (quite a shock that they haven't already), until then, let's hope for the best!\n",
        "Source": "https://stackoverflow.com/questions/77501615/dremio-sql-injection-vulnerability"
    },
    {
        "Title": "SQL Injection in Stored Procedures via MySQL Connector",
        "Question": "I use the mysql-connector-python driver for executing database operations. Recently, I came across stored procedures in MySQL and decided to migrate some of my APIs from utilizing cursor.execute() to cursor.callproc(proc_name, args=()). This transition has proven successful, and everything works seamlessly. However, I'm uncertain about the vulnerability of these stored procedures to SQL injection.\nTo assess this, I created a test stored procedure and examined its susceptibility to SQL injection payloads.\nStored Procedure:\nDELIMITER //\nCREATE PROCEDURE TestProcedure(IN arg_test VARCHAR(150))\n  BEGIN\n    IF EXISTS (SELECT 1 FROM Random_Table WHERE test = arg_test) THEN\n        SELECT 'success' AS message;\n    ELSE\n        SELECT 'failed' AS message;\n    END IF;\n  END //\nDELIMITER ;\n\nPayloads:\n\n' or 1=1 -- \n\" or 1=1 -- \n\nSurprisingly, none of these payloads yielded any successful results. Seeking further assurance, I consulted one of the database administrators in the company. Although he expressed uncertainty, he suggested that these stored procedures function similarly to prepared statements. This aligns with my observation that the cursor.callproc() method accepts user inputs as arguments via the args parameter, resembling prepared statements.\nIf this interpretation is accurate, it implies that using the cursor.callproc() method ensures a secure backend, free from SQL injection concerns. Despite these positive indications, I would like to seek additional confirmation here to guarantee the safety of this approach.\n",
        "Answer": "Like it often happens, the problem is in the terminology. And it creates a lot of trouble (and vulnerabilities). A programmer should be always strict in their definitions.\nWhat you are talking about here is using stored procedure's parameter. Such a parameter is a special case related to stored procedures, and very similar in nature to SQL variables.\nIn this case your database doesn't add the contents of arg_test into the SQL body (as it would have been in python if you did something like + arg_test +) and then evaluate the resulting SQL. On the contrary, is uses arg_test as though it's a variable (in this sense, it's indeed similar to prepared statements, but technically it's entirely different matters).\nWhile speaking of stored procedures, they are irrelevant to injections. By itself, just using a procedure doesn't guarantee anything. One can write a procedure which is immune to injection, and write another which is prone to injection. Just like any other code.\nBut as long as you are just using a parameter passed to the procedure - it's safe.\n",
        "Source": "https://stackoverflow.com/questions/77500796/sql-injection-in-stored-procedures-via-mysql-connector"
    },
    {
        "Title": "Protection query against SQL injection, using PDO",
        "Question": "may I ask you how to make this protected against sql injection?\nI have\n$podminkazeme = \"\";\n$podminkakraj = \"\";\n\nif ( isset( $_GET[ \"zeme\" ] )and !empty( $_GET[ \"zeme\" ] ) ) {\n   $podminkazeme = \"and nb.zemehledani in (\" . str_replace( '%2C', ',',  $_GET[ \"zeme\" ] ) . \")\";\n};\n\nif ( isset( $_GET[ \"kraj\" ] )and !empty( $_GET[ \"kraj\" ] ) ) {\n  $podminkakraj = \"and nb.krajhledani in (\" . str_replace( '%2C', ',', $_GET[ \"kraj\" ]  ) . \")\";\n};\n\n$conn = new PDO( DB_DSN, DB_USERNAME, DB_PASSWORD );\n$sqljednotkaa = \"\n  select nb.*, \n    dv.nazev as developer, \n    UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, \n    UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, \n    uz.nazev as skladUpravil, \n    uzm.nazev as makler, \n    tp.nazev as typProdeje, \n    dal.nazev as nazevdalnice\n  from nabidka nb \n  left join uzivatele uz on uz.id=nb.skladUpravil \n  left join uzivatele uzm on uzm.id=nb.makler \n  left join typProdeje tp on tp.id=nb.typProdeje \n  left join developer dv on dv.id=nb.developer\n  left join dalnice dal on dal.id=nb.dalnice \n  where nb.emptyid is null \n    $podminkaid \n    $podminkastav \n    $podminkaupraveno \n    $podminkavelikost \n    $podminkacena \n    $podminkamakler \n    $podminkaexport \n    $podminkatypprodeje \n    $podminkatypnemovitosti \n    $podminkazeme \n    $podminkadalnice \n    $podminkakraj \n    $podminkaokres \n    $podminkadeveloper \n    $podminkatechnickeparametry \n    $podminkahledanislovo \n  order by nb.emptyid asc $razenipodminka\";\n\n$stjednotkaa = $conn->prepare( $sqljednotkaa );\n$stjednotkaa->execute();\n\n",
        "Answer": "Try this\n$conditions = [];\n$parameters = [];\n\nif (isset($_GET[\"zeme\"]) && !empty($_GET[\"zeme\"])) {\n    $zemeValues = explode(',', $_GET[\"zeme\"]);\n    $conditions[] = \"nb.zemehledani IN (\" . implode(', ', array_fill(0, count($zemeValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $zemeValues);\n}\n\nif (isset($_GET[\"kraj\"]) && !empty($_GET[\"kraj\"])) {\n    $krajValues = explode(',', $_GET[\"kraj\"]);\n    $conditions[] = \"nb.krajhledani IN (\" . implode(', ', array_fill(0, count($krajValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $krajValues);\n}\n\n$conn = new PDO(DB_DSN, DB_USERNAME, DB_PASSWORD);\n$sqljednotkaa = \"SELECT nb.*, dv.nazev as developer, UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, uz.nazev as skladUpravil, uzm.nazev as makler, tp.nazev as typProdeje, dal.nazev as nazevdalnice from nabidka nb left join uzivatele uz on uz.id=nb.skladUpravil left join uzivatele uzm on uzm.id=nb.makler left join typProdeje tp on tp.id=nb.typProdeje left join developer dv on dv.id=nb.developer left join dalnice dal on dal.id=nb.dalnice where nb.emptyid is null\";\nif ($conditions) {\n    $sqljednotkaa .= \" AND \" . implode(\" AND \", $conditions);\n}\n$sqljednotkaa .= \" ORDER BY nb.emptyid ASC $razenipodminka\";\n$stjednotkaa = $conn->prepare($sqljednotkaa);\n$stjednotkaa->execute($parameters);\n\n",
        "Source": "https://stackoverflow.com/questions/77416426/protection-query-against-sql-injection-using-pdo"
    },
    {
        "Title": "Enforcing row-level security in a shared postgres pool",
        "Question": "I'm working on a typical client-server webapp. It is using a system somewhat like GraphQL where the client has some flexibility in specifying what data it needs, without custom API endpoints for every type of data. The server is running node, and is using node-postgres with a typical pg.Pool. A client could send something like this:\n{select: '*', from: 'expenses', where: {'op': 'gt', 'lhs': 'expenses.amount', 'rhs': 20}}\n\nwhich would be translated to SELECT * FROM expenses WHERE expenses.amount > $1 (given $1 = 20). With enough care, this system can be made safe from injection attacks.\nI'd also like to incorporate row-level security policies. For example:\ncreate policy only_see_own_expenses on expenses using (expenses.user_id = <USER ID>);\n\nAs an extra security barrier, I want to make sure that even if an injection attack is succesful, a client can not \"unset\" its user ID.\nI've seen <USER ID> been defined in a few ways:\n\ncurrent_user, in which case every user of the app also needs a postgres user/role\nAn arbitrary setting like current_setting('myapp.user_id') in combination with a SET LOCAL myapp.user_id = ... at the start of a transaction\n\nApproach (2) seems most flexible to me. I'd just wrap every generated SQL query in a BEGIN; SET LOCAL myapp.user_id = 123; {generated query}; END;. The problem is that an attacker could inject another SET LOCAL statement, and impersonate another user.\nIn approach (1) you can similarly wrap every generated query with a SET ROLE ... statement at the start, yielding the same problem. An alternative is to create a new connection for each query with that specific role. I believe postgres would never allow that connection to switch to another role. But setting up a new connection per query would result in a lot of overhead.\nHow do I enforce row-level security without the performance hit of a new connection per query?\n",
        "Answer": "As you observe, setting a placeholder parameter and using SET LOCAL ROLE to temporarily assume a different role can be subverted by attackers who can execute arbitrary SQL, like in an SQL injection attack.\nI don't think that there is a way to accomplish what you want that is safe from SQL injection. The problem is a fundamental one: you handle authentication in the application, not in the database (where you are using a single application user to benefit from connection pooling), but you want to have the database handle authorization via row-level security. That requires a way for the application to tell the database what the application user is. Now the only way that the application can tell the database anything is by using SQL, and an attacker who can run arbitrary SQL statements can always subvert that.\nI think that the only option for you is to harden your application against SQL injection attacks.\n",
        "Source": "https://stackoverflow.com/questions/77272972/enforcing-row-level-security-in-a-shared-postgres-pool"
    },
    {
        "Title": "SQL Injection - Python - MySQL",
        "Question": "Basically,\nI'm trying to find ways to explore SQL Injection vulnerabilities in  the code presented below. The code has another layer, presentation, where it asks the user for board_name input.\nTable_name is an inside variable, user doesn't have control over it.\n    def find_board_by_name(cls, connector, board_name, table_name: str):\n        query = \"SELECT * FROM {} WHERE name = '{}'\".format(table_name,board_name.title())\n        print(query)\n        try:\n            connector.mycursor.execute(query)\n            res = connector.mycursor.fetchone()\n            if res:\n                return res[1]\n            return None\n        except Exception as e:\n            raise e\n        \n\nTried to :\n1- board_name as:          ' OR '1'='1\nIt worked, program returned to me me first item on the table (it wasn't supposed to, since I didn't provide any name)\n2- Tried to put board_name as:          ';Delete Table BoardGames;\nIt didn't work, mysql.connector.errors.InterfaceError: Use multi=True when executing multiple statements was presented to me.\nSo my question is \" mysql.connector\" is protecting me against the majorities of the SQL Injections? Since I didn't set the \"multi\" tag in the code to True?  Could you show me other ways to explore vulnerabilities in this code? Besides the 1 and 2.\nI guess I know how to fix the SQL Injection problem: \"connector.mycursor.execute(query, values)\" probably will do the job.  But, I'm trying to understand better what kind of SQL Vulnerabilities I would have with this original code without this fix.\n",
        "Answer": "SQL injection isn't always malicious. It could result in a simple error instead of deleting all the student records.\nFor example, if some legitimate user of your site is named \"O'Reilly\" then your code formatting would have an imbalanced quote, which would be a syntax error:\nSELECT * FROM tablename WHERE name = 'O'Reilly'\n                                       ^ wtf\n\nUsing parameters avoids this kind of problem. Query parameters aren't just a quick way of interpolating variables. They either escape special characters in the dynamic content (by default Python does this), or else full-blown parameters keep the values separate from the SQL query until after it has been parsed by the SQL server. So no special characters can ever cause a syntax error.\nBut table names and other identifiers cannot be parameters. You can use parameters only in place of SQL values, like your quoted string in your example.\nYou said the user is not in control of the table name variable. That's great, but not sufficient.\nWhat if another programmer on your project isn't careful when calling your find_board_by_name() function, and inadvertently passes unsafe content as the table name? Note that unsafe content is more than just user input.\nWhat if the table name is a reserved keyword in SQL?\nSELECT * FROM order WHERE name = ?\n              ^ syntax error\n\nWhat if the table name contains whitespace or punctuation? There are other risks.\nYou should code your function so it does not trust its caller. For SQL values, do use parameters of course. For other dynamic elements like table names, you do have to interpolate variables into the SQL string, but you can be defensive:\n\nUse an allowlist to verify the table name is a legitimate known table name.\n\nDelimit the table name in back-ticks in your SQL, just in case it's a reserved word or not a simple identifier.\nlegit_table_names = Set(['table1', 'table2', 'table3'])\nif table_name not in legit_table_names:\n  return error # pseudocode\n\nquery = f\"SELECT * FROM {table_name} WHERE name = %s\"\n\n\n\n(I prefer f-strings instead of format() in modern Python)\n",
        "Source": "https://stackoverflow.com/questions/77167563/sql-injection-python-mysql"
    },
    {
        "Title": "PHP Code Functioning as Intended but UNION Injection Payload Doesn&#39;t Work",
        "Question": "I am attempting to make a web application (LAMP stack - MySQL version: 8.0.36-0ubuntu0.22.04.1) that is vulnerable to a SQL UNION Injection attack (or some type of SQL injection attack). The code takes the user's input via POST parameters to get the VIN & mileage.\nThe following PHP Code handles the backend to adding the parameters to the database:\n// If SESSION variables are set then proceed to Mileage.php\n    if (isset($_SESSION['username'])) {\n        // PHP Code for Handling ADDING CAR\n        // Declare Variables\n        $username = $_SESSION['username'];\n        $vin = $_POST['vehicle'];\n        $mileage = $_POST['mileage'];\n\n        // Implement Try-catch for Error Hanlding\n        try {\n            // Add Mileage\n            if(isset($_POST['add_data'])) {\n                $query = \"INSERT INTO mileage_master.mileages (`username`, `VIN`, `mileage`) VALUES ('$username', '$vin', '$mileage')\";\n                $query_result = mysqli_query($db,$query);\n    \n            // Update Mileage\n            } elseif(isset($_POST['update_data'])) {\n                // Query to update associated VIN's Mileage\n                $update = \"UPDATE mileage_master.mileages SET mileage='$mileage' WHERE username='$username' AND VIN='$vin'\";\n                $update_result = mysqli_query($db,$update);\n            // Remove Mileage\n            } elseif(isset($_POST['remove_data'])) {\n                // Query to Remove VIN & Mileage\n                $remove = \"DELETE FROM mileage_master.mileages WHERE username='$username' AND VIN='$vin'\";\n                $remove_result = mysqli_query($db,$remove);\n            }\n        }\n        catch (mysqli_sql_exception $e) {\n            $showAlert = true;\n            // Display Syntax Error\n            $errorMessage = \"My SQL Error: \" . $e->getMessage();\n            // Display Query (Intentional Unsafe Coding Practices)\n            $errorMessage .= \"\\t||\\tQuery: \" . $sql;\n        }\n\n        \n    }    \n    else {\n        header(\"Location: /\");\n    }\n?>\n\nThe following PHP code prints the VIN & mileage to user's page:\n<?php\n    // Query to get all VINs associated with username\n    $result = mysqli_query($db,\"SELECT * FROM mileages WHERE username='$username'\");\n\n    echo \"<table style='margin-top: 35px;'>\";\n    echo \"<tr><th>VIN</th>\";\n    echo \"<th>Mileage</th></tr>\";\n\n    // While Loop to iterate through all returned rows\n    while($row = mysqli_fetch_assoc($result)) {\n        echo \"<tr style='text-align: center;'>\";\n        // VIN\n        echo \"<td>\" . $row['VIN'] . \"</td>\";\n        // Mileage\n        echo \"<td>\" . $row['mileage'] . \"</td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n?>\n\nMy thought process was that because the application uses dynamic queries an attacker could include some type of UNION SELECT statement. The UNION select statement's output would be stored within the VIN column for that query.\nHowever, I am unable to create a successful SQL Injection payload that would accomplish this.\nQuestion\nDo I need to change the logic of my application to make the exploit possible or is my idea not exploitable in the first place?\n",
        "Answer": "You can't get SQL injection in the SELECT query, since the user doesn't have control over the $username variable, and that's the only thing you substitute. But you can do it in the INSERT query, to insert extra rows in the table with arbitrary values.\nIt needs to terminate the current value list, then it can use a subquery in another value list, and finally it has to provide the beginning to match the end of the original value list.\n$vin = \"12345', '20'), ('baduser', (SELECT '67890'), (SELECT '30')), ('baduser2', '1111\";\n\nThis will put a bogus VIN and mileage into the row for $username, then insert additional rows for baduser and baduser2. baduser2 will get another bogus VIN and the mileage from the parameter.\nbaduser can use subqueries to get its VIN and mileage values, as long as the subqueries each only return one row and column. I used literals in the above example, but you can make them arbitrarily complex.\n",
        "Source": "https://stackoverflow.com/questions/78093937/php-code-functioning-as-intended-but-union-injection-payload-doesnt-work"
    },
    {
        "Title": "How to fix SQL injection if we have to use DB name dynamically in SQL Server?",
        "Question": "This is the implementation in code: the schema name comes from a configuration file and is different for each environment. Sonar throws SQL injection alert at this statement:\nselect * \nfrom dbName.dbo.stu_name;     <<dbname is the variable that comes from property file>>\n\nI tried these solutions:\n\nUsing query.setParameter(?,dbname). Tried passing dbname dynamically and vulnerability was fixed. When debugging, the query was throwing an error and did not execute.\n\nUsed String.format(select * from \\'%s\\',tablename.replace(\"\\'\",\"\\'\\'\")) - vulnerability fixed, but query failed to execute\n\n\nI tried various other solutions and nothing worked.\nCan anyone please help me with this?\n",
        "Answer": "The \"best\" defence you can do is not use dynamic SQL. Considering that this is the database that's dynamic, and based on a prior question, I would suggest that this is occurring from an application, so that means you don't need 3-part naming. Instead you parametrise the database name in the connection string and use 2-part naming; no dynamic SQL needed.\nIf you must use dynamic SQL, then the \"best\u2122\ufe0f\" defence would be to validate the database name, and then ensure you properly quote the database name when you inject it into your dynamic statement.\nHere I validate the database name in sys.databases and then use QUOTENAME to quote the name appropriately. If the database doesn't exist, no query is run (and no error is returned):\nDECLARE @DatabaseName sysname = N'YourDatabaseName';\n\nDECLARE @SQL nvarchar(MAX);\nSELECT @SQL = N'SELECT * FROM ' + QUOTENAME(d.name) + N'.dbo.stu_name;'\nFROM sys.databases d\nWHERE d.name = @DatabaseName;\n\nEXEC sys.sp_executesql @SQL;\n\n",
        "Source": "https://stackoverflow.com/questions/78027431/how-to-fix-sql-injection-if-we-have-to-use-db-name-dynamically-in-sql-server"
    },
    {
        "Title": "How to reduce vulnerability to cyber attacks from injection?",
        "Question": "I have very little knowledge about SQL injection, and there are probably other threats I am unaware of out there for stealing company data, how would I make this python code better in regards to security?\nmerge_query = \"\"\"\nMERGE INTO sql_table_name AS Target\nUSING (\n    VALUES {}\n) AS Source (transaction_year, month_num, month_name, price_nt)\nON Target.transaction_year = Source.transaction_year \nAND Target.month_num = Source.month_num\nWHEN MATCHED AND (Target.month_name != Source.month_name OR Target.price_nt != Source.price_nt) THEN\n    UPDATE SET Target.month_name = Source.month_name, Target.price_nt = Source.price_nt\nWHEN NOT MATCHED THEN\n    INSERT (transaction_year, month_num, month_name, price_nt) VALUES (Source.transaction_year, Source.month_num, Source.month_name, Source.price_nt);\n\"\"\".format(','.join(['(?,?,?,?)' for _ in range(len(data))]))\n\nparams = [item for sublist in data for item in sublist]\n\ntry:\n    obj_crsr.execute(merge_query, params)\n\nexcept Exception as e:\n    obj_crsr.rollback()\n    print(e)\n    print(\"Transaction rolled back\")\n\nelse:\n    obj_cnxn.commit()\n    obj_crsr.close()\n    obj_cnxn.close()\n\nThis python code is given data in the following format:\n[(2023, M12,    December,   541.44),\n(2023,  M11,    November,   486.64),\n(2023,  M10,    October,    468.23),\n(2023,  M09,    September,  478.80),\n(2023,  M08,    August,     475.41)]\n\nAnd then is converted to a list in the params variable.  That data looks like this:\n['2023', 'M12', 'December', '541.442', '2023', 'M11', 'November', '486.639', '2023', 'M10', 'October', '468.226', '2023', 'M09', 'September', '478.802', '2023', 'M08', 'August', '475.411']\n\nThis is the only method I have found to work when trying to merge data into an existing table using PYODBC.  I have heard of parameterizing the query or naming sql variables, but I don't know how to adapt existing examples/solution on stack overflow to my specific use case.  Any suggestions are appreciated.\n",
        "Answer": "There is nothing wrong with your existing code as far as injection is concerned.\nInjection only happens when user data is injected directly into the query. Here, that is not happening. What is happening is that a dynamic list of ? parameter markers are being injected, in a well-defined way (once per row), and the actual values are passed as a dynamic list of parameters. There is absolutely no scope for injection here.\nBe aware of a few points though:\n\nUsing such code does tend to focus minds on \"oh just inject the data\". Might be worth putting in a comment such as only paramaters are injected here.\nIf there are no rows at all to insert then you get invalid code ( VALUES ), so you should check for that.\nDynamic numbers of parameters mean you get a recompile for every possible variation of parameters. This is not as many as would be had if you actually injected the data, but still a concern.\nA Table-Valued Parameter or a bulk insert into a temp table are therefore both better options than any of this, but neither are supported by pyodbc. fast_executemany or to_sql might be options, or BULK INSERT from an external file.\nThe maximum number of parameters is 2100, you will hit performance issues well before that though.\n\n",
        "Source": "https://stackoverflow.com/questions/77996154/how-to-reduce-vulnerability-to-cyber-attacks-from-injection"
    },
    {
        "Title": "Is using Hibernate&#39;s Restrictions.eq() method safe against SQL injection?",
        "Question": "Is using Hibernate's Restrictions.eq() method, as used in the example below, safe against SQL injection? Or similar methods like Restrictions.in(), Restrictions.ge(), ...\nString vulnerable = //parameter from user interface \nCriteria ct = this.getCriteria();\nct.add(Restrictions.eq(\"propertyName\", vulnerable));\n\nI have found that probably is, as explained in this answer\nbut reviewing OWASP documentation, there is an example that shows a comment which confuses me (// This should REALLY be validated too). Is needed to validate the input, or is secure as is?\nThe example in the OWASP documentation\n// Criteria API\n// This should REALLY be validated too\nString userSuppliedParameter = request.getParameter(\"Product-Description\");\n// Perform input validation to detect attacks\nInventory inv = (Inventory) session.createCriteria(Inventory.class).add\n(Restrictions.eq(\"productDescription\", userSuppliedParameter)).uniqueResult();\n\n",
        "Answer": "Yes, Hibernate's Criteria API would protect you against SQL Injection, as it parameterises the query - you can see this in action by enabling sql logging.\nWhat you do need to be careful about is concatenating user inputs etc. I think the documentation may perhaps be referring to validate the user input at both client and server side.\n",
        "Source": "https://stackoverflow.com/questions/77993970/is-using-hibernates-restrictions-eq-method-safe-against-sql-injection"
    },
    {
        "Title": "Operand type clash: int is incompatible with date in sql",
        "Question": "i using am writing a insert statement but getting above error\nInsert query\nvar insertSql = string.Format(\n                $\"INSERT INTO Sales (Date, Team, Sales) VALUES ({0}, {1}, {2})\",\n                new List<SqlParameter>()\n                {\n                    new(\"@date\", sales.Date.ToString(\"yyyy-MM-dd\")),\n                    new(\"@team\", sales.Team),\n                    new(\"@sales\", sales.Sales),\n                });\n            var rowCount = Sql.ExecuteNonQuery(Conn,insertSql);\n\nhere is my table schema and class\nSaleId int,\nDate Date,\nTeam varchar(50),\nSales int\n\npublic class Sales\n{\n    public int SalesId { get; set; }\n    public DateTime Date { get; set; }\n    public string Team { get; set; }\n    public int Sales { get; set; }\n}\n\nI want to use parameterized query to achive this so tried this but giving above error\n",
        "Answer": "The immediate problem here is that $\"...\" is itself an interpolated string, and the values you are injecting are the literal 0, 1, and 2 - they're not placeholders: they're the values. Removing the $ would make it a literal string suitable for string.Format, but you don't want to use string.Format here; also, you don't want to format the date - just pass it as a date.\nHonestly: if you're writing the SQL yourself, I'm not sure EF is even needed here; with Dapper this would be simply:\nconn.Execute(\"INSERT INTO Sales (Date, Team, Sales) Values (@Date, @Team, @Sales)\",\n    sales);\n\nor with a trick for better SQL formatting:\nconn.Execute(\"\"\"\n    INSERT INTO Sales (Date, Team, Sales)\n    Values (@Date, @Team, @Sales)\n    \"\"\", sales);\n\nDapper will deal with finding sales.Date, sales.Team and sales.Sales, and add them correctly. EF may also have an API for doing ad-hoc queries like this, but... this feels more like a Dapper scenario, unless you're emotionally invested in EF.\n",
        "Source": "https://stackoverflow.com/questions/77926016/operand-type-clash-int-is-incompatible-with-date-in-sql"
    },
    {
        "Title": "How to limit memory usage with PDO in MariaDB : Fatal error: Allowed memory size of 67108864 bytes exhausted",
        "Question": "I am changing my SQL request to PDO in order to integrate more security against SQL injecting.  I was using before procedural msqli and everything was working ok.  Now I updated server to PHP 8.2 and I am using PDO and prepared statements.\nThe BD I am accessing is old MariaDB and has a table with 247 fields most of which are NULL on a single row. (It is sections for a description of mushrooms, but only some of each are really described in a single row (mushrooms)).\nMost of the 247 fields are set to mediumtext because they can content up to a couple paragraphs.\nMy connection script is :\ntry {\n\n    db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\nreturn;\n} \n\nWhen I select one row of that table in order to echo the not NULL descriptions column, as soon as I execute the statement I run into a full memory.  The error is at the stmt->execute() line, not even at the fetchAll line.\n$description = 'someTag';\n\n$sql = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n$stmt = $db->prepare($sql);\n$stmt->bindParam(':tag', $description, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n$result = $stmt->fetchAll();\n$stmt->closeCursor();\n\nThe error :\nFatal error: Allowed memory size of 67108864 bytes exhausted (tried to allocate 262144 bytes) in /home/mycoqueb/public_html/nou.mycoquebec.org/scripts/bd-query.php on line (**the $stmt->execute() line)\n\nI tried to use :\nwhile ($row = $stmt->fetch()) {\n\nInstead of fetchAll() but it changed noting, I used it on every other request from the same page and it changed noting.  I flushed variables that were no more useful to NULL on the rest of the page and it changed nothing.  I even isolated the script on an empty page and it exceeds the memory limit.\nI tried to add this to my connection script and it changed nothing :\ndb->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\nI tried to select only one field instead of * and this worked, but I don't have an easy way to find NOT NULL columns in the table for a specific tag (row).\nI tried to find a SQL statement to restrict my SELECT to NOT NULL columns but I was not successful.\nI know I could get add memory_limit = 256M to the phpini file, but that is not what I want since the website has a high usage and for now its on a multihosted server.\nThe best solution would be to reengineer the MariaDB database using a table with description sections labels and linking only used sections to the main description table for each row, but I have limited access to the db since it is online with the old website and the old website needs to stay online and up to date for 1-2 years after new deployment. I though of creating a daily cron job to do that but I would like to avoid for the moment.\nAny Idea how I can get this to work?  It was working fine using msqli on php 8.1.\nTo answer the worries of contributors that think it's related to another part of the page code, here is the complete code of the isolated test page.\nfunction convert($size)\n {\n    $unit=array('b','kb','mb','gb','tb','pb');\n    return @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];\n }\n\n\n$servername = \"localhost\";\n$username = \"myUser\";\n$password = \"myPass\";\n$dbname = \"myDB\";\n\n\ntry {\n\n    $db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    //$db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\n } catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\n    return;\n}   \n\n$query = (array_key_exists(\"query\",$_REQUEST) ? $_REQUEST[\"query\"] : \"\");\n\n\nif($query != \"\"){\n\n    $tag_desc = 'Aegerita candida';\n    // Code works if I limit to \"SELECT Titre FROM description WHERE tag = :tag LIMIT 1\";\n    $sql_description = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n    $stmt = $db->prepare($sql_description);\n    $stmt->bindParam(':tag', $tag_desc, PDO::PARAM_STR);\n    \n    echo convert(memory_get_usage(true));  // returns 2mb\n    $stmt->execute();\n    $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n    \n    $i = 0;\n    \n    while ($row = $stmt->fetch()) {\n\n        if($i == 0) {\n\n            ?><table style=\"border-collapse:collapse;border: 0;table-layout: fixed;color: #063850;background-color: #DDDDDD;text-align: left\"><thead><tr style=\"border: 2px solid #063850;\"> <?php\n            foreach (array_keys($row) as $key) {\n                //print_r($key);\n                echo (\"<th style='padding:5px;border: 2px solid #063850;position:sticky;top: -2;z-index:10;background-color:#e5a045'>$key</th>\");\n            }\n            echo (\"</tr></thead>\");\n        }\n\n        $i++;\n\n        echo (\"<tr style='border: 2px solid #063850'>\");\n        foreach ($row as $value) {\n            echo (\"<td style='padding:2px;border: 2px solid #063850'>$value</td>\");\n            // <img src=\\\"$value\\\" height=\\\"400\\\" >\n        }\n        echo (\"</tr>\");\n    }\n    \n    if ($i > 0) {\n        echo (\"</table>\");\n        echo ('<div style=\"margin-top:400px\">&nbsp;</div>');\n    } else {\n        echo \"Aucun r\u00e9sultat\";\n    }\n\n}\n\n$db = null;\n\nHas mentioned it automatically work if I limit my sql to a couple fields.\nThe error is still on the stmt->execute() line.\n",
        "Answer": "Could it be that the issue is your data model?\nIf you have a table that has a lot of nulls, then the data is most likely not normalized.\nInstead of having 256 columns in your table, maybe just have the ones that are always there, and then relate it to a separate table with three fields: foreign key to the main table, a tag field and a value field.\nIf you are rewriting your application to USE PDO anyway, some long-term considerations could be included.\nExample table\nLayout like yours (all data in one table):\n\n\n\n\nid\nname\nemail\nsomeotherdata\ntag1\ntag2\ntag3\ntag4\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\nNULL\na\nNULL\n100\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\nc\na\nNULL\n400\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\nNULL\nNULL\n5000\nNULL\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\nNULL\na\nNULL\n100\n\n\n\nSuggested Tag-Value table layout\nMain Table\n\n\n\n\nid\nname\nemail\nsomeotherdata\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\n\n\n\n\nTag-Value Table\n\n\n\n\nid\ntag\nvalue\n\n\n\n\n1\ntag2\na\n\n\n1\ntag4\n100\n\n\n2\ntag1\nc\n\n\n2\ntag2\na\n\n\n2\ntag4\n400\n\n\n3\ntag3\n5000\n\n\n4\ntag2\na\n\n\n4\ntag4\n100\n\n\n\nUsage\nInstead of selecting just your row, you WILL need to either join the results together, or make two separate calls. I would suggest two calls, especially since you are rtunning into memory issues.\nSELECT \n  id, \n  name,\n  email,\n  someotherdata\nFROM\n  MainTable\nWHERE\n  id = 1;\n\n-- and then the tags\nSELECT \n  id, \n  tag,\n  value\nFROM\n  TagValueTable\nWHERE\n  id = 1; -- reference to the main table\n\n\n\nAdvantaages of this normalized approach\n\nLess bloat (not so many nulls)\nSimpler structures\nREST ready\nMore resilient\n\nAdd tags without changing the DDL of the database (ALTER)\n\n\nYou can still get the original layout by making subselects and transpositions in mysql\nYou can easily make statistics on the tags related to each other\n\nDisadvantages\n\nComplexity of the data model increases\nYou need to do a lot of extra SQL gymnastics to get EXACTLY what you had before\n\n",
        "Source": "https://stackoverflow.com/questions/77895050/how-to-limit-memory-usage-with-pdo-in-mariadb-fatal-error-allowed-memory-size"
    },
    {
        "Title": "PHP: Prepare JSON selector to Prevent MySQL Injection",
        "Question": "What is the best/proper way to prepare a dynamic MySQL JSON selector for queries, in order to prevent SQL injection? As an example, say I want to execute the following query:\nSELECT `key` ->> \"$.key.path\" AS `setting_value`\nFROM `settings`\nLIMIT 1\n\nBut I want to make the key path dynamic, e.g.:\n$sql = <<<SQL\n    SELECT `key` ->> \"{$path}\" AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nWith conditional values, I can structure the SQL for a prepared statement using PDO, e.g.:\n$sql = <<<SQL\n    SELECT *\n    FROM `settings`\n    WHERE `other_field` = :field_val\n    LIMIT 1\nSQL;\n\n$statement = $this->handle()->prepare($sql);\n$statement->execute([':field_val' => 'some val']);\n$records = $statement->fetchAll(PDO::FETCH_OBJ);\n\nAdding something like the following to my database adapter (or even to my helper functions) seems rather inelegant and prone to errors/issues:\n    public function cleanJsonSelector(string $selector) : string {\n        return preg_replace('/[^-\\$a-zA-Z0-9_\\[\\].*\\s]/', '', $selector);\n    }\n\nThoughts/help?\n",
        "Answer": "The -> and ->> operators only support string literals. They do not expressions, variables, or parameters.\nBut you can use any expression \u2014\u00a0including a parameter placeholder \u2014\u00a0in the equivalent JSON function JSON_EXTRACT().\nThe ->> operator is like JSON_UNQUOTE(JSON_EXTRACT(json_doc, path))\n$sql = <<<SQL\n    SELECT JSON_UNQUOTE(JSON_EXTRACT(`key`, :path)) AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nThis seems like an unnecessary inconsistency in the functionality of MySQL's JSON operators, but this is how it's implemented in the current MySQL version 8.3.\n\nFor what it's worth, it was requested to support expressions after the -> operator (and presumably also the ->> operator) here: https://bugs.mysql.com/bug.php?id=87360\nYou may want to log into the MySQL bug tracker site and click the \"Affects Me\" button to hopefully increase the priority of implementing that feature.\n\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => true (the default), then parameters are not true parameters, they are string-substitutions into the SQL query before it is parsed. So what looks like a parameterized query really uses a string literal as far as MySQL is concerned, and the ->> operator is successful.\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => false, then parameters placeholders are parsed by MySQL during the prepare step. Since parameters are not supported as the argument to the ->> operator, this will fail.\nMysqli only supports true parameters, so it will always fail.\n",
        "Source": "https://stackoverflow.com/questions/77892840/php-prepare-json-selector-to-prevent-mysql-injection"
    },
    {
        "Title": "SQL-Injection in duckdb-queries on pandas dataframes",
        "Question": "In a project I am working with duckdb to perform some queries on dataframes. For one of the queries, I have some user-input that I need to add to the query. That is why I am wondering if SQL-Injection is possible in this case. Is there a way a user could harm the application or the system through the input? And if so, how could I prevent this case? It seems that duckdb has no PreparedStatement for queries on dataframes.\nI already looked up in the documentation (https://duckdb.org/docs/api/python/overview.html) but couldn't find anything useful. The method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\nThere is another question on stackoverflow (Syntax for Duckdb > Python SQL with Parameter\\Variable) about this topic but the answer only works on real sql-connections and the version with f-strings seems insecure to me.\nHere is a small code sample to show what I mean:\nimport duckdb\nimport pandas as pd\n\ndf_data = pd.DataFrame({'id': [1, 2, 3, 4], 'student': ['student_a', 'student_a', 'student_b', 'student_c']})\n    \nuser_input = 3  # fetch some user_input here\n    \n# How to prevent sql-injection, if its even possible in this case?\nresult = duckdb.query(\"SELECT * FROM df_data WHERE id={}\".format(user_input))\n\nSo how would you approach this problem? Is sql-injection even possible? Thanks for your help and feel free to ask for more details, if you need some more information!\nEDIT: Fixed a syntax error in the code\n",
        "Answer": "\nThe method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\n\nIt seems it's possible:\n>>> duckdb.execute(\"\"\"SELECT * FROM df_data WHERE id=?\"\"\", (user_input,)).df()\n\n   id    student\n0   3  student_b\n\n",
        "Source": "https://stackoverflow.com/questions/77884985/sql-injection-in-duckdb-queries-on-pandas-dataframes"
    },
    {
        "Title": "SQL injection error in Modsecurity logs in Plesk",
        "Question": "I am receiving the following error for 1 of my wordpress site running on a Plesk server.\n[client 000.00.00.000] ModSecurity: Access denied with code 403 (phase\n 2). Pattern match \"[\\\\\\\\[\\\\\\\\]\\\\\\\\x22',()\\\\\\\\.]{10}$|\\\\\\\\b(?:union\n\\\\\\\\sall\\\\\\\\sselect\\\\\\\\s(?:(?:null|\\\\\\\\d+),?)+|order\\\\\\\\sby\n\\\\\\\\s\\\\\\\\d{1,4}|(?:and|or)\\\\\\\\s\\\\\\\\d{4}=\\\\\\\\d{4}|waitfor\\\\\\\\sdelay\\\\\\\\s'\n\\\\\\\\d+:\\\\\\\\d+:\\\\\\\\d+'|(?:select|and|or)\\\\\\\\s(?:(?:pg_)?sleep\\\\\\\\(\\\\\\\\d+\n\\\\\\\\)|\\\\\\\\d+\\\\\\\\s?=\\\\\\\\s?(?:dbms_pipe\\\\\\\\.receive_message\\\\\\\\ ...\" at \nREQUEST_COOKIES:sbjs_first. [file \"/etc/httpd/conf/modsecurity.d/rules\n/comodo_free/22_SQL_SQLi.conf\"] [line \"66\"] [id \"218500\"] [rev \"18\"] \n[msg \"COMODO WAF: SQLmap attack detected||website name|F|2\"] [data \n\"Matched Data: |||id=(none) found within REQUEST_COOKIES:sbjs_first: \ntyp=typein|||src=(direct)|||mdm=(none)|||cmp=(none)|||cnt=(none)|||trm=\n(none)|||id=(none)\"] [severity \"CRITICAL\"] [tag \"CWAF\"] [tag \"SQLi\"] \n[hostname \"website name\"] [uri \"/wp-login.php\"] [unique_id \"ZamB-\n8j9IfDbYiJgRoahGwAAAAM\"], referer:\n\nWhen I visited some pages on the frontend it gives this error:\nServer Error\n403\nForbidden\nYou do not have permission to access this document.\nThat's what you can do\nReload Page Back to Previous Page Home Page\nI wonder if this a real attack? or false positive\nI was able to export the site to local. It seems working ok there.\n",
        "Answer": "CRS dev-on-duty here. Even if you don't use CRS rules and this is a problem of COMODO WAF rules, I'll try to help. While searching for the cookie name sbjs_first, I found this GitHub issue here, which is an indication that this sourcebuster cookie looks legitimate. Maybe you'll even the solution to your problem in one of the comments in this issue.\nIf this isn't the solution, you may need to tune the rules. Maybe you can also use our (CRS) documentation on false positives and rule tuning.\n",
        "Source": "https://stackoverflow.com/questions/77842169/sql-injection-error-in-modsecurity-logs-in-plesk"
    },
    {
        "Title": "Oracle SP Checkmarx SAST scan showing Parameter Tampering",
        "Question": "SP accepts key and returns flag status. In Checkmarx SAST scan key, It is saying parameter not validated before being used in query. Please help to understand what validation can be added so that it passes the vulnerability test.\nCreate procedure sp_name (key varchar2, v_flag out number) as\nv_key varchar2(50);\nv_sql clob;\nBegin\nIf key is null then\nv_flag:=-1;\nElse\nv_key:=sys.dbms_assert.enquote_literal(upper(trim(key)));\nv_key:=replace(v_key,'''');\nv_sql:=q'[select flag from tbl where key=:1]';\nExecute immediate v_sql into v_flag using v_key;\nEnd if;\nException when no_data_found then\nv_flag:=-1;\nEnd;\n\nI tried bind variable and dbms_assert but still it shows code is vulnerable\n",
        "Answer": "Stop using EXECUTE IMMEDIATE when you do not need to (and trying to make it overly complicated) and use a simple SELECT ... INTO ... statement with the PL/SQL variable as the bind variable (and give the PL/SQL variable a different name to the table's column).\nThe procedure can be simplified to:\nCREATE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  SELECT flag\n  INTO   v_flag\n  FROM   tbl\n  WHERE  key=v_key;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nThen, if you have the sample data:\nCREATE TABLE tbl (key, flag) AS\n  SELECT 'A',  1 FROM DUAL UNION ALL\n  SELECT 'B',  2 FROM DUAL UNION ALL\n  SELECT 'C',  3 FROM DUAL UNION ALL\n  SELECT NULL, 4 FROM DUAL;\n\nThen:\nDECLARE\n  v_flag TBL.FLAG%TYPE;\nBEGIN\n  sp_name('A', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('B', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('C', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('D', v_flag);\n  DBMS_OUTPUT.PUT_LINE('D: ' || v_flag);\n  sp_name(NULL, v_flag);\n  DBMS_OUTPUT.PUT_LINE('NULL: ' || v_flag);\nEND;\n/\n\nOutputs:\n\nA: 1\nB: 2\nC: 3\nD: -1\nNULL: -1\n\n\nOr, if you want it slightly more complicated to avoid the SELECT if the key is NULL then:\nCREATE OR REPLACE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  IF v_key IS NULL THEN\n    v_flag := -1;\n  ELSE\n    SELECT flag\n    INTO   v_flag\n    FROM   tbl\n    WHERE  key=v_key;\n  END IF;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nfiddle\n",
        "Source": "https://stackoverflow.com/questions/77841440/oracle-sp-checkmarx-sast-scan-showing-parameter-tampering"
    },
    {
        "Title": "What is the correct syntax for dollar-parameters in PostgreSQL queries?",
        "Question": "I am struggling with the correct syntax for a dollar-parameter. It sometimes works, sometimes not.\nI am using the 'pg' package for NodeJS, but since AFAIK parsing the query happens on the server side, I don't expect this to matter.\nCode:\nconst client: PoolClient = ...;\nawait client.query('SELECT \\'foo\\' = $1', [projectId]);\nawait client.query('SET \"gvc.currentProjectId\" = $1', [projectId]);\n\nThe first query is obviously useless, but I added it to experiment with the syntax. An error occurs in the second query, so the first one seems to work. The second one fails with:\nunexpected exception error: syntax error at or near \"$1\"\n\nIs it even possible to use dollar-parameters in the value for SET? I want to secure my application against SQL injection attacks, so manually escaping the projectId is a last resort.\n",
        "Answer": "As explained in https://dba.stackexchange.com/a/333947, SET can indeed only take literal values, no parameters or query results. That post links to the set_config command, which does not have such a restriction.\nhttps://pgpedia.info/s/set_config.html\n\nNeither the post not the documentation explain why both exist, nor why SET cannot take parameters since set_config demonstrates that it is possible to do so.\nSimply using set_config over SET solves the problem.\n",
        "Source": "https://stackoverflow.com/questions/77839814/what-is-the-correct-syntax-for-dollar-parameters-in-postgresql-queries"
    },
    {
        "Title": "How do I write prepared statements in ballerina?",
        "Question": "Is there a way to write prepared statements for SQL in ballerina? or is it a good practice to use the following method for that?\nfunction selectUserQuery(string username) returns sql:ParameterizedQuery => `SELECT * FROM users WHERE user_name=${username}`;\n\n",
        "Answer": "In ballerina sql:ParamerterizedQuery works as a prepared statement. (this differs a little from other languages as ballerina mandates giving the variable order, when writing the statement itself)\nYes, using functions is the best practise to keep SQL statements in ballerina.\nFor the sake of completeness, I would like to quote the following from this article.\nConsider the below statement,\nsql:ParameterizedQuery selectQuery = `SELECT * FROM users WHERE user_name=${username}`;\nBallerina executes this query in multiple steps,\n\nTemplate the query:\nThe sql module will replace the insertions in the query using ?. (e.g. `SELECT * FROM users where user_name=?`) Here, all insertions in the query are considered to be user inputs.\n\nThe database compiles the query:\nThe database validates the templated SQL query for syntax and semantics (column availability, authorization) errors. Finally, the server parses the query.\n\nPlaceholder replacement:\nThe programme sends all the user data values to the database. The database will replace the placeholders at this point. However, since the query is pre-compiled, even if the database appends the values, the scope of the execution will not change. i.e. SQL Injection cannot turn a SELECT command into a DELETE.\n\nQuery execution.\n\n\n",
        "Source": "https://stackoverflow.com/questions/77763194/how-do-i-write-prepared-statements-in-ballerina"
    },
    {
        "Title": "Problem with identical metrics results after machine learning",
        "Question": "When trying machine learning on a dataset, I got the same results for metrics such as accuracy and F-score on different machine learning algorithms.\nI have a dataset on which I trained my chosen algorithms. I found it on the Kaggle website: source.\nHere are code snippets from the Jupiter file, and the results of their execution:\nList of connected libraries\nIN:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report\nimport joblib\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras import models, layers\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nLoading dataset\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\ndf.head(10)\n\nLoad, process and split the data for further training of the classification model\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\n\ndf = df[(df['attack_type'] == 'sqli') | (df['attack_type'] == 'norm')]\n\nX = df['payload']\ny = df['label']\n\nvectorizer = CountVectorizer(min_df = 2, max_df = 0.8, stop_words = stopwords.words('english'))\nX = vectorizer.fit_transform(X.values.astype('U')).toarray()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)\n\nOUT:\n(8040, 1585)\n(8040,)\n(2011, 1585)\n(2011,)\n\nNaive Bayes Classifier\nIN:\nnb_clf = GaussianNB()\nnb_clf.fit(X_train, y_train)\ny_pred = nb_clf.predict(X_test)\nprint(f\"Accuracy of Naive Bayes on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Naive Bayes on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of Naive Bayes on test set : 0.9806066633515664\nF1 Score of Naive Bayes on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       0.97      0.98      0.97       732\n        norm       0.99      0.98      0.98      1279\n\n    accuracy                           0.98      2011\n   macro avg       0.98      0.98      0.98      2011\nweighted avg       0.98      0.98      0.98      2011\n\nRandom forest algorithm:\nIN:\nrf_clf = RandomForestClassifier()\nrf_clf.fit(X_train, y_train)\ny_pred_rf = rf_clf.predict(X_test)\nprint(f\"Accuracy of Random Forest on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Random Forest on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred_rf))\n\nOUT:\nAccuracy of Random Forest on test set : 0.9806066633515664\nF1 Score of Random Forest on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.96      0.98       732\n        norm       0.98      1.00      0.99      1279\n\n    accuracy                           0.99      2011\n   macro avg       0.99      0.98      0.99      2011\nweighted avg       0.99      0.99      0.99      2011\n\nSupport vector machine\nIN:\nsvm_clf = SVC(gamma = 'auto')\nsvm_clf.fit(X_train, y_train)\ny_pred = svm_clf.predict(X_test)\nprint(f\"Accuracy of SVM on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of SVM on test set: {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of SVM on test set : 0.9189457981103928\nF1 Score of SVM on test set: 0.8658436213991769\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.76      0.87       689\n        norm       0.89      1.00      0.94      1322\n\n    accuracy                           0.92      2011\n   macro avg       0.95      0.88      0.90      2011\nweighted avg       0.93      0.92      0.92      2011\n\nAs you can see when training on different machine learning algorithms, we get the same results in the case of random forest and naive Bayesian classifier.\nI hope you can help me to fix a possible bug in the code or improve it in some way.\n",
        "Answer": "In your code for Random Forest, you're storing predictions as y_pred_rf but calling your metrics on y_pred\n",
        "Source": "https://stackoverflow.com/questions/77686328/problem-with-identical-metrics-results-after-machine-learning"
    },
    {
        "Title": "WordPress sql injection",
        "Question": "Thanks for letting me post here, I'm just starting to learn programming.\nI have a problem with a WordPress site which I update for my dad's local motorcycle road safety training group, which is run as a charity/non-profit by volunteer instructors. The hosting company (LCN) has taken the site down and emailed the group the following:\n\n\nDomain name : kamg.org.uk\nDatabase : kamg_org_uk_dbtest\nMySQL Server : database3.lcn.com\nOur monitoring scripts have detected an SQL injection attack occurring on your web site kamg.org.uk, using exploitable code hosted there.\nThe SQL queries that have been flagged as suspicious/malicious are listed here :\n----- BEGIN REPORT -----\nTIME RUNNING: 01:34:02\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\nTIME RUNNING: 01:34:00\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\n----- END REPORT -----\n\nWP, plugins and theme are all kept up to date at all times.\nCan I safely just delete those lines from the database to clean the site?\nLCN offer the group free charity hosting but I have found over 1600 domains share the same server. Once the sql injection is cleaned the group will move to managed WP hosting in the hope it will be more secure.\nThx,\nNiels\nI have tried reinstalling WordPress by FTP, but the hosts have denied the attempt, having removed all permissions.\nTheir support is appalling, taking 4 days to respond to queries, and then answering the wrong question with a cut & paste stock response.\nI have just started learning, but I'd be happy to go in and edit files (with some nervousness) but haven't attempted anything at this stage.\n",
        "Answer": "It's not the data that is at fault, it's something in the code of WordPress, or more likely one of the plugins or themes you have installed.\nThe way the code works is something like this:\n$query = 'SELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key,\n  wp_usermeta.meta_value \nFROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"' . $variable . \n  '\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" \n  AND wp_users.ID = wp_usermeta.user_id';\n\nBut the value of $variable has been exploited by some attacker. They set it to the following string:\n\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\n\n(even including the quote characters.)\nWhen the variable is concatenated into the query, it causes the SQL query to have extra expression terms, that the attacker injected.\nIt looks like they're forcing sleep() calls to test if certain tables exist. They'll use this method to learn all your table names. Then they'll use information in subsequent attacks, to read those tables. SQL injection hackers have to probe using techniques like this to try to avoid detection.\nThe original query may be a normal part of the code of WordPress or one of the plugins or themes. But the programmer made a mistake by concatenating a variable whose value was set from untrusted input. Programmers aren't supposed to do this, but many are either unaware of the risk, or else they think it won't happen to their code.\nYou said you are up to date on all the versions of WordPress and plugins, but the vulnerability may exist in the current version. In other words, no newer version with a fix has been released (yet).\nSometimes it doesn't help to update the software, because the newest version has introduced a new vulnerability that didn't exist before. Programmers add new code in every version, and security vulnerabilities are the result of mistakes made by software developers. New vulnerabilities occur regularly.\nWordPress itself is pretty well tested, that's why I suppose the vulnerability may be in a plugin or theme. I don't know which plugins you use.\nOr you may have added custom code that has the vulnerability, so there is no other person who will update it. It's up to you.\nWhat you have to do now is figure out which line of code, not data, is responsible for the vulnerability. If you don't have the skills to do this (basically a text search across many files to find a line of code similar to the one I showed above), then you need to employ someone to help you.\nOnce you find the line of code responsible, either fix it yourself, or if it's in a plugin you could just uninstall that plugin to remove the vulnerable code.\nIt sounds like your hosting company isn't going to help. They probably have very little resources to provide customer service in this case. Even if you fix the code, it sounds like it will be a struggle to get them to allow you to restore your website.\nYou may need to find a new hosting provider if your current one won't communicate or let you have access to your site.\nBut a different hosting provider won't be more secure, because the fault is not with the hosting provider. The fault is in the code you are using.\nIf you install the same code on the current provider or another provider without fixing it, the code will still be vulnerable to hacks. If you upload code you know is vulnerable, then it'll be your fault.\n",
        "Source": "https://stackoverflow.com/questions/77602811/wordpress-sql-injection"
    },
    {
        "Title": "Protects dplyr against SQL injections?",
        "Question": "I would like to use R-Shiny to develop a web app that accesses an SQL database with sensitive data.\nSo far I have written the database query as a pure SQL string.\nHowever, this approach is very susceptible to SQL injections.\nMy intention is therefore to write the database query with dplyr, as the query is written in R and not in pure SQL.\nUnfortunately, I have not yet been able to find any more detailed information or an estimate on this topic online. Therefore I would like to clarify my request in this question.\nSo far I have only read a statement about the dbplyr::translate_sql() function that is supposed to protect SQL injections:\nhttps://dbplyr.tidyverse.org/articles/sql-translation.html#vectors\nAs my data is very confidential, dbplyr / dplyr should provide 100% protection against SQL injections.\nI would be very pleased to receive further information and assessments on this topic.\nUPDATE\nAs suggested in the comments, I have added an example for reproducibility:\n(adapted from: https://shiny.posit.co/r/articles/build/pool-dplyr/)\nlibrary(shiny)\nlibrary(DBI)\nlibrary(pool)\nlibrary(tidyverse)\nlibrary(dbplyr)\n\npool <- dbPool(\n  drv = RMySQL::MySQL(),\n  dbname = \"shinydemo\",\n  host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",\n  username = \"guest\",\n  password = \"guest\")\n\nui <- fluidPage(\n  textInput(\"ID\", \"Enter your ID:\", \"5\"),\n  tableOutput(\"tbl\"),\n  numericInput(\"nrows\", \"How many cities to show?\", 10),\n  plotOutput(\"popPlot\"))\n\nserver <- function(input, output, session) {\n  output$tbl <- renderTable({\n    pool %>% tbl(\"City\") %>%\n      filter(ID == !!input$ID)\n  })\n  output$popPlot <- renderPlot({\n    df <- pool %>% tbl(\"City\") %>%\n      head(as.integer(input$nrows)[1]) %>% collect()\n    pop <- df$Population\n    names(pop) <- df$Name\n    barplot(pop)\n  })\n}\n\nshinyApp(ui, server)\n\n",
        "Answer": "The threat of SQL injection depends on how the user-provided text is incorporated into the dynamic SQL query. So if you are trying to protect against injection, you need to assess each of the ways user input is used when querying the database.\nIn the example you have posted there are two pieces of user input:\n\ninput$nrows which is limited to numeric by the input widget\ninput$ID which is free text, and hence has greater risk of SQL injection.\n\nYou can use any of the approaches below to investigate each piece of user input. Overall, the approach I would choose is to Sanitise and then Review.\nThis answer focuses on the case where you are using dbplyr to translate from R to SQL. If other approaches are used to access the database (such as the DBI package) then a different approach will be required.\n\nOption 1) Review the SQL query that is generated\nConsider where input$ID is used in the example code:\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID)\n\nIn order to execute this, dbplyr will translate the dplyr commands from R into SQL. We can review this translation using the show_query command.\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID) %>%\n  show_query()\n\nThis will probably produce an SQL query similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value'\n\nYou do not need the entire Shiny app to test this for SQL injection. You can simply vary this query and see what happens. For example, try a simple alternative query:\nattempt_inject = 'my_id_value;SELECT 123'\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!attempt_inject) %>%\n  show_query()\n\nI suspect this will produce SQL similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value;SELECT 123'\n\nWhich would seem an effective prevention for SQL injection. But you will need to test this as thoroughly as required to ensure you are confident.\n\nOption 2) Review source code\nThe dbplyr package is open source and available online. You could review the source code to confirm how inputs are handled during translation.\nMy suspicion is that unless inputs are of type sql, then they will be escaped as either text or an SQL object.\nThere is an sql() function that converts input to type sql. One of its uses is to tell dbplyr not to translate the contents of the function but to use them as-is. This means that if your user can submit R objects as inputs then this is a significant area of vulnerability. However, this is unlikely to be the case as your app restricts users to submitting text and numeric input.\n\nOption 3) Sanitise your inputs before passing them to dbplyr\nR has several advantages over pure SQL, in that you can use R to validate users' input before including it in a dbplyr query.\nConsider this an an alternative to your output$tbl component of the app:\noutput$tbl <- renderTable({\n  current_ID = as.character(input$ID)\n  acceptable_ids = pool %>%\n    tbl(\"City\") %>%\n    select(ID) %>%\n    distinct() %>%\n    collect() %>%\n    pull()\n  req(current_ID %in% acceptable_ids)\n\n  pool %>%\n    tbl(\"City\") %>%\n    filter(ID == !!current_ID)\n})\n\nThis approach enforces that the user input is converted to type character and is a value found in the ID column, before passing the user input through to dbplyr.\nThe exact choice of checks will depend on how user input is used. I often include a check that user input does not contain special characters (such as ;{}[]* or spaces).\ndbplyr includes commands to delimit certain inputs. Investigate and use these commands where applicable.\nNotes\n\nreq is a Shiny command that stops execution of a component if the condition is not met. You can use stopifnot outside a Shiny context.\nFetching the list of acceptable ids within the renderTable statement is not efficient app design. This should be calculated once and reused multiple times.\n\n",
        "Source": "https://stackoverflow.com/questions/77598340/protects-dplyr-against-sql-injections"
    },
    {
        "Title": "Interfacing with &quot;API&quot; that only takes raw SQL: Node / pSQL sanitization without prepared statements or parameterization?",
        "Question": "I am working with an \"API\" provided by a client's ERP. They do not have actual endpoints, rather a REST endpoint that you can send raw sql queries to, that they then execute. To make matters even worse, they only recently upgraded to https.\nI am writing some Node cloud functions to interface with this system. There will be two roles working with this product, and I need to prevent the role with less permissions to fire unwanted queries in the application when they are searching with specific parameters.\nFor filtering, I can just check if the values are in an array of allowed terms, but with a search I am not quite sure how to approach this. My general opinion has always been to use parameterized statements, but that is not an option here as I can't actually establish a connection to their database. I also saw some posts where people suggested wrapping the strings in dollar signs since the underlying DB is PostgreSQL, but I could not find anything in the documentation for this purpose.\nI was also thinking about only allowing alpha-numeric characters, but this seems like a potentially weak approach. If anyone knows of any libraries or ideas for dealing with this situation, I would greatly appreciate it.\nI tried looking for a Node library or piece of documentation that could help this situation, but I could not find anything relevant.\n",
        "Answer": "I found this interesting post around the question: https://security.stackexchange.com/questions/172297/sanitizing-input-for-parameterized-queries.\nTo summarize it, doing data sanitization(more like general validation) is always good idea but it will not necessarily guarantee that query will be safe. Directly running queries without parameterized statements will be still quite a big risk even if you find some great library for cleaning data to make it SQL safe.\nInstead try to think of ways to not run user input directly. Add some kind of mapper in between which will accept some filter codes and translate it into SQL values. For example if I had delivery company and wanted to filter all deliveries with status delivered, I would use mapping like this:\nconst status_code = \"DELIVERED\"\nconst statusMapper = {DELIVERED: \"delivered\"(value to filter in sql)}\n\nAnd if my mapper does not find the exact match, return error or empty result and don't run the query at all. If its search bar, try to identify most frequent search keywords and build mapper for that. Obviously it will not be too accurate, but still better than having risk of sql injection, especially if you work with sensitive and important data(I assume you work with company's internal data since you integrate with ERP).\n",
        "Source": "https://stackoverflow.com/questions/77516509/interfacing-with-api-that-only-takes-raw-sql-node-psql-sanitization-without"
    },
    {
        "Title": "Dremio SQL injection vulnerability",
        "Question": "I'd like to query an S3 storage containing parquet files through my Spring Java app with Dremio. These are dynamic queries with user given parameters.\nI use Apache Arrow SQl driver and simply run queries by a JdbcTemplate instantiated with a DataSource from the following properties:\n  driver-class-name: org.apache.arrow.driver.jdbc.ArrowFlightJdbcDriver\n  url: jdbc:arrow-flight-sql://localhost:32010/?useEncryption=false\n  username: user\n  password: pwd\n\nFor the sql string I use a String formatted with the user given value:\n\"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = '%s';\".formatted(userInput)\n\nIt works well but needless to say how big of an SQL injection opportunity it is. If I try to use a Prepared Statement:\nString sql = \"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = ?\"\njdbcTemplate.query(sql, ps -> ps.setString(1, userInput), rs -> {\n  //handling the result set\n});\n\nI get the following error:\ncfjd.org.apache.arrow.flight.FlightRuntimeException: Cannot convert RexNode to equivalent Dremio expression. RexNode Class: org.apache.calcite.rex.RexDynamicParam, RexNode Digest: ?0\n\nI'm finding ambiguous information on the web. The claim that Dremio doesn't support prepared statements could be found in some forums, but all of these comments are several years old*, moreover the official Dremio site has an article recommending the usage of prepared statements..\nAs far as I know Dremio uses ANSI SQL under the hood, which I believe supports prepared statements. Or does that depend on the database engine and not the dialect? Can anyone confirm that it is still not possible with Dremio? Then I'll stop pursuing it further.\nIf that's the case, I will escape the unsafe characters, use a dictionary for encoding and decoding user given characteres, etc.\nIf you have some other advices or experiences mitigating SQL injection without prepared statements though, I would appreciate them as well!\nThank you!\n*latest update I found: https://community.dremio.com/t/sql-parameterization-support/1733/5\n",
        "Answer": "I'll post my findings as an answer, maybe it could be useful for someone in the same boat:\nIn lack of any other ideas I went down the encode/decode road.\nFor that the initial idea was to use an own dictionary, but I figured that hexadecimal encoding should be sufficient enough.\nLuckily Dremio SQL has a FROM_HEX function, which can return a BINARY value for the given hexadecimal string.\nWith that I can (so far..) safely build dynamic queries with any kind of user given input turned into HEX strings and then converting back at execution time, with the function behaving kind of like a wrapper.\nStill, this isn't a perfectly calming solution, but as far as I can see, there isn't really a better option at the moment. I heard Dremio will implement prepared statements (quite a shock that they haven't already), until then, let's hope for the best!\n",
        "Source": "https://stackoverflow.com/questions/77501615/dremio-sql-injection-vulnerability"
    },
    {
        "Title": "SQL Injection in Stored Procedures via MySQL Connector",
        "Question": "I use the mysql-connector-python driver for executing database operations. Recently, I came across stored procedures in MySQL and decided to migrate some of my APIs from utilizing cursor.execute() to cursor.callproc(proc_name, args=()). This transition has proven successful, and everything works seamlessly. However, I'm uncertain about the vulnerability of these stored procedures to SQL injection.\nTo assess this, I created a test stored procedure and examined its susceptibility to SQL injection payloads.\nStored Procedure:\nDELIMITER //\nCREATE PROCEDURE TestProcedure(IN arg_test VARCHAR(150))\n  BEGIN\n    IF EXISTS (SELECT 1 FROM Random_Table WHERE test = arg_test) THEN\n        SELECT 'success' AS message;\n    ELSE\n        SELECT 'failed' AS message;\n    END IF;\n  END //\nDELIMITER ;\n\nPayloads:\n\n' or 1=1 -- \n\" or 1=1 -- \n\nSurprisingly, none of these payloads yielded any successful results. Seeking further assurance, I consulted one of the database administrators in the company. Although he expressed uncertainty, he suggested that these stored procedures function similarly to prepared statements. This aligns with my observation that the cursor.callproc() method accepts user inputs as arguments via the args parameter, resembling prepared statements.\nIf this interpretation is accurate, it implies that using the cursor.callproc() method ensures a secure backend, free from SQL injection concerns. Despite these positive indications, I would like to seek additional confirmation here to guarantee the safety of this approach.\n",
        "Answer": "Like it often happens, the problem is in the terminology. And it creates a lot of trouble (and vulnerabilities). A programmer should be always strict in their definitions.\nWhat you are talking about here is using stored procedure's parameter. Such a parameter is a special case related to stored procedures, and very similar in nature to SQL variables.\nIn this case your database doesn't add the contents of arg_test into the SQL body (as it would have been in python if you did something like + arg_test +) and then evaluate the resulting SQL. On the contrary, is uses arg_test as though it's a variable (in this sense, it's indeed similar to prepared statements, but technically it's entirely different matters).\nWhile speaking of stored procedures, they are irrelevant to injections. By itself, just using a procedure doesn't guarantee anything. One can write a procedure which is immune to injection, and write another which is prone to injection. Just like any other code.\nBut as long as you are just using a parameter passed to the procedure - it's safe.\n",
        "Source": "https://stackoverflow.com/questions/77500796/sql-injection-in-stored-procedures-via-mysql-connector"
    },
    {
        "Title": "Protection query against SQL injection, using PDO",
        "Question": "may I ask you how to make this protected against sql injection?\nI have\n$podminkazeme = \"\";\n$podminkakraj = \"\";\n\nif ( isset( $_GET[ \"zeme\" ] )and !empty( $_GET[ \"zeme\" ] ) ) {\n   $podminkazeme = \"and nb.zemehledani in (\" . str_replace( '%2C', ',',  $_GET[ \"zeme\" ] ) . \")\";\n};\n\nif ( isset( $_GET[ \"kraj\" ] )and !empty( $_GET[ \"kraj\" ] ) ) {\n  $podminkakraj = \"and nb.krajhledani in (\" . str_replace( '%2C', ',', $_GET[ \"kraj\" ]  ) . \")\";\n};\n\n$conn = new PDO( DB_DSN, DB_USERNAME, DB_PASSWORD );\n$sqljednotkaa = \"\n  select nb.*, \n    dv.nazev as developer, \n    UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, \n    UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, \n    uz.nazev as skladUpravil, \n    uzm.nazev as makler, \n    tp.nazev as typProdeje, \n    dal.nazev as nazevdalnice\n  from nabidka nb \n  left join uzivatele uz on uz.id=nb.skladUpravil \n  left join uzivatele uzm on uzm.id=nb.makler \n  left join typProdeje tp on tp.id=nb.typProdeje \n  left join developer dv on dv.id=nb.developer\n  left join dalnice dal on dal.id=nb.dalnice \n  where nb.emptyid is null \n    $podminkaid \n    $podminkastav \n    $podminkaupraveno \n    $podminkavelikost \n    $podminkacena \n    $podminkamakler \n    $podminkaexport \n    $podminkatypprodeje \n    $podminkatypnemovitosti \n    $podminkazeme \n    $podminkadalnice \n    $podminkakraj \n    $podminkaokres \n    $podminkadeveloper \n    $podminkatechnickeparametry \n    $podminkahledanislovo \n  order by nb.emptyid asc $razenipodminka\";\n\n$stjednotkaa = $conn->prepare( $sqljednotkaa );\n$stjednotkaa->execute();\n\n",
        "Answer": "Try this\n$conditions = [];\n$parameters = [];\n\nif (isset($_GET[\"zeme\"]) && !empty($_GET[\"zeme\"])) {\n    $zemeValues = explode(',', $_GET[\"zeme\"]);\n    $conditions[] = \"nb.zemehledani IN (\" . implode(', ', array_fill(0, count($zemeValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $zemeValues);\n}\n\nif (isset($_GET[\"kraj\"]) && !empty($_GET[\"kraj\"])) {\n    $krajValues = explode(',', $_GET[\"kraj\"]);\n    $conditions[] = \"nb.krajhledani IN (\" . implode(', ', array_fill(0, count($krajValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $krajValues);\n}\n\n$conn = new PDO(DB_DSN, DB_USERNAME, DB_PASSWORD);\n$sqljednotkaa = \"SELECT nb.*, dv.nazev as developer, UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, uz.nazev as skladUpravil, uzm.nazev as makler, tp.nazev as typProdeje, dal.nazev as nazevdalnice from nabidka nb left join uzivatele uz on uz.id=nb.skladUpravil left join uzivatele uzm on uzm.id=nb.makler left join typProdeje tp on tp.id=nb.typProdeje left join developer dv on dv.id=nb.developer left join dalnice dal on dal.id=nb.dalnice where nb.emptyid is null\";\nif ($conditions) {\n    $sqljednotkaa .= \" AND \" . implode(\" AND \", $conditions);\n}\n$sqljednotkaa .= \" ORDER BY nb.emptyid ASC $razenipodminka\";\n$stjednotkaa = $conn->prepare($sqljednotkaa);\n$stjednotkaa->execute($parameters);\n\n",
        "Source": "https://stackoverflow.com/questions/77416426/protection-query-against-sql-injection-using-pdo"
    },
    {
        "Title": "Enforcing row-level security in a shared postgres pool",
        "Question": "I'm working on a typical client-server webapp. It is using a system somewhat like GraphQL where the client has some flexibility in specifying what data it needs, without custom API endpoints for every type of data. The server is running node, and is using node-postgres with a typical pg.Pool. A client could send something like this:\n{select: '*', from: 'expenses', where: {'op': 'gt', 'lhs': 'expenses.amount', 'rhs': 20}}\n\nwhich would be translated to SELECT * FROM expenses WHERE expenses.amount > $1 (given $1 = 20). With enough care, this system can be made safe from injection attacks.\nI'd also like to incorporate row-level security policies. For example:\ncreate policy only_see_own_expenses on expenses using (expenses.user_id = <USER ID>);\n\nAs an extra security barrier, I want to make sure that even if an injection attack is succesful, a client can not \"unset\" its user ID.\nI've seen <USER ID> been defined in a few ways:\n\ncurrent_user, in which case every user of the app also needs a postgres user/role\nAn arbitrary setting like current_setting('myapp.user_id') in combination with a SET LOCAL myapp.user_id = ... at the start of a transaction\n\nApproach (2) seems most flexible to me. I'd just wrap every generated SQL query in a BEGIN; SET LOCAL myapp.user_id = 123; {generated query}; END;. The problem is that an attacker could inject another SET LOCAL statement, and impersonate another user.\nIn approach (1) you can similarly wrap every generated query with a SET ROLE ... statement at the start, yielding the same problem. An alternative is to create a new connection for each query with that specific role. I believe postgres would never allow that connection to switch to another role. But setting up a new connection per query would result in a lot of overhead.\nHow do I enforce row-level security without the performance hit of a new connection per query?\n",
        "Answer": "As you observe, setting a placeholder parameter and using SET LOCAL ROLE to temporarily assume a different role can be subverted by attackers who can execute arbitrary SQL, like in an SQL injection attack.\nI don't think that there is a way to accomplish what you want that is safe from SQL injection. The problem is a fundamental one: you handle authentication in the application, not in the database (where you are using a single application user to benefit from connection pooling), but you want to have the database handle authorization via row-level security. That requires a way for the application to tell the database what the application user is. Now the only way that the application can tell the database anything is by using SQL, and an attacker who can run arbitrary SQL statements can always subvert that.\nI think that the only option for you is to harden your application against SQL injection attacks.\n",
        "Source": "https://stackoverflow.com/questions/77272972/enforcing-row-level-security-in-a-shared-postgres-pool"
    },
    {
        "Title": "SQL Injection - Python - MySQL",
        "Question": "Basically,\nI'm trying to find ways to explore SQL Injection vulnerabilities in  the code presented below. The code has another layer, presentation, where it asks the user for board_name input.\nTable_name is an inside variable, user doesn't have control over it.\n    def find_board_by_name(cls, connector, board_name, table_name: str):\n        query = \"SELECT * FROM {} WHERE name = '{}'\".format(table_name,board_name.title())\n        print(query)\n        try:\n            connector.mycursor.execute(query)\n            res = connector.mycursor.fetchone()\n            if res:\n                return res[1]\n            return None\n        except Exception as e:\n            raise e\n        \n\nTried to :\n1- board_name as:          ' OR '1'='1\nIt worked, program returned to me me first item on the table (it wasn't supposed to, since I didn't provide any name)\n2- Tried to put board_name as:          ';Delete Table BoardGames;\nIt didn't work, mysql.connector.errors.InterfaceError: Use multi=True when executing multiple statements was presented to me.\nSo my question is \" mysql.connector\" is protecting me against the majorities of the SQL Injections? Since I didn't set the \"multi\" tag in the code to True?  Could you show me other ways to explore vulnerabilities in this code? Besides the 1 and 2.\nI guess I know how to fix the SQL Injection problem: \"connector.mycursor.execute(query, values)\" probably will do the job.  But, I'm trying to understand better what kind of SQL Vulnerabilities I would have with this original code without this fix.\n",
        "Answer": "SQL injection isn't always malicious. It could result in a simple error instead of deleting all the student records.\nFor example, if some legitimate user of your site is named \"O'Reilly\" then your code formatting would have an imbalanced quote, which would be a syntax error:\nSELECT * FROM tablename WHERE name = 'O'Reilly'\n                                       ^ wtf\n\nUsing parameters avoids this kind of problem. Query parameters aren't just a quick way of interpolating variables. They either escape special characters in the dynamic content (by default Python does this), or else full-blown parameters keep the values separate from the SQL query until after it has been parsed by the SQL server. So no special characters can ever cause a syntax error.\nBut table names and other identifiers cannot be parameters. You can use parameters only in place of SQL values, like your quoted string in your example.\nYou said the user is not in control of the table name variable. That's great, but not sufficient.\nWhat if another programmer on your project isn't careful when calling your find_board_by_name() function, and inadvertently passes unsafe content as the table name? Note that unsafe content is more than just user input.\nWhat if the table name is a reserved keyword in SQL?\nSELECT * FROM order WHERE name = ?\n              ^ syntax error\n\nWhat if the table name contains whitespace or punctuation? There are other risks.\nYou should code your function so it does not trust its caller. For SQL values, do use parameters of course. For other dynamic elements like table names, you do have to interpolate variables into the SQL string, but you can be defensive:\n\nUse an allowlist to verify the table name is a legitimate known table name.\n\nDelimit the table name in back-ticks in your SQL, just in case it's a reserved word or not a simple identifier.\nlegit_table_names = Set(['table1', 'table2', 'table3'])\nif table_name not in legit_table_names:\n  return error # pseudocode\n\nquery = f\"SELECT * FROM {table_name} WHERE name = %s\"\n\n\n\n(I prefer f-strings instead of format() in modern Python)\n",
        "Source": "https://stackoverflow.com/questions/77167563/sql-injection-python-mysql"
    },
    {
        "Title": "PHP Code Functioning as Intended but UNION Injection Payload Doesn&#39;t Work",
        "Question": "I am attempting to make a web application (LAMP stack - MySQL version: 8.0.36-0ubuntu0.22.04.1) that is vulnerable to a SQL UNION Injection attack (or some type of SQL injection attack). The code takes the user's input via POST parameters to get the VIN & mileage.\nThe following PHP Code handles the backend to adding the parameters to the database:\n// If SESSION variables are set then proceed to Mileage.php\n    if (isset($_SESSION['username'])) {\n        // PHP Code for Handling ADDING CAR\n        // Declare Variables\n        $username = $_SESSION['username'];\n        $vin = $_POST['vehicle'];\n        $mileage = $_POST['mileage'];\n\n        // Implement Try-catch for Error Hanlding\n        try {\n            // Add Mileage\n            if(isset($_POST['add_data'])) {\n                $query = \"INSERT INTO mileage_master.mileages (`username`, `VIN`, `mileage`) VALUES ('$username', '$vin', '$mileage')\";\n                $query_result = mysqli_query($db,$query);\n    \n            // Update Mileage\n            } elseif(isset($_POST['update_data'])) {\n                // Query to update associated VIN's Mileage\n                $update = \"UPDATE mileage_master.mileages SET mileage='$mileage' WHERE username='$username' AND VIN='$vin'\";\n                $update_result = mysqli_query($db,$update);\n            // Remove Mileage\n            } elseif(isset($_POST['remove_data'])) {\n                // Query to Remove VIN & Mileage\n                $remove = \"DELETE FROM mileage_master.mileages WHERE username='$username' AND VIN='$vin'\";\n                $remove_result = mysqli_query($db,$remove);\n            }\n        }\n        catch (mysqli_sql_exception $e) {\n            $showAlert = true;\n            // Display Syntax Error\n            $errorMessage = \"My SQL Error: \" . $e->getMessage();\n            // Display Query (Intentional Unsafe Coding Practices)\n            $errorMessage .= \"\\t||\\tQuery: \" . $sql;\n        }\n\n        \n    }    \n    else {\n        header(\"Location: /\");\n    }\n?>\n\nThe following PHP code prints the VIN & mileage to user's page:\n<?php\n    // Query to get all VINs associated with username\n    $result = mysqli_query($db,\"SELECT * FROM mileages WHERE username='$username'\");\n\n    echo \"<table style='margin-top: 35px;'>\";\n    echo \"<tr><th>VIN</th>\";\n    echo \"<th>Mileage</th></tr>\";\n\n    // While Loop to iterate through all returned rows\n    while($row = mysqli_fetch_assoc($result)) {\n        echo \"<tr style='text-align: center;'>\";\n        // VIN\n        echo \"<td>\" . $row['VIN'] . \"</td>\";\n        // Mileage\n        echo \"<td>\" . $row['mileage'] . \"</td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n?>\n\nMy thought process was that because the application uses dynamic queries an attacker could include some type of UNION SELECT statement. The UNION select statement's output would be stored within the VIN column for that query.\nHowever, I am unable to create a successful SQL Injection payload that would accomplish this.\nQuestion\nDo I need to change the logic of my application to make the exploit possible or is my idea not exploitable in the first place?\n",
        "Answer": "You can't get SQL injection in the SELECT query, since the user doesn't have control over the $username variable, and that's the only thing you substitute. But you can do it in the INSERT query, to insert extra rows in the table with arbitrary values.\nIt needs to terminate the current value list, then it can use a subquery in another value list, and finally it has to provide the beginning to match the end of the original value list.\n$vin = \"12345', '20'), ('baduser', (SELECT '67890'), (SELECT '30')), ('baduser2', '1111\";\n\nThis will put a bogus VIN and mileage into the row for $username, then insert additional rows for baduser and baduser2. baduser2 will get another bogus VIN and the mileage from the parameter.\nbaduser can use subqueries to get its VIN and mileage values, as long as the subqueries each only return one row and column. I used literals in the above example, but you can make them arbitrarily complex.\n",
        "Source": "https://stackoverflow.com/questions/78093937/php-code-functioning-as-intended-but-union-injection-payload-doesnt-work"
    },
    {
        "Title": "How to fix SQL injection if we have to use DB name dynamically in SQL Server?",
        "Question": "This is the implementation in code: the schema name comes from a configuration file and is different for each environment. Sonar throws SQL injection alert at this statement:\nselect * \nfrom dbName.dbo.stu_name;     <<dbname is the variable that comes from property file>>\n\nI tried these solutions:\n\nUsing query.setParameter(?,dbname). Tried passing dbname dynamically and vulnerability was fixed. When debugging, the query was throwing an error and did not execute.\n\nUsed String.format(select * from \\'%s\\',tablename.replace(\"\\'\",\"\\'\\'\")) - vulnerability fixed, but query failed to execute\n\n\nI tried various other solutions and nothing worked.\nCan anyone please help me with this?\n",
        "Answer": "The \"best\" defence you can do is not use dynamic SQL. Considering that this is the database that's dynamic, and based on a prior question, I would suggest that this is occurring from an application, so that means you don't need 3-part naming. Instead you parametrise the database name in the connection string and use 2-part naming; no dynamic SQL needed.\nIf you must use dynamic SQL, then the \"best\u2122\ufe0f\" defence would be to validate the database name, and then ensure you properly quote the database name when you inject it into your dynamic statement.\nHere I validate the database name in sys.databases and then use QUOTENAME to quote the name appropriately. If the database doesn't exist, no query is run (and no error is returned):\nDECLARE @DatabaseName sysname = N'YourDatabaseName';\n\nDECLARE @SQL nvarchar(MAX);\nSELECT @SQL = N'SELECT * FROM ' + QUOTENAME(d.name) + N'.dbo.stu_name;'\nFROM sys.databases d\nWHERE d.name = @DatabaseName;\n\nEXEC sys.sp_executesql @SQL;\n\n",
        "Source": "https://stackoverflow.com/questions/78027431/how-to-fix-sql-injection-if-we-have-to-use-db-name-dynamically-in-sql-server"
    },
    {
        "Title": "How to reduce vulnerability to cyber attacks from injection?",
        "Question": "I have very little knowledge about SQL injection, and there are probably other threats I am unaware of out there for stealing company data, how would I make this python code better in regards to security?\nmerge_query = \"\"\"\nMERGE INTO sql_table_name AS Target\nUSING (\n    VALUES {}\n) AS Source (transaction_year, month_num, month_name, price_nt)\nON Target.transaction_year = Source.transaction_year \nAND Target.month_num = Source.month_num\nWHEN MATCHED AND (Target.month_name != Source.month_name OR Target.price_nt != Source.price_nt) THEN\n    UPDATE SET Target.month_name = Source.month_name, Target.price_nt = Source.price_nt\nWHEN NOT MATCHED THEN\n    INSERT (transaction_year, month_num, month_name, price_nt) VALUES (Source.transaction_year, Source.month_num, Source.month_name, Source.price_nt);\n\"\"\".format(','.join(['(?,?,?,?)' for _ in range(len(data))]))\n\nparams = [item for sublist in data for item in sublist]\n\ntry:\n    obj_crsr.execute(merge_query, params)\n\nexcept Exception as e:\n    obj_crsr.rollback()\n    print(e)\n    print(\"Transaction rolled back\")\n\nelse:\n    obj_cnxn.commit()\n    obj_crsr.close()\n    obj_cnxn.close()\n\nThis python code is given data in the following format:\n[(2023, M12,    December,   541.44),\n(2023,  M11,    November,   486.64),\n(2023,  M10,    October,    468.23),\n(2023,  M09,    September,  478.80),\n(2023,  M08,    August,     475.41)]\n\nAnd then is converted to a list in the params variable.  That data looks like this:\n['2023', 'M12', 'December', '541.442', '2023', 'M11', 'November', '486.639', '2023', 'M10', 'October', '468.226', '2023', 'M09', 'September', '478.802', '2023', 'M08', 'August', '475.411']\n\nThis is the only method I have found to work when trying to merge data into an existing table using PYODBC.  I have heard of parameterizing the query or naming sql variables, but I don't know how to adapt existing examples/solution on stack overflow to my specific use case.  Any suggestions are appreciated.\n",
        "Answer": "There is nothing wrong with your existing code as far as injection is concerned.\nInjection only happens when user data is injected directly into the query. Here, that is not happening. What is happening is that a dynamic list of ? parameter markers are being injected, in a well-defined way (once per row), and the actual values are passed as a dynamic list of parameters. There is absolutely no scope for injection here.\nBe aware of a few points though:\n\nUsing such code does tend to focus minds on \"oh just inject the data\". Might be worth putting in a comment such as only paramaters are injected here.\nIf there are no rows at all to insert then you get invalid code ( VALUES ), so you should check for that.\nDynamic numbers of parameters mean you get a recompile for every possible variation of parameters. This is not as many as would be had if you actually injected the data, but still a concern.\nA Table-Valued Parameter or a bulk insert into a temp table are therefore both better options than any of this, but neither are supported by pyodbc. fast_executemany or to_sql might be options, or BULK INSERT from an external file.\nThe maximum number of parameters is 2100, you will hit performance issues well before that though.\n\n",
        "Source": "https://stackoverflow.com/questions/77996154/how-to-reduce-vulnerability-to-cyber-attacks-from-injection"
    },
    {
        "Title": "Is using Hibernate&#39;s Restrictions.eq() method safe against SQL injection?",
        "Question": "Is using Hibernate's Restrictions.eq() method, as used in the example below, safe against SQL injection? Or similar methods like Restrictions.in(), Restrictions.ge(), ...\nString vulnerable = //parameter from user interface \nCriteria ct = this.getCriteria();\nct.add(Restrictions.eq(\"propertyName\", vulnerable));\n\nI have found that probably is, as explained in this answer\nbut reviewing OWASP documentation, there is an example that shows a comment which confuses me (// This should REALLY be validated too). Is needed to validate the input, or is secure as is?\nThe example in the OWASP documentation\n// Criteria API\n// This should REALLY be validated too\nString userSuppliedParameter = request.getParameter(\"Product-Description\");\n// Perform input validation to detect attacks\nInventory inv = (Inventory) session.createCriteria(Inventory.class).add\n(Restrictions.eq(\"productDescription\", userSuppliedParameter)).uniqueResult();\n\n",
        "Answer": "Yes, Hibernate's Criteria API would protect you against SQL Injection, as it parameterises the query - you can see this in action by enabling sql logging.\nWhat you do need to be careful about is concatenating user inputs etc. I think the documentation may perhaps be referring to validate the user input at both client and server side.\n",
        "Source": "https://stackoverflow.com/questions/77993970/is-using-hibernates-restrictions-eq-method-safe-against-sql-injection"
    },
    {
        "Title": "Operand type clash: int is incompatible with date in sql",
        "Question": "i using am writing a insert statement but getting above error\nInsert query\nvar insertSql = string.Format(\n                $\"INSERT INTO Sales (Date, Team, Sales) VALUES ({0}, {1}, {2})\",\n                new List<SqlParameter>()\n                {\n                    new(\"@date\", sales.Date.ToString(\"yyyy-MM-dd\")),\n                    new(\"@team\", sales.Team),\n                    new(\"@sales\", sales.Sales),\n                });\n            var rowCount = Sql.ExecuteNonQuery(Conn,insertSql);\n\nhere is my table schema and class\nSaleId int,\nDate Date,\nTeam varchar(50),\nSales int\n\npublic class Sales\n{\n    public int SalesId { get; set; }\n    public DateTime Date { get; set; }\n    public string Team { get; set; }\n    public int Sales { get; set; }\n}\n\nI want to use parameterized query to achive this so tried this but giving above error\n",
        "Answer": "The immediate problem here is that $\"...\" is itself an interpolated string, and the values you are injecting are the literal 0, 1, and 2 - they're not placeholders: they're the values. Removing the $ would make it a literal string suitable for string.Format, but you don't want to use string.Format here; also, you don't want to format the date - just pass it as a date.\nHonestly: if you're writing the SQL yourself, I'm not sure EF is even needed here; with Dapper this would be simply:\nconn.Execute(\"INSERT INTO Sales (Date, Team, Sales) Values (@Date, @Team, @Sales)\",\n    sales);\n\nor with a trick for better SQL formatting:\nconn.Execute(\"\"\"\n    INSERT INTO Sales (Date, Team, Sales)\n    Values (@Date, @Team, @Sales)\n    \"\"\", sales);\n\nDapper will deal with finding sales.Date, sales.Team and sales.Sales, and add them correctly. EF may also have an API for doing ad-hoc queries like this, but... this feels more like a Dapper scenario, unless you're emotionally invested in EF.\n",
        "Source": "https://stackoverflow.com/questions/77926016/operand-type-clash-int-is-incompatible-with-date-in-sql"
    },
    {
        "Title": "How to limit memory usage with PDO in MariaDB : Fatal error: Allowed memory size of 67108864 bytes exhausted",
        "Question": "I am changing my SQL request to PDO in order to integrate more security against SQL injecting.  I was using before procedural msqli and everything was working ok.  Now I updated server to PHP 8.2 and I am using PDO and prepared statements.\nThe BD I am accessing is old MariaDB and has a table with 247 fields most of which are NULL on a single row. (It is sections for a description of mushrooms, but only some of each are really described in a single row (mushrooms)).\nMost of the 247 fields are set to mediumtext because they can content up to a couple paragraphs.\nMy connection script is :\ntry {\n\n    db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\nreturn;\n} \n\nWhen I select one row of that table in order to echo the not NULL descriptions column, as soon as I execute the statement I run into a full memory.  The error is at the stmt->execute() line, not even at the fetchAll line.\n$description = 'someTag';\n\n$sql = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n$stmt = $db->prepare($sql);\n$stmt->bindParam(':tag', $description, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n$result = $stmt->fetchAll();\n$stmt->closeCursor();\n\nThe error :\nFatal error: Allowed memory size of 67108864 bytes exhausted (tried to allocate 262144 bytes) in /home/mycoqueb/public_html/nou.mycoquebec.org/scripts/bd-query.php on line (**the $stmt->execute() line)\n\nI tried to use :\nwhile ($row = $stmt->fetch()) {\n\nInstead of fetchAll() but it changed noting, I used it on every other request from the same page and it changed noting.  I flushed variables that were no more useful to NULL on the rest of the page and it changed nothing.  I even isolated the script on an empty page and it exceeds the memory limit.\nI tried to add this to my connection script and it changed nothing :\ndb->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\nI tried to select only one field instead of * and this worked, but I don't have an easy way to find NOT NULL columns in the table for a specific tag (row).\nI tried to find a SQL statement to restrict my SELECT to NOT NULL columns but I was not successful.\nI know I could get add memory_limit = 256M to the phpini file, but that is not what I want since the website has a high usage and for now its on a multihosted server.\nThe best solution would be to reengineer the MariaDB database using a table with description sections labels and linking only used sections to the main description table for each row, but I have limited access to the db since it is online with the old website and the old website needs to stay online and up to date for 1-2 years after new deployment. I though of creating a daily cron job to do that but I would like to avoid for the moment.\nAny Idea how I can get this to work?  It was working fine using msqli on php 8.1.\nTo answer the worries of contributors that think it's related to another part of the page code, here is the complete code of the isolated test page.\nfunction convert($size)\n {\n    $unit=array('b','kb','mb','gb','tb','pb');\n    return @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];\n }\n\n\n$servername = \"localhost\";\n$username = \"myUser\";\n$password = \"myPass\";\n$dbname = \"myDB\";\n\n\ntry {\n\n    $db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    //$db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\n } catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\n    return;\n}   \n\n$query = (array_key_exists(\"query\",$_REQUEST) ? $_REQUEST[\"query\"] : \"\");\n\n\nif($query != \"\"){\n\n    $tag_desc = 'Aegerita candida';\n    // Code works if I limit to \"SELECT Titre FROM description WHERE tag = :tag LIMIT 1\";\n    $sql_description = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n    $stmt = $db->prepare($sql_description);\n    $stmt->bindParam(':tag', $tag_desc, PDO::PARAM_STR);\n    \n    echo convert(memory_get_usage(true));  // returns 2mb\n    $stmt->execute();\n    $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n    \n    $i = 0;\n    \n    while ($row = $stmt->fetch()) {\n\n        if($i == 0) {\n\n            ?><table style=\"border-collapse:collapse;border: 0;table-layout: fixed;color: #063850;background-color: #DDDDDD;text-align: left\"><thead><tr style=\"border: 2px solid #063850;\"> <?php\n            foreach (array_keys($row) as $key) {\n                //print_r($key);\n                echo (\"<th style='padding:5px;border: 2px solid #063850;position:sticky;top: -2;z-index:10;background-color:#e5a045'>$key</th>\");\n            }\n            echo (\"</tr></thead>\");\n        }\n\n        $i++;\n\n        echo (\"<tr style='border: 2px solid #063850'>\");\n        foreach ($row as $value) {\n            echo (\"<td style='padding:2px;border: 2px solid #063850'>$value</td>\");\n            // <img src=\\\"$value\\\" height=\\\"400\\\" >\n        }\n        echo (\"</tr>\");\n    }\n    \n    if ($i > 0) {\n        echo (\"</table>\");\n        echo ('<div style=\"margin-top:400px\">&nbsp;</div>');\n    } else {\n        echo \"Aucun r\u00e9sultat\";\n    }\n\n}\n\n$db = null;\n\nHas mentioned it automatically work if I limit my sql to a couple fields.\nThe error is still on the stmt->execute() line.\n",
        "Answer": "Could it be that the issue is your data model?\nIf you have a table that has a lot of nulls, then the data is most likely not normalized.\nInstead of having 256 columns in your table, maybe just have the ones that are always there, and then relate it to a separate table with three fields: foreign key to the main table, a tag field and a value field.\nIf you are rewriting your application to USE PDO anyway, some long-term considerations could be included.\nExample table\nLayout like yours (all data in one table):\n\n\n\n\nid\nname\nemail\nsomeotherdata\ntag1\ntag2\ntag3\ntag4\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\nNULL\na\nNULL\n100\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\nc\na\nNULL\n400\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\nNULL\nNULL\n5000\nNULL\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\nNULL\na\nNULL\n100\n\n\n\nSuggested Tag-Value table layout\nMain Table\n\n\n\n\nid\nname\nemail\nsomeotherdata\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\n\n\n\n\nTag-Value Table\n\n\n\n\nid\ntag\nvalue\n\n\n\n\n1\ntag2\na\n\n\n1\ntag4\n100\n\n\n2\ntag1\nc\n\n\n2\ntag2\na\n\n\n2\ntag4\n400\n\n\n3\ntag3\n5000\n\n\n4\ntag2\na\n\n\n4\ntag4\n100\n\n\n\nUsage\nInstead of selecting just your row, you WILL need to either join the results together, or make two separate calls. I would suggest two calls, especially since you are rtunning into memory issues.\nSELECT \n  id, \n  name,\n  email,\n  someotherdata\nFROM\n  MainTable\nWHERE\n  id = 1;\n\n-- and then the tags\nSELECT \n  id, \n  tag,\n  value\nFROM\n  TagValueTable\nWHERE\n  id = 1; -- reference to the main table\n\n\n\nAdvantaages of this normalized approach\n\nLess bloat (not so many nulls)\nSimpler structures\nREST ready\nMore resilient\n\nAdd tags without changing the DDL of the database (ALTER)\n\n\nYou can still get the original layout by making subselects and transpositions in mysql\nYou can easily make statistics on the tags related to each other\n\nDisadvantages\n\nComplexity of the data model increases\nYou need to do a lot of extra SQL gymnastics to get EXACTLY what you had before\n\n",
        "Source": "https://stackoverflow.com/questions/77895050/how-to-limit-memory-usage-with-pdo-in-mariadb-fatal-error-allowed-memory-size"
    },
    {
        "Title": "PHP: Prepare JSON selector to Prevent MySQL Injection",
        "Question": "What is the best/proper way to prepare a dynamic MySQL JSON selector for queries, in order to prevent SQL injection? As an example, say I want to execute the following query:\nSELECT `key` ->> \"$.key.path\" AS `setting_value`\nFROM `settings`\nLIMIT 1\n\nBut I want to make the key path dynamic, e.g.:\n$sql = <<<SQL\n    SELECT `key` ->> \"{$path}\" AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nWith conditional values, I can structure the SQL for a prepared statement using PDO, e.g.:\n$sql = <<<SQL\n    SELECT *\n    FROM `settings`\n    WHERE `other_field` = :field_val\n    LIMIT 1\nSQL;\n\n$statement = $this->handle()->prepare($sql);\n$statement->execute([':field_val' => 'some val']);\n$records = $statement->fetchAll(PDO::FETCH_OBJ);\n\nAdding something like the following to my database adapter (or even to my helper functions) seems rather inelegant and prone to errors/issues:\n    public function cleanJsonSelector(string $selector) : string {\n        return preg_replace('/[^-\\$a-zA-Z0-9_\\[\\].*\\s]/', '', $selector);\n    }\n\nThoughts/help?\n",
        "Answer": "The -> and ->> operators only support string literals. They do not expressions, variables, or parameters.\nBut you can use any expression \u2014\u00a0including a parameter placeholder \u2014\u00a0in the equivalent JSON function JSON_EXTRACT().\nThe ->> operator is like JSON_UNQUOTE(JSON_EXTRACT(json_doc, path))\n$sql = <<<SQL\n    SELECT JSON_UNQUOTE(JSON_EXTRACT(`key`, :path)) AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nThis seems like an unnecessary inconsistency in the functionality of MySQL's JSON operators, but this is how it's implemented in the current MySQL version 8.3.\n\nFor what it's worth, it was requested to support expressions after the -> operator (and presumably also the ->> operator) here: https://bugs.mysql.com/bug.php?id=87360\nYou may want to log into the MySQL bug tracker site and click the \"Affects Me\" button to hopefully increase the priority of implementing that feature.\n\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => true (the default), then parameters are not true parameters, they are string-substitutions into the SQL query before it is parsed. So what looks like a parameterized query really uses a string literal as far as MySQL is concerned, and the ->> operator is successful.\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => false, then parameters placeholders are parsed by MySQL during the prepare step. Since parameters are not supported as the argument to the ->> operator, this will fail.\nMysqli only supports true parameters, so it will always fail.\n",
        "Source": "https://stackoverflow.com/questions/77892840/php-prepare-json-selector-to-prevent-mysql-injection"
    },
    {
        "Title": "SQL-Injection in duckdb-queries on pandas dataframes",
        "Question": "In a project I am working with duckdb to perform some queries on dataframes. For one of the queries, I have some user-input that I need to add to the query. That is why I am wondering if SQL-Injection is possible in this case. Is there a way a user could harm the application or the system through the input? And if so, how could I prevent this case? It seems that duckdb has no PreparedStatement for queries on dataframes.\nI already looked up in the documentation (https://duckdb.org/docs/api/python/overview.html) but couldn't find anything useful. The method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\nThere is another question on stackoverflow (Syntax for Duckdb > Python SQL with Parameter\\Variable) about this topic but the answer only works on real sql-connections and the version with f-strings seems insecure to me.\nHere is a small code sample to show what I mean:\nimport duckdb\nimport pandas as pd\n\ndf_data = pd.DataFrame({'id': [1, 2, 3, 4], 'student': ['student_a', 'student_a', 'student_b', 'student_c']})\n    \nuser_input = 3  # fetch some user_input here\n    \n# How to prevent sql-injection, if its even possible in this case?\nresult = duckdb.query(\"SELECT * FROM df_data WHERE id={}\".format(user_input))\n\nSo how would you approach this problem? Is sql-injection even possible? Thanks for your help and feel free to ask for more details, if you need some more information!\nEDIT: Fixed a syntax error in the code\n",
        "Answer": "\nThe method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\n\nIt seems it's possible:\n>>> duckdb.execute(\"\"\"SELECT * FROM df_data WHERE id=?\"\"\", (user_input,)).df()\n\n   id    student\n0   3  student_b\n\n",
        "Source": "https://stackoverflow.com/questions/77884985/sql-injection-in-duckdb-queries-on-pandas-dataframes"
    },
    {
        "Title": "SQL injection error in Modsecurity logs in Plesk",
        "Question": "I am receiving the following error for 1 of my wordpress site running on a Plesk server.\n[client 000.00.00.000] ModSecurity: Access denied with code 403 (phase\n 2). Pattern match \"[\\\\\\\\[\\\\\\\\]\\\\\\\\x22',()\\\\\\\\.]{10}$|\\\\\\\\b(?:union\n\\\\\\\\sall\\\\\\\\sselect\\\\\\\\s(?:(?:null|\\\\\\\\d+),?)+|order\\\\\\\\sby\n\\\\\\\\s\\\\\\\\d{1,4}|(?:and|or)\\\\\\\\s\\\\\\\\d{4}=\\\\\\\\d{4}|waitfor\\\\\\\\sdelay\\\\\\\\s'\n\\\\\\\\d+:\\\\\\\\d+:\\\\\\\\d+'|(?:select|and|or)\\\\\\\\s(?:(?:pg_)?sleep\\\\\\\\(\\\\\\\\d+\n\\\\\\\\)|\\\\\\\\d+\\\\\\\\s?=\\\\\\\\s?(?:dbms_pipe\\\\\\\\.receive_message\\\\\\\\ ...\" at \nREQUEST_COOKIES:sbjs_first. [file \"/etc/httpd/conf/modsecurity.d/rules\n/comodo_free/22_SQL_SQLi.conf\"] [line \"66\"] [id \"218500\"] [rev \"18\"] \n[msg \"COMODO WAF: SQLmap attack detected||website name|F|2\"] [data \n\"Matched Data: |||id=(none) found within REQUEST_COOKIES:sbjs_first: \ntyp=typein|||src=(direct)|||mdm=(none)|||cmp=(none)|||cnt=(none)|||trm=\n(none)|||id=(none)\"] [severity \"CRITICAL\"] [tag \"CWAF\"] [tag \"SQLi\"] \n[hostname \"website name\"] [uri \"/wp-login.php\"] [unique_id \"ZamB-\n8j9IfDbYiJgRoahGwAAAAM\"], referer:\n\nWhen I visited some pages on the frontend it gives this error:\nServer Error\n403\nForbidden\nYou do not have permission to access this document.\nThat's what you can do\nReload Page Back to Previous Page Home Page\nI wonder if this a real attack? or false positive\nI was able to export the site to local. It seems working ok there.\n",
        "Answer": "CRS dev-on-duty here. Even if you don't use CRS rules and this is a problem of COMODO WAF rules, I'll try to help. While searching for the cookie name sbjs_first, I found this GitHub issue here, which is an indication that this sourcebuster cookie looks legitimate. Maybe you'll even the solution to your problem in one of the comments in this issue.\nIf this isn't the solution, you may need to tune the rules. Maybe you can also use our (CRS) documentation on false positives and rule tuning.\n",
        "Source": "https://stackoverflow.com/questions/77842169/sql-injection-error-in-modsecurity-logs-in-plesk"
    },
    {
        "Title": "Oracle SP Checkmarx SAST scan showing Parameter Tampering",
        "Question": "SP accepts key and returns flag status. In Checkmarx SAST scan key, It is saying parameter not validated before being used in query. Please help to understand what validation can be added so that it passes the vulnerability test.\nCreate procedure sp_name (key varchar2, v_flag out number) as\nv_key varchar2(50);\nv_sql clob;\nBegin\nIf key is null then\nv_flag:=-1;\nElse\nv_key:=sys.dbms_assert.enquote_literal(upper(trim(key)));\nv_key:=replace(v_key,'''');\nv_sql:=q'[select flag from tbl where key=:1]';\nExecute immediate v_sql into v_flag using v_key;\nEnd if;\nException when no_data_found then\nv_flag:=-1;\nEnd;\n\nI tried bind variable and dbms_assert but still it shows code is vulnerable\n",
        "Answer": "Stop using EXECUTE IMMEDIATE when you do not need to (and trying to make it overly complicated) and use a simple SELECT ... INTO ... statement with the PL/SQL variable as the bind variable (and give the PL/SQL variable a different name to the table's column).\nThe procedure can be simplified to:\nCREATE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  SELECT flag\n  INTO   v_flag\n  FROM   tbl\n  WHERE  key=v_key;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nThen, if you have the sample data:\nCREATE TABLE tbl (key, flag) AS\n  SELECT 'A',  1 FROM DUAL UNION ALL\n  SELECT 'B',  2 FROM DUAL UNION ALL\n  SELECT 'C',  3 FROM DUAL UNION ALL\n  SELECT NULL, 4 FROM DUAL;\n\nThen:\nDECLARE\n  v_flag TBL.FLAG%TYPE;\nBEGIN\n  sp_name('A', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('B', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('C', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('D', v_flag);\n  DBMS_OUTPUT.PUT_LINE('D: ' || v_flag);\n  sp_name(NULL, v_flag);\n  DBMS_OUTPUT.PUT_LINE('NULL: ' || v_flag);\nEND;\n/\n\nOutputs:\n\nA: 1\nB: 2\nC: 3\nD: -1\nNULL: -1\n\n\nOr, if you want it slightly more complicated to avoid the SELECT if the key is NULL then:\nCREATE OR REPLACE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  IF v_key IS NULL THEN\n    v_flag := -1;\n  ELSE\n    SELECT flag\n    INTO   v_flag\n    FROM   tbl\n    WHERE  key=v_key;\n  END IF;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nfiddle\n",
        "Source": "https://stackoverflow.com/questions/77841440/oracle-sp-checkmarx-sast-scan-showing-parameter-tampering"
    },
    {
        "Title": "What is the correct syntax for dollar-parameters in PostgreSQL queries?",
        "Question": "I am struggling with the correct syntax for a dollar-parameter. It sometimes works, sometimes not.\nI am using the 'pg' package for NodeJS, but since AFAIK parsing the query happens on the server side, I don't expect this to matter.\nCode:\nconst client: PoolClient = ...;\nawait client.query('SELECT \\'foo\\' = $1', [projectId]);\nawait client.query('SET \"gvc.currentProjectId\" = $1', [projectId]);\n\nThe first query is obviously useless, but I added it to experiment with the syntax. An error occurs in the second query, so the first one seems to work. The second one fails with:\nunexpected exception error: syntax error at or near \"$1\"\n\nIs it even possible to use dollar-parameters in the value for SET? I want to secure my application against SQL injection attacks, so manually escaping the projectId is a last resort.\n",
        "Answer": "As explained in https://dba.stackexchange.com/a/333947, SET can indeed only take literal values, no parameters or query results. That post links to the set_config command, which does not have such a restriction.\nhttps://pgpedia.info/s/set_config.html\n\nNeither the post not the documentation explain why both exist, nor why SET cannot take parameters since set_config demonstrates that it is possible to do so.\nSimply using set_config over SET solves the problem.\n",
        "Source": "https://stackoverflow.com/questions/77839814/what-is-the-correct-syntax-for-dollar-parameters-in-postgresql-queries"
    },
    {
        "Title": "How do I write prepared statements in ballerina?",
        "Question": "Is there a way to write prepared statements for SQL in ballerina? or is it a good practice to use the following method for that?\nfunction selectUserQuery(string username) returns sql:ParameterizedQuery => `SELECT * FROM users WHERE user_name=${username}`;\n\n",
        "Answer": "In ballerina sql:ParamerterizedQuery works as a prepared statement. (this differs a little from other languages as ballerina mandates giving the variable order, when writing the statement itself)\nYes, using functions is the best practise to keep SQL statements in ballerina.\nFor the sake of completeness, I would like to quote the following from this article.\nConsider the below statement,\nsql:ParameterizedQuery selectQuery = `SELECT * FROM users WHERE user_name=${username}`;\nBallerina executes this query in multiple steps,\n\nTemplate the query:\nThe sql module will replace the insertions in the query using ?. (e.g. `SELECT * FROM users where user_name=?`) Here, all insertions in the query are considered to be user inputs.\n\nThe database compiles the query:\nThe database validates the templated SQL query for syntax and semantics (column availability, authorization) errors. Finally, the server parses the query.\n\nPlaceholder replacement:\nThe programme sends all the user data values to the database. The database will replace the placeholders at this point. However, since the query is pre-compiled, even if the database appends the values, the scope of the execution will not change. i.e. SQL Injection cannot turn a SELECT command into a DELETE.\n\nQuery execution.\n\n\n",
        "Source": "https://stackoverflow.com/questions/77763194/how-do-i-write-prepared-statements-in-ballerina"
    },
    {
        "Title": "Problem with identical metrics results after machine learning",
        "Question": "When trying machine learning on a dataset, I got the same results for metrics such as accuracy and F-score on different machine learning algorithms.\nI have a dataset on which I trained my chosen algorithms. I found it on the Kaggle website: source.\nHere are code snippets from the Jupiter file, and the results of their execution:\nList of connected libraries\nIN:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report\nimport joblib\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras import models, layers\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nLoading dataset\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\ndf.head(10)\n\nLoad, process and split the data for further training of the classification model\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\n\ndf = df[(df['attack_type'] == 'sqli') | (df['attack_type'] == 'norm')]\n\nX = df['payload']\ny = df['label']\n\nvectorizer = CountVectorizer(min_df = 2, max_df = 0.8, stop_words = stopwords.words('english'))\nX = vectorizer.fit_transform(X.values.astype('U')).toarray()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)\n\nOUT:\n(8040, 1585)\n(8040,)\n(2011, 1585)\n(2011,)\n\nNaive Bayes Classifier\nIN:\nnb_clf = GaussianNB()\nnb_clf.fit(X_train, y_train)\ny_pred = nb_clf.predict(X_test)\nprint(f\"Accuracy of Naive Bayes on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Naive Bayes on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of Naive Bayes on test set : 0.9806066633515664\nF1 Score of Naive Bayes on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       0.97      0.98      0.97       732\n        norm       0.99      0.98      0.98      1279\n\n    accuracy                           0.98      2011\n   macro avg       0.98      0.98      0.98      2011\nweighted avg       0.98      0.98      0.98      2011\n\nRandom forest algorithm:\nIN:\nrf_clf = RandomForestClassifier()\nrf_clf.fit(X_train, y_train)\ny_pred_rf = rf_clf.predict(X_test)\nprint(f\"Accuracy of Random Forest on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Random Forest on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred_rf))\n\nOUT:\nAccuracy of Random Forest on test set : 0.9806066633515664\nF1 Score of Random Forest on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.96      0.98       732\n        norm       0.98      1.00      0.99      1279\n\n    accuracy                           0.99      2011\n   macro avg       0.99      0.98      0.99      2011\nweighted avg       0.99      0.99      0.99      2011\n\nSupport vector machine\nIN:\nsvm_clf = SVC(gamma = 'auto')\nsvm_clf.fit(X_train, y_train)\ny_pred = svm_clf.predict(X_test)\nprint(f\"Accuracy of SVM on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of SVM on test set: {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of SVM on test set : 0.9189457981103928\nF1 Score of SVM on test set: 0.8658436213991769\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.76      0.87       689\n        norm       0.89      1.00      0.94      1322\n\n    accuracy                           0.92      2011\n   macro avg       0.95      0.88      0.90      2011\nweighted avg       0.93      0.92      0.92      2011\n\nAs you can see when training on different machine learning algorithms, we get the same results in the case of random forest and naive Bayesian classifier.\nI hope you can help me to fix a possible bug in the code or improve it in some way.\n",
        "Answer": "In your code for Random Forest, you're storing predictions as y_pred_rf but calling your metrics on y_pred\n",
        "Source": "https://stackoverflow.com/questions/77686328/problem-with-identical-metrics-results-after-machine-learning"
    },
    {
        "Title": "WordPress sql injection",
        "Question": "Thanks for letting me post here, I'm just starting to learn programming.\nI have a problem with a WordPress site which I update for my dad's local motorcycle road safety training group, which is run as a charity/non-profit by volunteer instructors. The hosting company (LCN) has taken the site down and emailed the group the following:\n\n\nDomain name : kamg.org.uk\nDatabase : kamg_org_uk_dbtest\nMySQL Server : database3.lcn.com\nOur monitoring scripts have detected an SQL injection attack occurring on your web site kamg.org.uk, using exploitable code hosted there.\nThe SQL queries that have been flagged as suspicious/malicious are listed here :\n----- BEGIN REPORT -----\nTIME RUNNING: 01:34:02\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\nTIME RUNNING: 01:34:00\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\n----- END REPORT -----\n\nWP, plugins and theme are all kept up to date at all times.\nCan I safely just delete those lines from the database to clean the site?\nLCN offer the group free charity hosting but I have found over 1600 domains share the same server. Once the sql injection is cleaned the group will move to managed WP hosting in the hope it will be more secure.\nThx,\nNiels\nI have tried reinstalling WordPress by FTP, but the hosts have denied the attempt, having removed all permissions.\nTheir support is appalling, taking 4 days to respond to queries, and then answering the wrong question with a cut & paste stock response.\nI have just started learning, but I'd be happy to go in and edit files (with some nervousness) but haven't attempted anything at this stage.\n",
        "Answer": "It's not the data that is at fault, it's something in the code of WordPress, or more likely one of the plugins or themes you have installed.\nThe way the code works is something like this:\n$query = 'SELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key,\n  wp_usermeta.meta_value \nFROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"' . $variable . \n  '\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" \n  AND wp_users.ID = wp_usermeta.user_id';\n\nBut the value of $variable has been exploited by some attacker. They set it to the following string:\n\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\n\n(even including the quote characters.)\nWhen the variable is concatenated into the query, it causes the SQL query to have extra expression terms, that the attacker injected.\nIt looks like they're forcing sleep() calls to test if certain tables exist. They'll use this method to learn all your table names. Then they'll use information in subsequent attacks, to read those tables. SQL injection hackers have to probe using techniques like this to try to avoid detection.\nThe original query may be a normal part of the code of WordPress or one of the plugins or themes. But the programmer made a mistake by concatenating a variable whose value was set from untrusted input. Programmers aren't supposed to do this, but many are either unaware of the risk, or else they think it won't happen to their code.\nYou said you are up to date on all the versions of WordPress and plugins, but the vulnerability may exist in the current version. In other words, no newer version with a fix has been released (yet).\nSometimes it doesn't help to update the software, because the newest version has introduced a new vulnerability that didn't exist before. Programmers add new code in every version, and security vulnerabilities are the result of mistakes made by software developers. New vulnerabilities occur regularly.\nWordPress itself is pretty well tested, that's why I suppose the vulnerability may be in a plugin or theme. I don't know which plugins you use.\nOr you may have added custom code that has the vulnerability, so there is no other person who will update it. It's up to you.\nWhat you have to do now is figure out which line of code, not data, is responsible for the vulnerability. If you don't have the skills to do this (basically a text search across many files to find a line of code similar to the one I showed above), then you need to employ someone to help you.\nOnce you find the line of code responsible, either fix it yourself, or if it's in a plugin you could just uninstall that plugin to remove the vulnerable code.\nIt sounds like your hosting company isn't going to help. They probably have very little resources to provide customer service in this case. Even if you fix the code, it sounds like it will be a struggle to get them to allow you to restore your website.\nYou may need to find a new hosting provider if your current one won't communicate or let you have access to your site.\nBut a different hosting provider won't be more secure, because the fault is not with the hosting provider. The fault is in the code you are using.\nIf you install the same code on the current provider or another provider without fixing it, the code will still be vulnerable to hacks. If you upload code you know is vulnerable, then it'll be your fault.\n",
        "Source": "https://stackoverflow.com/questions/77602811/wordpress-sql-injection"
    },
    {
        "Title": "Protects dplyr against SQL injections?",
        "Question": "I would like to use R-Shiny to develop a web app that accesses an SQL database with sensitive data.\nSo far I have written the database query as a pure SQL string.\nHowever, this approach is very susceptible to SQL injections.\nMy intention is therefore to write the database query with dplyr, as the query is written in R and not in pure SQL.\nUnfortunately, I have not yet been able to find any more detailed information or an estimate on this topic online. Therefore I would like to clarify my request in this question.\nSo far I have only read a statement about the dbplyr::translate_sql() function that is supposed to protect SQL injections:\nhttps://dbplyr.tidyverse.org/articles/sql-translation.html#vectors\nAs my data is very confidential, dbplyr / dplyr should provide 100% protection against SQL injections.\nI would be very pleased to receive further information and assessments on this topic.\nUPDATE\nAs suggested in the comments, I have added an example for reproducibility:\n(adapted from: https://shiny.posit.co/r/articles/build/pool-dplyr/)\nlibrary(shiny)\nlibrary(DBI)\nlibrary(pool)\nlibrary(tidyverse)\nlibrary(dbplyr)\n\npool <- dbPool(\n  drv = RMySQL::MySQL(),\n  dbname = \"shinydemo\",\n  host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",\n  username = \"guest\",\n  password = \"guest\")\n\nui <- fluidPage(\n  textInput(\"ID\", \"Enter your ID:\", \"5\"),\n  tableOutput(\"tbl\"),\n  numericInput(\"nrows\", \"How many cities to show?\", 10),\n  plotOutput(\"popPlot\"))\n\nserver <- function(input, output, session) {\n  output$tbl <- renderTable({\n    pool %>% tbl(\"City\") %>%\n      filter(ID == !!input$ID)\n  })\n  output$popPlot <- renderPlot({\n    df <- pool %>% tbl(\"City\") %>%\n      head(as.integer(input$nrows)[1]) %>% collect()\n    pop <- df$Population\n    names(pop) <- df$Name\n    barplot(pop)\n  })\n}\n\nshinyApp(ui, server)\n\n",
        "Answer": "The threat of SQL injection depends on how the user-provided text is incorporated into the dynamic SQL query. So if you are trying to protect against injection, you need to assess each of the ways user input is used when querying the database.\nIn the example you have posted there are two pieces of user input:\n\ninput$nrows which is limited to numeric by the input widget\ninput$ID which is free text, and hence has greater risk of SQL injection.\n\nYou can use any of the approaches below to investigate each piece of user input. Overall, the approach I would choose is to Sanitise and then Review.\nThis answer focuses on the case where you are using dbplyr to translate from R to SQL. If other approaches are used to access the database (such as the DBI package) then a different approach will be required.\n\nOption 1) Review the SQL query that is generated\nConsider where input$ID is used in the example code:\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID)\n\nIn order to execute this, dbplyr will translate the dplyr commands from R into SQL. We can review this translation using the show_query command.\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID) %>%\n  show_query()\n\nThis will probably produce an SQL query similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value'\n\nYou do not need the entire Shiny app to test this for SQL injection. You can simply vary this query and see what happens. For example, try a simple alternative query:\nattempt_inject = 'my_id_value;SELECT 123'\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!attempt_inject) %>%\n  show_query()\n\nI suspect this will produce SQL similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value;SELECT 123'\n\nWhich would seem an effective prevention for SQL injection. But you will need to test this as thoroughly as required to ensure you are confident.\n\nOption 2) Review source code\nThe dbplyr package is open source and available online. You could review the source code to confirm how inputs are handled during translation.\nMy suspicion is that unless inputs are of type sql, then they will be escaped as either text or an SQL object.\nThere is an sql() function that converts input to type sql. One of its uses is to tell dbplyr not to translate the contents of the function but to use them as-is. This means that if your user can submit R objects as inputs then this is a significant area of vulnerability. However, this is unlikely to be the case as your app restricts users to submitting text and numeric input.\n\nOption 3) Sanitise your inputs before passing them to dbplyr\nR has several advantages over pure SQL, in that you can use R to validate users' input before including it in a dbplyr query.\nConsider this an an alternative to your output$tbl component of the app:\noutput$tbl <- renderTable({\n  current_ID = as.character(input$ID)\n  acceptable_ids = pool %>%\n    tbl(\"City\") %>%\n    select(ID) %>%\n    distinct() %>%\n    collect() %>%\n    pull()\n  req(current_ID %in% acceptable_ids)\n\n  pool %>%\n    tbl(\"City\") %>%\n    filter(ID == !!current_ID)\n})\n\nThis approach enforces that the user input is converted to type character and is a value found in the ID column, before passing the user input through to dbplyr.\nThe exact choice of checks will depend on how user input is used. I often include a check that user input does not contain special characters (such as ;{}[]* or spaces).\ndbplyr includes commands to delimit certain inputs. Investigate and use these commands where applicable.\nNotes\n\nreq is a Shiny command that stops execution of a component if the condition is not met. You can use stopifnot outside a Shiny context.\nFetching the list of acceptable ids within the renderTable statement is not efficient app design. This should be calculated once and reused multiple times.\n\n",
        "Source": "https://stackoverflow.com/questions/77598340/protects-dplyr-against-sql-injections"
    },
    {
        "Title": "Interfacing with &quot;API&quot; that only takes raw SQL: Node / pSQL sanitization without prepared statements or parameterization?",
        "Question": "I am working with an \"API\" provided by a client's ERP. They do not have actual endpoints, rather a REST endpoint that you can send raw sql queries to, that they then execute. To make matters even worse, they only recently upgraded to https.\nI am writing some Node cloud functions to interface with this system. There will be two roles working with this product, and I need to prevent the role with less permissions to fire unwanted queries in the application when they are searching with specific parameters.\nFor filtering, I can just check if the values are in an array of allowed terms, but with a search I am not quite sure how to approach this. My general opinion has always been to use parameterized statements, but that is not an option here as I can't actually establish a connection to their database. I also saw some posts where people suggested wrapping the strings in dollar signs since the underlying DB is PostgreSQL, but I could not find anything in the documentation for this purpose.\nI was also thinking about only allowing alpha-numeric characters, but this seems like a potentially weak approach. If anyone knows of any libraries or ideas for dealing with this situation, I would greatly appreciate it.\nI tried looking for a Node library or piece of documentation that could help this situation, but I could not find anything relevant.\n",
        "Answer": "I found this interesting post around the question: https://security.stackexchange.com/questions/172297/sanitizing-input-for-parameterized-queries.\nTo summarize it, doing data sanitization(more like general validation) is always good idea but it will not necessarily guarantee that query will be safe. Directly running queries without parameterized statements will be still quite a big risk even if you find some great library for cleaning data to make it SQL safe.\nInstead try to think of ways to not run user input directly. Add some kind of mapper in between which will accept some filter codes and translate it into SQL values. For example if I had delivery company and wanted to filter all deliveries with status delivered, I would use mapping like this:\nconst status_code = \"DELIVERED\"\nconst statusMapper = {DELIVERED: \"delivered\"(value to filter in sql)}\n\nAnd if my mapper does not find the exact match, return error or empty result and don't run the query at all. If its search bar, try to identify most frequent search keywords and build mapper for that. Obviously it will not be too accurate, but still better than having risk of sql injection, especially if you work with sensitive and important data(I assume you work with company's internal data since you integrate with ERP).\n",
        "Source": "https://stackoverflow.com/questions/77516509/interfacing-with-api-that-only-takes-raw-sql-node-psql-sanitization-without"
    },
    {
        "Title": "Dremio SQL injection vulnerability",
        "Question": "I'd like to query an S3 storage containing parquet files through my Spring Java app with Dremio. These are dynamic queries with user given parameters.\nI use Apache Arrow SQl driver and simply run queries by a JdbcTemplate instantiated with a DataSource from the following properties:\n  driver-class-name: org.apache.arrow.driver.jdbc.ArrowFlightJdbcDriver\n  url: jdbc:arrow-flight-sql://localhost:32010/?useEncryption=false\n  username: user\n  password: pwd\n\nFor the sql string I use a String formatted with the user given value:\n\"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = '%s';\".formatted(userInput)\n\nIt works well but needless to say how big of an SQL injection opportunity it is. If I try to use a Prepared Statement:\nString sql = \"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = ?\"\njdbcTemplate.query(sql, ps -> ps.setString(1, userInput), rs -> {\n  //handling the result set\n});\n\nI get the following error:\ncfjd.org.apache.arrow.flight.FlightRuntimeException: Cannot convert RexNode to equivalent Dremio expression. RexNode Class: org.apache.calcite.rex.RexDynamicParam, RexNode Digest: ?0\n\nI'm finding ambiguous information on the web. The claim that Dremio doesn't support prepared statements could be found in some forums, but all of these comments are several years old*, moreover the official Dremio site has an article recommending the usage of prepared statements..\nAs far as I know Dremio uses ANSI SQL under the hood, which I believe supports prepared statements. Or does that depend on the database engine and not the dialect? Can anyone confirm that it is still not possible with Dremio? Then I'll stop pursuing it further.\nIf that's the case, I will escape the unsafe characters, use a dictionary for encoding and decoding user given characteres, etc.\nIf you have some other advices or experiences mitigating SQL injection without prepared statements though, I would appreciate them as well!\nThank you!\n*latest update I found: https://community.dremio.com/t/sql-parameterization-support/1733/5\n",
        "Answer": "I'll post my findings as an answer, maybe it could be useful for someone in the same boat:\nIn lack of any other ideas I went down the encode/decode road.\nFor that the initial idea was to use an own dictionary, but I figured that hexadecimal encoding should be sufficient enough.\nLuckily Dremio SQL has a FROM_HEX function, which can return a BINARY value for the given hexadecimal string.\nWith that I can (so far..) safely build dynamic queries with any kind of user given input turned into HEX strings and then converting back at execution time, with the function behaving kind of like a wrapper.\nStill, this isn't a perfectly calming solution, but as far as I can see, there isn't really a better option at the moment. I heard Dremio will implement prepared statements (quite a shock that they haven't already), until then, let's hope for the best!\n",
        "Source": "https://stackoverflow.com/questions/77501615/dremio-sql-injection-vulnerability"
    },
    {
        "Title": "SQL Injection in Stored Procedures via MySQL Connector",
        "Question": "I use the mysql-connector-python driver for executing database operations. Recently, I came across stored procedures in MySQL and decided to migrate some of my APIs from utilizing cursor.execute() to cursor.callproc(proc_name, args=()). This transition has proven successful, and everything works seamlessly. However, I'm uncertain about the vulnerability of these stored procedures to SQL injection.\nTo assess this, I created a test stored procedure and examined its susceptibility to SQL injection payloads.\nStored Procedure:\nDELIMITER //\nCREATE PROCEDURE TestProcedure(IN arg_test VARCHAR(150))\n  BEGIN\n    IF EXISTS (SELECT 1 FROM Random_Table WHERE test = arg_test) THEN\n        SELECT 'success' AS message;\n    ELSE\n        SELECT 'failed' AS message;\n    END IF;\n  END //\nDELIMITER ;\n\nPayloads:\n\n' or 1=1 -- \n\" or 1=1 -- \n\nSurprisingly, none of these payloads yielded any successful results. Seeking further assurance, I consulted one of the database administrators in the company. Although he expressed uncertainty, he suggested that these stored procedures function similarly to prepared statements. This aligns with my observation that the cursor.callproc() method accepts user inputs as arguments via the args parameter, resembling prepared statements.\nIf this interpretation is accurate, it implies that using the cursor.callproc() method ensures a secure backend, free from SQL injection concerns. Despite these positive indications, I would like to seek additional confirmation here to guarantee the safety of this approach.\n",
        "Answer": "Like it often happens, the problem is in the terminology. And it creates a lot of trouble (and vulnerabilities). A programmer should be always strict in their definitions.\nWhat you are talking about here is using stored procedure's parameter. Such a parameter is a special case related to stored procedures, and very similar in nature to SQL variables.\nIn this case your database doesn't add the contents of arg_test into the SQL body (as it would have been in python if you did something like + arg_test +) and then evaluate the resulting SQL. On the contrary, is uses arg_test as though it's a variable (in this sense, it's indeed similar to prepared statements, but technically it's entirely different matters).\nWhile speaking of stored procedures, they are irrelevant to injections. By itself, just using a procedure doesn't guarantee anything. One can write a procedure which is immune to injection, and write another which is prone to injection. Just like any other code.\nBut as long as you are just using a parameter passed to the procedure - it's safe.\n",
        "Source": "https://stackoverflow.com/questions/77500796/sql-injection-in-stored-procedures-via-mysql-connector"
    },
    {
        "Title": "Protection query against SQL injection, using PDO",
        "Question": "may I ask you how to make this protected against sql injection?\nI have\n$podminkazeme = \"\";\n$podminkakraj = \"\";\n\nif ( isset( $_GET[ \"zeme\" ] )and !empty( $_GET[ \"zeme\" ] ) ) {\n   $podminkazeme = \"and nb.zemehledani in (\" . str_replace( '%2C', ',',  $_GET[ \"zeme\" ] ) . \")\";\n};\n\nif ( isset( $_GET[ \"kraj\" ] )and !empty( $_GET[ \"kraj\" ] ) ) {\n  $podminkakraj = \"and nb.krajhledani in (\" . str_replace( '%2C', ',', $_GET[ \"kraj\" ]  ) . \")\";\n};\n\n$conn = new PDO( DB_DSN, DB_USERNAME, DB_PASSWORD );\n$sqljednotkaa = \"\n  select nb.*, \n    dv.nazev as developer, \n    UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, \n    UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, \n    uz.nazev as skladUpravil, \n    uzm.nazev as makler, \n    tp.nazev as typProdeje, \n    dal.nazev as nazevdalnice\n  from nabidka nb \n  left join uzivatele uz on uz.id=nb.skladUpravil \n  left join uzivatele uzm on uzm.id=nb.makler \n  left join typProdeje tp on tp.id=nb.typProdeje \n  left join developer dv on dv.id=nb.developer\n  left join dalnice dal on dal.id=nb.dalnice \n  where nb.emptyid is null \n    $podminkaid \n    $podminkastav \n    $podminkaupraveno \n    $podminkavelikost \n    $podminkacena \n    $podminkamakler \n    $podminkaexport \n    $podminkatypprodeje \n    $podminkatypnemovitosti \n    $podminkazeme \n    $podminkadalnice \n    $podminkakraj \n    $podminkaokres \n    $podminkadeveloper \n    $podminkatechnickeparametry \n    $podminkahledanislovo \n  order by nb.emptyid asc $razenipodminka\";\n\n$stjednotkaa = $conn->prepare( $sqljednotkaa );\n$stjednotkaa->execute();\n\n",
        "Answer": "Try this\n$conditions = [];\n$parameters = [];\n\nif (isset($_GET[\"zeme\"]) && !empty($_GET[\"zeme\"])) {\n    $zemeValues = explode(',', $_GET[\"zeme\"]);\n    $conditions[] = \"nb.zemehledani IN (\" . implode(', ', array_fill(0, count($zemeValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $zemeValues);\n}\n\nif (isset($_GET[\"kraj\"]) && !empty($_GET[\"kraj\"])) {\n    $krajValues = explode(',', $_GET[\"kraj\"]);\n    $conditions[] = \"nb.krajhledani IN (\" . implode(', ', array_fill(0, count($krajValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $krajValues);\n}\n\n$conn = new PDO(DB_DSN, DB_USERNAME, DB_PASSWORD);\n$sqljednotkaa = \"SELECT nb.*, dv.nazev as developer, UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, uz.nazev as skladUpravil, uzm.nazev as makler, tp.nazev as typProdeje, dal.nazev as nazevdalnice from nabidka nb left join uzivatele uz on uz.id=nb.skladUpravil left join uzivatele uzm on uzm.id=nb.makler left join typProdeje tp on tp.id=nb.typProdeje left join developer dv on dv.id=nb.developer left join dalnice dal on dal.id=nb.dalnice where nb.emptyid is null\";\nif ($conditions) {\n    $sqljednotkaa .= \" AND \" . implode(\" AND \", $conditions);\n}\n$sqljednotkaa .= \" ORDER BY nb.emptyid ASC $razenipodminka\";\n$stjednotkaa = $conn->prepare($sqljednotkaa);\n$stjednotkaa->execute($parameters);\n\n",
        "Source": "https://stackoverflow.com/questions/77416426/protection-query-against-sql-injection-using-pdo"
    },
    {
        "Title": "Enforcing row-level security in a shared postgres pool",
        "Question": "I'm working on a typical client-server webapp. It is using a system somewhat like GraphQL where the client has some flexibility in specifying what data it needs, without custom API endpoints for every type of data. The server is running node, and is using node-postgres with a typical pg.Pool. A client could send something like this:\n{select: '*', from: 'expenses', where: {'op': 'gt', 'lhs': 'expenses.amount', 'rhs': 20}}\n\nwhich would be translated to SELECT * FROM expenses WHERE expenses.amount > $1 (given $1 = 20). With enough care, this system can be made safe from injection attacks.\nI'd also like to incorporate row-level security policies. For example:\ncreate policy only_see_own_expenses on expenses using (expenses.user_id = <USER ID>);\n\nAs an extra security barrier, I want to make sure that even if an injection attack is succesful, a client can not \"unset\" its user ID.\nI've seen <USER ID> been defined in a few ways:\n\ncurrent_user, in which case every user of the app also needs a postgres user/role\nAn arbitrary setting like current_setting('myapp.user_id') in combination with a SET LOCAL myapp.user_id = ... at the start of a transaction\n\nApproach (2) seems most flexible to me. I'd just wrap every generated SQL query in a BEGIN; SET LOCAL myapp.user_id = 123; {generated query}; END;. The problem is that an attacker could inject another SET LOCAL statement, and impersonate another user.\nIn approach (1) you can similarly wrap every generated query with a SET ROLE ... statement at the start, yielding the same problem. An alternative is to create a new connection for each query with that specific role. I believe postgres would never allow that connection to switch to another role. But setting up a new connection per query would result in a lot of overhead.\nHow do I enforce row-level security without the performance hit of a new connection per query?\n",
        "Answer": "As you observe, setting a placeholder parameter and using SET LOCAL ROLE to temporarily assume a different role can be subverted by attackers who can execute arbitrary SQL, like in an SQL injection attack.\nI don't think that there is a way to accomplish what you want that is safe from SQL injection. The problem is a fundamental one: you handle authentication in the application, not in the database (where you are using a single application user to benefit from connection pooling), but you want to have the database handle authorization via row-level security. That requires a way for the application to tell the database what the application user is. Now the only way that the application can tell the database anything is by using SQL, and an attacker who can run arbitrary SQL statements can always subvert that.\nI think that the only option for you is to harden your application against SQL injection attacks.\n",
        "Source": "https://stackoverflow.com/questions/77272972/enforcing-row-level-security-in-a-shared-postgres-pool"
    },
    {
        "Title": "SQL Injection - Python - MySQL",
        "Question": "Basically,\nI'm trying to find ways to explore SQL Injection vulnerabilities in  the code presented below. The code has another layer, presentation, where it asks the user for board_name input.\nTable_name is an inside variable, user doesn't have control over it.\n    def find_board_by_name(cls, connector, board_name, table_name: str):\n        query = \"SELECT * FROM {} WHERE name = '{}'\".format(table_name,board_name.title())\n        print(query)\n        try:\n            connector.mycursor.execute(query)\n            res = connector.mycursor.fetchone()\n            if res:\n                return res[1]\n            return None\n        except Exception as e:\n            raise e\n        \n\nTried to :\n1- board_name as:          ' OR '1'='1\nIt worked, program returned to me me first item on the table (it wasn't supposed to, since I didn't provide any name)\n2- Tried to put board_name as:          ';Delete Table BoardGames;\nIt didn't work, mysql.connector.errors.InterfaceError: Use multi=True when executing multiple statements was presented to me.\nSo my question is \" mysql.connector\" is protecting me against the majorities of the SQL Injections? Since I didn't set the \"multi\" tag in the code to True?  Could you show me other ways to explore vulnerabilities in this code? Besides the 1 and 2.\nI guess I know how to fix the SQL Injection problem: \"connector.mycursor.execute(query, values)\" probably will do the job.  But, I'm trying to understand better what kind of SQL Vulnerabilities I would have with this original code without this fix.\n",
        "Answer": "SQL injection isn't always malicious. It could result in a simple error instead of deleting all the student records.\nFor example, if some legitimate user of your site is named \"O'Reilly\" then your code formatting would have an imbalanced quote, which would be a syntax error:\nSELECT * FROM tablename WHERE name = 'O'Reilly'\n                                       ^ wtf\n\nUsing parameters avoids this kind of problem. Query parameters aren't just a quick way of interpolating variables. They either escape special characters in the dynamic content (by default Python does this), or else full-blown parameters keep the values separate from the SQL query until after it has been parsed by the SQL server. So no special characters can ever cause a syntax error.\nBut table names and other identifiers cannot be parameters. You can use parameters only in place of SQL values, like your quoted string in your example.\nYou said the user is not in control of the table name variable. That's great, but not sufficient.\nWhat if another programmer on your project isn't careful when calling your find_board_by_name() function, and inadvertently passes unsafe content as the table name? Note that unsafe content is more than just user input.\nWhat if the table name is a reserved keyword in SQL?\nSELECT * FROM order WHERE name = ?\n              ^ syntax error\n\nWhat if the table name contains whitespace or punctuation? There are other risks.\nYou should code your function so it does not trust its caller. For SQL values, do use parameters of course. For other dynamic elements like table names, you do have to interpolate variables into the SQL string, but you can be defensive:\n\nUse an allowlist to verify the table name is a legitimate known table name.\n\nDelimit the table name in back-ticks in your SQL, just in case it's a reserved word or not a simple identifier.\nlegit_table_names = Set(['table1', 'table2', 'table3'])\nif table_name not in legit_table_names:\n  return error # pseudocode\n\nquery = f\"SELECT * FROM {table_name} WHERE name = %s\"\n\n\n\n(I prefer f-strings instead of format() in modern Python)\n",
        "Source": "https://stackoverflow.com/questions/77167563/sql-injection-python-mysql"
    },
    {
        "Title": "PHP Code Functioning as Intended but UNION Injection Payload Doesn&#39;t Work",
        "Question": "I am attempting to make a web application (LAMP stack - MySQL version: 8.0.36-0ubuntu0.22.04.1) that is vulnerable to a SQL UNION Injection attack (or some type of SQL injection attack). The code takes the user's input via POST parameters to get the VIN & mileage.\nThe following PHP Code handles the backend to adding the parameters to the database:\n// If SESSION variables are set then proceed to Mileage.php\n    if (isset($_SESSION['username'])) {\n        // PHP Code for Handling ADDING CAR\n        // Declare Variables\n        $username = $_SESSION['username'];\n        $vin = $_POST['vehicle'];\n        $mileage = $_POST['mileage'];\n\n        // Implement Try-catch for Error Hanlding\n        try {\n            // Add Mileage\n            if(isset($_POST['add_data'])) {\n                $query = \"INSERT INTO mileage_master.mileages (`username`, `VIN`, `mileage`) VALUES ('$username', '$vin', '$mileage')\";\n                $query_result = mysqli_query($db,$query);\n    \n            // Update Mileage\n            } elseif(isset($_POST['update_data'])) {\n                // Query to update associated VIN's Mileage\n                $update = \"UPDATE mileage_master.mileages SET mileage='$mileage' WHERE username='$username' AND VIN='$vin'\";\n                $update_result = mysqli_query($db,$update);\n            // Remove Mileage\n            } elseif(isset($_POST['remove_data'])) {\n                // Query to Remove VIN & Mileage\n                $remove = \"DELETE FROM mileage_master.mileages WHERE username='$username' AND VIN='$vin'\";\n                $remove_result = mysqli_query($db,$remove);\n            }\n        }\n        catch (mysqli_sql_exception $e) {\n            $showAlert = true;\n            // Display Syntax Error\n            $errorMessage = \"My SQL Error: \" . $e->getMessage();\n            // Display Query (Intentional Unsafe Coding Practices)\n            $errorMessage .= \"\\t||\\tQuery: \" . $sql;\n        }\n\n        \n    }    \n    else {\n        header(\"Location: /\");\n    }\n?>\n\nThe following PHP code prints the VIN & mileage to user's page:\n<?php\n    // Query to get all VINs associated with username\n    $result = mysqli_query($db,\"SELECT * FROM mileages WHERE username='$username'\");\n\n    echo \"<table style='margin-top: 35px;'>\";\n    echo \"<tr><th>VIN</th>\";\n    echo \"<th>Mileage</th></tr>\";\n\n    // While Loop to iterate through all returned rows\n    while($row = mysqli_fetch_assoc($result)) {\n        echo \"<tr style='text-align: center;'>\";\n        // VIN\n        echo \"<td>\" . $row['VIN'] . \"</td>\";\n        // Mileage\n        echo \"<td>\" . $row['mileage'] . \"</td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n?>\n\nMy thought process was that because the application uses dynamic queries an attacker could include some type of UNION SELECT statement. The UNION select statement's output would be stored within the VIN column for that query.\nHowever, I am unable to create a successful SQL Injection payload that would accomplish this.\nQuestion\nDo I need to change the logic of my application to make the exploit possible or is my idea not exploitable in the first place?\n",
        "Answer": "You can't get SQL injection in the SELECT query, since the user doesn't have control over the $username variable, and that's the only thing you substitute. But you can do it in the INSERT query, to insert extra rows in the table with arbitrary values.\nIt needs to terminate the current value list, then it can use a subquery in another value list, and finally it has to provide the beginning to match the end of the original value list.\n$vin = \"12345', '20'), ('baduser', (SELECT '67890'), (SELECT '30')), ('baduser2', '1111\";\n\nThis will put a bogus VIN and mileage into the row for $username, then insert additional rows for baduser and baduser2. baduser2 will get another bogus VIN and the mileage from the parameter.\nbaduser can use subqueries to get its VIN and mileage values, as long as the subqueries each only return one row and column. I used literals in the above example, but you can make them arbitrarily complex.\n",
        "Source": "https://stackoverflow.com/questions/78093937/php-code-functioning-as-intended-but-union-injection-payload-doesnt-work"
    },
    {
        "Title": "How to fix SQL injection if we have to use DB name dynamically in SQL Server?",
        "Question": "This is the implementation in code: the schema name comes from a configuration file and is different for each environment. Sonar throws SQL injection alert at this statement:\nselect * \nfrom dbName.dbo.stu_name;     <<dbname is the variable that comes from property file>>\n\nI tried these solutions:\n\nUsing query.setParameter(?,dbname). Tried passing dbname dynamically and vulnerability was fixed. When debugging, the query was throwing an error and did not execute.\n\nUsed String.format(select * from \\'%s\\',tablename.replace(\"\\'\",\"\\'\\'\")) - vulnerability fixed, but query failed to execute\n\n\nI tried various other solutions and nothing worked.\nCan anyone please help me with this?\n",
        "Answer": "The \"best\" defence you can do is not use dynamic SQL. Considering that this is the database that's dynamic, and based on a prior question, I would suggest that this is occurring from an application, so that means you don't need 3-part naming. Instead you parametrise the database name in the connection string and use 2-part naming; no dynamic SQL needed.\nIf you must use dynamic SQL, then the \"best\u2122\ufe0f\" defence would be to validate the database name, and then ensure you properly quote the database name when you inject it into your dynamic statement.\nHere I validate the database name in sys.databases and then use QUOTENAME to quote the name appropriately. If the database doesn't exist, no query is run (and no error is returned):\nDECLARE @DatabaseName sysname = N'YourDatabaseName';\n\nDECLARE @SQL nvarchar(MAX);\nSELECT @SQL = N'SELECT * FROM ' + QUOTENAME(d.name) + N'.dbo.stu_name;'\nFROM sys.databases d\nWHERE d.name = @DatabaseName;\n\nEXEC sys.sp_executesql @SQL;\n\n",
        "Source": "https://stackoverflow.com/questions/78027431/how-to-fix-sql-injection-if-we-have-to-use-db-name-dynamically-in-sql-server"
    },
    {
        "Title": "How to reduce vulnerability to cyber attacks from injection?",
        "Question": "I have very little knowledge about SQL injection, and there are probably other threats I am unaware of out there for stealing company data, how would I make this python code better in regards to security?\nmerge_query = \"\"\"\nMERGE INTO sql_table_name AS Target\nUSING (\n    VALUES {}\n) AS Source (transaction_year, month_num, month_name, price_nt)\nON Target.transaction_year = Source.transaction_year \nAND Target.month_num = Source.month_num\nWHEN MATCHED AND (Target.month_name != Source.month_name OR Target.price_nt != Source.price_nt) THEN\n    UPDATE SET Target.month_name = Source.month_name, Target.price_nt = Source.price_nt\nWHEN NOT MATCHED THEN\n    INSERT (transaction_year, month_num, month_name, price_nt) VALUES (Source.transaction_year, Source.month_num, Source.month_name, Source.price_nt);\n\"\"\".format(','.join(['(?,?,?,?)' for _ in range(len(data))]))\n\nparams = [item for sublist in data for item in sublist]\n\ntry:\n    obj_crsr.execute(merge_query, params)\n\nexcept Exception as e:\n    obj_crsr.rollback()\n    print(e)\n    print(\"Transaction rolled back\")\n\nelse:\n    obj_cnxn.commit()\n    obj_crsr.close()\n    obj_cnxn.close()\n\nThis python code is given data in the following format:\n[(2023, M12,    December,   541.44),\n(2023,  M11,    November,   486.64),\n(2023,  M10,    October,    468.23),\n(2023,  M09,    September,  478.80),\n(2023,  M08,    August,     475.41)]\n\nAnd then is converted to a list in the params variable.  That data looks like this:\n['2023', 'M12', 'December', '541.442', '2023', 'M11', 'November', '486.639', '2023', 'M10', 'October', '468.226', '2023', 'M09', 'September', '478.802', '2023', 'M08', 'August', '475.411']\n\nThis is the only method I have found to work when trying to merge data into an existing table using PYODBC.  I have heard of parameterizing the query or naming sql variables, but I don't know how to adapt existing examples/solution on stack overflow to my specific use case.  Any suggestions are appreciated.\n",
        "Answer": "There is nothing wrong with your existing code as far as injection is concerned.\nInjection only happens when user data is injected directly into the query. Here, that is not happening. What is happening is that a dynamic list of ? parameter markers are being injected, in a well-defined way (once per row), and the actual values are passed as a dynamic list of parameters. There is absolutely no scope for injection here.\nBe aware of a few points though:\n\nUsing such code does tend to focus minds on \"oh just inject the data\". Might be worth putting in a comment such as only paramaters are injected here.\nIf there are no rows at all to insert then you get invalid code ( VALUES ), so you should check for that.\nDynamic numbers of parameters mean you get a recompile for every possible variation of parameters. This is not as many as would be had if you actually injected the data, but still a concern.\nA Table-Valued Parameter or a bulk insert into a temp table are therefore both better options than any of this, but neither are supported by pyodbc. fast_executemany or to_sql might be options, or BULK INSERT from an external file.\nThe maximum number of parameters is 2100, you will hit performance issues well before that though.\n\n",
        "Source": "https://stackoverflow.com/questions/77996154/how-to-reduce-vulnerability-to-cyber-attacks-from-injection"
    },
    {
        "Title": "Is using Hibernate&#39;s Restrictions.eq() method safe against SQL injection?",
        "Question": "Is using Hibernate's Restrictions.eq() method, as used in the example below, safe against SQL injection? Or similar methods like Restrictions.in(), Restrictions.ge(), ...\nString vulnerable = //parameter from user interface \nCriteria ct = this.getCriteria();\nct.add(Restrictions.eq(\"propertyName\", vulnerable));\n\nI have found that probably is, as explained in this answer\nbut reviewing OWASP documentation, there is an example that shows a comment which confuses me (// This should REALLY be validated too). Is needed to validate the input, or is secure as is?\nThe example in the OWASP documentation\n// Criteria API\n// This should REALLY be validated too\nString userSuppliedParameter = request.getParameter(\"Product-Description\");\n// Perform input validation to detect attacks\nInventory inv = (Inventory) session.createCriteria(Inventory.class).add\n(Restrictions.eq(\"productDescription\", userSuppliedParameter)).uniqueResult();\n\n",
        "Answer": "Yes, Hibernate's Criteria API would protect you against SQL Injection, as it parameterises the query - you can see this in action by enabling sql logging.\nWhat you do need to be careful about is concatenating user inputs etc. I think the documentation may perhaps be referring to validate the user input at both client and server side.\n",
        "Source": "https://stackoverflow.com/questions/77993970/is-using-hibernates-restrictions-eq-method-safe-against-sql-injection"
    },
    {
        "Title": "Operand type clash: int is incompatible with date in sql",
        "Question": "i using am writing a insert statement but getting above error\nInsert query\nvar insertSql = string.Format(\n                $\"INSERT INTO Sales (Date, Team, Sales) VALUES ({0}, {1}, {2})\",\n                new List<SqlParameter>()\n                {\n                    new(\"@date\", sales.Date.ToString(\"yyyy-MM-dd\")),\n                    new(\"@team\", sales.Team),\n                    new(\"@sales\", sales.Sales),\n                });\n            var rowCount = Sql.ExecuteNonQuery(Conn,insertSql);\n\nhere is my table schema and class\nSaleId int,\nDate Date,\nTeam varchar(50),\nSales int\n\npublic class Sales\n{\n    public int SalesId { get; set; }\n    public DateTime Date { get; set; }\n    public string Team { get; set; }\n    public int Sales { get; set; }\n}\n\nI want to use parameterized query to achive this so tried this but giving above error\n",
        "Answer": "The immediate problem here is that $\"...\" is itself an interpolated string, and the values you are injecting are the literal 0, 1, and 2 - they're not placeholders: they're the values. Removing the $ would make it a literal string suitable for string.Format, but you don't want to use string.Format here; also, you don't want to format the date - just pass it as a date.\nHonestly: if you're writing the SQL yourself, I'm not sure EF is even needed here; with Dapper this would be simply:\nconn.Execute(\"INSERT INTO Sales (Date, Team, Sales) Values (@Date, @Team, @Sales)\",\n    sales);\n\nor with a trick for better SQL formatting:\nconn.Execute(\"\"\"\n    INSERT INTO Sales (Date, Team, Sales)\n    Values (@Date, @Team, @Sales)\n    \"\"\", sales);\n\nDapper will deal with finding sales.Date, sales.Team and sales.Sales, and add them correctly. EF may also have an API for doing ad-hoc queries like this, but... this feels more like a Dapper scenario, unless you're emotionally invested in EF.\n",
        "Source": "https://stackoverflow.com/questions/77926016/operand-type-clash-int-is-incompatible-with-date-in-sql"
    },
    {
        "Title": "How to limit memory usage with PDO in MariaDB : Fatal error: Allowed memory size of 67108864 bytes exhausted",
        "Question": "I am changing my SQL request to PDO in order to integrate more security against SQL injecting.  I was using before procedural msqli and everything was working ok.  Now I updated server to PHP 8.2 and I am using PDO and prepared statements.\nThe BD I am accessing is old MariaDB and has a table with 247 fields most of which are NULL on a single row. (It is sections for a description of mushrooms, but only some of each are really described in a single row (mushrooms)).\nMost of the 247 fields are set to mediumtext because they can content up to a couple paragraphs.\nMy connection script is :\ntry {\n\n    db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\nreturn;\n} \n\nWhen I select one row of that table in order to echo the not NULL descriptions column, as soon as I execute the statement I run into a full memory.  The error is at the stmt->execute() line, not even at the fetchAll line.\n$description = 'someTag';\n\n$sql = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n$stmt = $db->prepare($sql);\n$stmt->bindParam(':tag', $description, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n$result = $stmt->fetchAll();\n$stmt->closeCursor();\n\nThe error :\nFatal error: Allowed memory size of 67108864 bytes exhausted (tried to allocate 262144 bytes) in /home/mycoqueb/public_html/nou.mycoquebec.org/scripts/bd-query.php on line (**the $stmt->execute() line)\n\nI tried to use :\nwhile ($row = $stmt->fetch()) {\n\nInstead of fetchAll() but it changed noting, I used it on every other request from the same page and it changed noting.  I flushed variables that were no more useful to NULL on the rest of the page and it changed nothing.  I even isolated the script on an empty page and it exceeds the memory limit.\nI tried to add this to my connection script and it changed nothing :\ndb->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\nI tried to select only one field instead of * and this worked, but I don't have an easy way to find NOT NULL columns in the table for a specific tag (row).\nI tried to find a SQL statement to restrict my SELECT to NOT NULL columns but I was not successful.\nI know I could get add memory_limit = 256M to the phpini file, but that is not what I want since the website has a high usage and for now its on a multihosted server.\nThe best solution would be to reengineer the MariaDB database using a table with description sections labels and linking only used sections to the main description table for each row, but I have limited access to the db since it is online with the old website and the old website needs to stay online and up to date for 1-2 years after new deployment. I though of creating a daily cron job to do that but I would like to avoid for the moment.\nAny Idea how I can get this to work?  It was working fine using msqli on php 8.1.\nTo answer the worries of contributors that think it's related to another part of the page code, here is the complete code of the isolated test page.\nfunction convert($size)\n {\n    $unit=array('b','kb','mb','gb','tb','pb');\n    return @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];\n }\n\n\n$servername = \"localhost\";\n$username = \"myUser\";\n$password = \"myPass\";\n$dbname = \"myDB\";\n\n\ntry {\n\n    $db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    //$db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\n } catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\n    return;\n}   \n\n$query = (array_key_exists(\"query\",$_REQUEST) ? $_REQUEST[\"query\"] : \"\");\n\n\nif($query != \"\"){\n\n    $tag_desc = 'Aegerita candida';\n    // Code works if I limit to \"SELECT Titre FROM description WHERE tag = :tag LIMIT 1\";\n    $sql_description = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n    $stmt = $db->prepare($sql_description);\n    $stmt->bindParam(':tag', $tag_desc, PDO::PARAM_STR);\n    \n    echo convert(memory_get_usage(true));  // returns 2mb\n    $stmt->execute();\n    $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n    \n    $i = 0;\n    \n    while ($row = $stmt->fetch()) {\n\n        if($i == 0) {\n\n            ?><table style=\"border-collapse:collapse;border: 0;table-layout: fixed;color: #063850;background-color: #DDDDDD;text-align: left\"><thead><tr style=\"border: 2px solid #063850;\"> <?php\n            foreach (array_keys($row) as $key) {\n                //print_r($key);\n                echo (\"<th style='padding:5px;border: 2px solid #063850;position:sticky;top: -2;z-index:10;background-color:#e5a045'>$key</th>\");\n            }\n            echo (\"</tr></thead>\");\n        }\n\n        $i++;\n\n        echo (\"<tr style='border: 2px solid #063850'>\");\n        foreach ($row as $value) {\n            echo (\"<td style='padding:2px;border: 2px solid #063850'>$value</td>\");\n            // <img src=\\\"$value\\\" height=\\\"400\\\" >\n        }\n        echo (\"</tr>\");\n    }\n    \n    if ($i > 0) {\n        echo (\"</table>\");\n        echo ('<div style=\"margin-top:400px\">&nbsp;</div>');\n    } else {\n        echo \"Aucun r\u00e9sultat\";\n    }\n\n}\n\n$db = null;\n\nHas mentioned it automatically work if I limit my sql to a couple fields.\nThe error is still on the stmt->execute() line.\n",
        "Answer": "Could it be that the issue is your data model?\nIf you have a table that has a lot of nulls, then the data is most likely not normalized.\nInstead of having 256 columns in your table, maybe just have the ones that are always there, and then relate it to a separate table with three fields: foreign key to the main table, a tag field and a value field.\nIf you are rewriting your application to USE PDO anyway, some long-term considerations could be included.\nExample table\nLayout like yours (all data in one table):\n\n\n\n\nid\nname\nemail\nsomeotherdata\ntag1\ntag2\ntag3\ntag4\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\nNULL\na\nNULL\n100\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\nc\na\nNULL\n400\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\nNULL\nNULL\n5000\nNULL\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\nNULL\na\nNULL\n100\n\n\n\nSuggested Tag-Value table layout\nMain Table\n\n\n\n\nid\nname\nemail\nsomeotherdata\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\n\n\n\n\nTag-Value Table\n\n\n\n\nid\ntag\nvalue\n\n\n\n\n1\ntag2\na\n\n\n1\ntag4\n100\n\n\n2\ntag1\nc\n\n\n2\ntag2\na\n\n\n2\ntag4\n400\n\n\n3\ntag3\n5000\n\n\n4\ntag2\na\n\n\n4\ntag4\n100\n\n\n\nUsage\nInstead of selecting just your row, you WILL need to either join the results together, or make two separate calls. I would suggest two calls, especially since you are rtunning into memory issues.\nSELECT \n  id, \n  name,\n  email,\n  someotherdata\nFROM\n  MainTable\nWHERE\n  id = 1;\n\n-- and then the tags\nSELECT \n  id, \n  tag,\n  value\nFROM\n  TagValueTable\nWHERE\n  id = 1; -- reference to the main table\n\n\n\nAdvantaages of this normalized approach\n\nLess bloat (not so many nulls)\nSimpler structures\nREST ready\nMore resilient\n\nAdd tags without changing the DDL of the database (ALTER)\n\n\nYou can still get the original layout by making subselects and transpositions in mysql\nYou can easily make statistics on the tags related to each other\n\nDisadvantages\n\nComplexity of the data model increases\nYou need to do a lot of extra SQL gymnastics to get EXACTLY what you had before\n\n",
        "Source": "https://stackoverflow.com/questions/77895050/how-to-limit-memory-usage-with-pdo-in-mariadb-fatal-error-allowed-memory-size"
    },
    {
        "Title": "PHP: Prepare JSON selector to Prevent MySQL Injection",
        "Question": "What is the best/proper way to prepare a dynamic MySQL JSON selector for queries, in order to prevent SQL injection? As an example, say I want to execute the following query:\nSELECT `key` ->> \"$.key.path\" AS `setting_value`\nFROM `settings`\nLIMIT 1\n\nBut I want to make the key path dynamic, e.g.:\n$sql = <<<SQL\n    SELECT `key` ->> \"{$path}\" AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nWith conditional values, I can structure the SQL for a prepared statement using PDO, e.g.:\n$sql = <<<SQL\n    SELECT *\n    FROM `settings`\n    WHERE `other_field` = :field_val\n    LIMIT 1\nSQL;\n\n$statement = $this->handle()->prepare($sql);\n$statement->execute([':field_val' => 'some val']);\n$records = $statement->fetchAll(PDO::FETCH_OBJ);\n\nAdding something like the following to my database adapter (or even to my helper functions) seems rather inelegant and prone to errors/issues:\n    public function cleanJsonSelector(string $selector) : string {\n        return preg_replace('/[^-\\$a-zA-Z0-9_\\[\\].*\\s]/', '', $selector);\n    }\n\nThoughts/help?\n",
        "Answer": "The -> and ->> operators only support string literals. They do not expressions, variables, or parameters.\nBut you can use any expression \u2014\u00a0including a parameter placeholder \u2014\u00a0in the equivalent JSON function JSON_EXTRACT().\nThe ->> operator is like JSON_UNQUOTE(JSON_EXTRACT(json_doc, path))\n$sql = <<<SQL\n    SELECT JSON_UNQUOTE(JSON_EXTRACT(`key`, :path)) AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nThis seems like an unnecessary inconsistency in the functionality of MySQL's JSON operators, but this is how it's implemented in the current MySQL version 8.3.\n\nFor what it's worth, it was requested to support expressions after the -> operator (and presumably also the ->> operator) here: https://bugs.mysql.com/bug.php?id=87360\nYou may want to log into the MySQL bug tracker site and click the \"Affects Me\" button to hopefully increase the priority of implementing that feature.\n\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => true (the default), then parameters are not true parameters, they are string-substitutions into the SQL query before it is parsed. So what looks like a parameterized query really uses a string literal as far as MySQL is concerned, and the ->> operator is successful.\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => false, then parameters placeholders are parsed by MySQL during the prepare step. Since parameters are not supported as the argument to the ->> operator, this will fail.\nMysqli only supports true parameters, so it will always fail.\n",
        "Source": "https://stackoverflow.com/questions/77892840/php-prepare-json-selector-to-prevent-mysql-injection"
    },
    {
        "Title": "SQL-Injection in duckdb-queries on pandas dataframes",
        "Question": "In a project I am working with duckdb to perform some queries on dataframes. For one of the queries, I have some user-input that I need to add to the query. That is why I am wondering if SQL-Injection is possible in this case. Is there a way a user could harm the application or the system through the input? And if so, how could I prevent this case? It seems that duckdb has no PreparedStatement for queries on dataframes.\nI already looked up in the documentation (https://duckdb.org/docs/api/python/overview.html) but couldn't find anything useful. The method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\nThere is another question on stackoverflow (Syntax for Duckdb > Python SQL with Parameter\\Variable) about this topic but the answer only works on real sql-connections and the version with f-strings seems insecure to me.\nHere is a small code sample to show what I mean:\nimport duckdb\nimport pandas as pd\n\ndf_data = pd.DataFrame({'id': [1, 2, 3, 4], 'student': ['student_a', 'student_a', 'student_b', 'student_c']})\n    \nuser_input = 3  # fetch some user_input here\n    \n# How to prevent sql-injection, if its even possible in this case?\nresult = duckdb.query(\"SELECT * FROM df_data WHERE id={}\".format(user_input))\n\nSo how would you approach this problem? Is sql-injection even possible? Thanks for your help and feel free to ask for more details, if you need some more information!\nEDIT: Fixed a syntax error in the code\n",
        "Answer": "\nThe method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\n\nIt seems it's possible:\n>>> duckdb.execute(\"\"\"SELECT * FROM df_data WHERE id=?\"\"\", (user_input,)).df()\n\n   id    student\n0   3  student_b\n\n",
        "Source": "https://stackoverflow.com/questions/77884985/sql-injection-in-duckdb-queries-on-pandas-dataframes"
    },
    {
        "Title": "SQL injection error in Modsecurity logs in Plesk",
        "Question": "I am receiving the following error for 1 of my wordpress site running on a Plesk server.\n[client 000.00.00.000] ModSecurity: Access denied with code 403 (phase\n 2). Pattern match \"[\\\\\\\\[\\\\\\\\]\\\\\\\\x22',()\\\\\\\\.]{10}$|\\\\\\\\b(?:union\n\\\\\\\\sall\\\\\\\\sselect\\\\\\\\s(?:(?:null|\\\\\\\\d+),?)+|order\\\\\\\\sby\n\\\\\\\\s\\\\\\\\d{1,4}|(?:and|or)\\\\\\\\s\\\\\\\\d{4}=\\\\\\\\d{4}|waitfor\\\\\\\\sdelay\\\\\\\\s'\n\\\\\\\\d+:\\\\\\\\d+:\\\\\\\\d+'|(?:select|and|or)\\\\\\\\s(?:(?:pg_)?sleep\\\\\\\\(\\\\\\\\d+\n\\\\\\\\)|\\\\\\\\d+\\\\\\\\s?=\\\\\\\\s?(?:dbms_pipe\\\\\\\\.receive_message\\\\\\\\ ...\" at \nREQUEST_COOKIES:sbjs_first. [file \"/etc/httpd/conf/modsecurity.d/rules\n/comodo_free/22_SQL_SQLi.conf\"] [line \"66\"] [id \"218500\"] [rev \"18\"] \n[msg \"COMODO WAF: SQLmap attack detected||website name|F|2\"] [data \n\"Matched Data: |||id=(none) found within REQUEST_COOKIES:sbjs_first: \ntyp=typein|||src=(direct)|||mdm=(none)|||cmp=(none)|||cnt=(none)|||trm=\n(none)|||id=(none)\"] [severity \"CRITICAL\"] [tag \"CWAF\"] [tag \"SQLi\"] \n[hostname \"website name\"] [uri \"/wp-login.php\"] [unique_id \"ZamB-\n8j9IfDbYiJgRoahGwAAAAM\"], referer:\n\nWhen I visited some pages on the frontend it gives this error:\nServer Error\n403\nForbidden\nYou do not have permission to access this document.\nThat's what you can do\nReload Page Back to Previous Page Home Page\nI wonder if this a real attack? or false positive\nI was able to export the site to local. It seems working ok there.\n",
        "Answer": "CRS dev-on-duty here. Even if you don't use CRS rules and this is a problem of COMODO WAF rules, I'll try to help. While searching for the cookie name sbjs_first, I found this GitHub issue here, which is an indication that this sourcebuster cookie looks legitimate. Maybe you'll even the solution to your problem in one of the comments in this issue.\nIf this isn't the solution, you may need to tune the rules. Maybe you can also use our (CRS) documentation on false positives and rule tuning.\n",
        "Source": "https://stackoverflow.com/questions/77842169/sql-injection-error-in-modsecurity-logs-in-plesk"
    },
    {
        "Title": "Oracle SP Checkmarx SAST scan showing Parameter Tampering",
        "Question": "SP accepts key and returns flag status. In Checkmarx SAST scan key, It is saying parameter not validated before being used in query. Please help to understand what validation can be added so that it passes the vulnerability test.\nCreate procedure sp_name (key varchar2, v_flag out number) as\nv_key varchar2(50);\nv_sql clob;\nBegin\nIf key is null then\nv_flag:=-1;\nElse\nv_key:=sys.dbms_assert.enquote_literal(upper(trim(key)));\nv_key:=replace(v_key,'''');\nv_sql:=q'[select flag from tbl where key=:1]';\nExecute immediate v_sql into v_flag using v_key;\nEnd if;\nException when no_data_found then\nv_flag:=-1;\nEnd;\n\nI tried bind variable and dbms_assert but still it shows code is vulnerable\n",
        "Answer": "Stop using EXECUTE IMMEDIATE when you do not need to (and trying to make it overly complicated) and use a simple SELECT ... INTO ... statement with the PL/SQL variable as the bind variable (and give the PL/SQL variable a different name to the table's column).\nThe procedure can be simplified to:\nCREATE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  SELECT flag\n  INTO   v_flag\n  FROM   tbl\n  WHERE  key=v_key;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nThen, if you have the sample data:\nCREATE TABLE tbl (key, flag) AS\n  SELECT 'A',  1 FROM DUAL UNION ALL\n  SELECT 'B',  2 FROM DUAL UNION ALL\n  SELECT 'C',  3 FROM DUAL UNION ALL\n  SELECT NULL, 4 FROM DUAL;\n\nThen:\nDECLARE\n  v_flag TBL.FLAG%TYPE;\nBEGIN\n  sp_name('A', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('B', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('C', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('D', v_flag);\n  DBMS_OUTPUT.PUT_LINE('D: ' || v_flag);\n  sp_name(NULL, v_flag);\n  DBMS_OUTPUT.PUT_LINE('NULL: ' || v_flag);\nEND;\n/\n\nOutputs:\n\nA: 1\nB: 2\nC: 3\nD: -1\nNULL: -1\n\n\nOr, if you want it slightly more complicated to avoid the SELECT if the key is NULL then:\nCREATE OR REPLACE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  IF v_key IS NULL THEN\n    v_flag := -1;\n  ELSE\n    SELECT flag\n    INTO   v_flag\n    FROM   tbl\n    WHERE  key=v_key;\n  END IF;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nfiddle\n",
        "Source": "https://stackoverflow.com/questions/77841440/oracle-sp-checkmarx-sast-scan-showing-parameter-tampering"
    },
    {
        "Title": "What is the correct syntax for dollar-parameters in PostgreSQL queries?",
        "Question": "I am struggling with the correct syntax for a dollar-parameter. It sometimes works, sometimes not.\nI am using the 'pg' package for NodeJS, but since AFAIK parsing the query happens on the server side, I don't expect this to matter.\nCode:\nconst client: PoolClient = ...;\nawait client.query('SELECT \\'foo\\' = $1', [projectId]);\nawait client.query('SET \"gvc.currentProjectId\" = $1', [projectId]);\n\nThe first query is obviously useless, but I added it to experiment with the syntax. An error occurs in the second query, so the first one seems to work. The second one fails with:\nunexpected exception error: syntax error at or near \"$1\"\n\nIs it even possible to use dollar-parameters in the value for SET? I want to secure my application against SQL injection attacks, so manually escaping the projectId is a last resort.\n",
        "Answer": "As explained in https://dba.stackexchange.com/a/333947, SET can indeed only take literal values, no parameters or query results. That post links to the set_config command, which does not have such a restriction.\nhttps://pgpedia.info/s/set_config.html\n\nNeither the post not the documentation explain why both exist, nor why SET cannot take parameters since set_config demonstrates that it is possible to do so.\nSimply using set_config over SET solves the problem.\n",
        "Source": "https://stackoverflow.com/questions/77839814/what-is-the-correct-syntax-for-dollar-parameters-in-postgresql-queries"
    },
    {
        "Title": "How do I write prepared statements in ballerina?",
        "Question": "Is there a way to write prepared statements for SQL in ballerina? or is it a good practice to use the following method for that?\nfunction selectUserQuery(string username) returns sql:ParameterizedQuery => `SELECT * FROM users WHERE user_name=${username}`;\n\n",
        "Answer": "In ballerina sql:ParamerterizedQuery works as a prepared statement. (this differs a little from other languages as ballerina mandates giving the variable order, when writing the statement itself)\nYes, using functions is the best practise to keep SQL statements in ballerina.\nFor the sake of completeness, I would like to quote the following from this article.\nConsider the below statement,\nsql:ParameterizedQuery selectQuery = `SELECT * FROM users WHERE user_name=${username}`;\nBallerina executes this query in multiple steps,\n\nTemplate the query:\nThe sql module will replace the insertions in the query using ?. (e.g. `SELECT * FROM users where user_name=?`) Here, all insertions in the query are considered to be user inputs.\n\nThe database compiles the query:\nThe database validates the templated SQL query for syntax and semantics (column availability, authorization) errors. Finally, the server parses the query.\n\nPlaceholder replacement:\nThe programme sends all the user data values to the database. The database will replace the placeholders at this point. However, since the query is pre-compiled, even if the database appends the values, the scope of the execution will not change. i.e. SQL Injection cannot turn a SELECT command into a DELETE.\n\nQuery execution.\n\n\n",
        "Source": "https://stackoverflow.com/questions/77763194/how-do-i-write-prepared-statements-in-ballerina"
    },
    {
        "Title": "Problem with identical metrics results after machine learning",
        "Question": "When trying machine learning on a dataset, I got the same results for metrics such as accuracy and F-score on different machine learning algorithms.\nI have a dataset on which I trained my chosen algorithms. I found it on the Kaggle website: source.\nHere are code snippets from the Jupiter file, and the results of their execution:\nList of connected libraries\nIN:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report\nimport joblib\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras import models, layers\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nLoading dataset\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\ndf.head(10)\n\nLoad, process and split the data for further training of the classification model\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\n\ndf = df[(df['attack_type'] == 'sqli') | (df['attack_type'] == 'norm')]\n\nX = df['payload']\ny = df['label']\n\nvectorizer = CountVectorizer(min_df = 2, max_df = 0.8, stop_words = stopwords.words('english'))\nX = vectorizer.fit_transform(X.values.astype('U')).toarray()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)\n\nOUT:\n(8040, 1585)\n(8040,)\n(2011, 1585)\n(2011,)\n\nNaive Bayes Classifier\nIN:\nnb_clf = GaussianNB()\nnb_clf.fit(X_train, y_train)\ny_pred = nb_clf.predict(X_test)\nprint(f\"Accuracy of Naive Bayes on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Naive Bayes on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of Naive Bayes on test set : 0.9806066633515664\nF1 Score of Naive Bayes on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       0.97      0.98      0.97       732\n        norm       0.99      0.98      0.98      1279\n\n    accuracy                           0.98      2011\n   macro avg       0.98      0.98      0.98      2011\nweighted avg       0.98      0.98      0.98      2011\n\nRandom forest algorithm:\nIN:\nrf_clf = RandomForestClassifier()\nrf_clf.fit(X_train, y_train)\ny_pred_rf = rf_clf.predict(X_test)\nprint(f\"Accuracy of Random Forest on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Random Forest on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred_rf))\n\nOUT:\nAccuracy of Random Forest on test set : 0.9806066633515664\nF1 Score of Random Forest on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.96      0.98       732\n        norm       0.98      1.00      0.99      1279\n\n    accuracy                           0.99      2011\n   macro avg       0.99      0.98      0.99      2011\nweighted avg       0.99      0.99      0.99      2011\n\nSupport vector machine\nIN:\nsvm_clf = SVC(gamma = 'auto')\nsvm_clf.fit(X_train, y_train)\ny_pred = svm_clf.predict(X_test)\nprint(f\"Accuracy of SVM on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of SVM on test set: {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of SVM on test set : 0.9189457981103928\nF1 Score of SVM on test set: 0.8658436213991769\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.76      0.87       689\n        norm       0.89      1.00      0.94      1322\n\n    accuracy                           0.92      2011\n   macro avg       0.95      0.88      0.90      2011\nweighted avg       0.93      0.92      0.92      2011\n\nAs you can see when training on different machine learning algorithms, we get the same results in the case of random forest and naive Bayesian classifier.\nI hope you can help me to fix a possible bug in the code or improve it in some way.\n",
        "Answer": "In your code for Random Forest, you're storing predictions as y_pred_rf but calling your metrics on y_pred\n",
        "Source": "https://stackoverflow.com/questions/77686328/problem-with-identical-metrics-results-after-machine-learning"
    },
    {
        "Title": "WordPress sql injection",
        "Question": "Thanks for letting me post here, I'm just starting to learn programming.\nI have a problem with a WordPress site which I update for my dad's local motorcycle road safety training group, which is run as a charity/non-profit by volunteer instructors. The hosting company (LCN) has taken the site down and emailed the group the following:\n\n\nDomain name : kamg.org.uk\nDatabase : kamg_org_uk_dbtest\nMySQL Server : database3.lcn.com\nOur monitoring scripts have detected an SQL injection attack occurring on your web site kamg.org.uk, using exploitable code hosted there.\nThe SQL queries that have been flagged as suspicious/malicious are listed here :\n----- BEGIN REPORT -----\nTIME RUNNING: 01:34:02\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\nTIME RUNNING: 01:34:00\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\n----- END REPORT -----\n\nWP, plugins and theme are all kept up to date at all times.\nCan I safely just delete those lines from the database to clean the site?\nLCN offer the group free charity hosting but I have found over 1600 domains share the same server. Once the sql injection is cleaned the group will move to managed WP hosting in the hope it will be more secure.\nThx,\nNiels\nI have tried reinstalling WordPress by FTP, but the hosts have denied the attempt, having removed all permissions.\nTheir support is appalling, taking 4 days to respond to queries, and then answering the wrong question with a cut & paste stock response.\nI have just started learning, but I'd be happy to go in and edit files (with some nervousness) but haven't attempted anything at this stage.\n",
        "Answer": "It's not the data that is at fault, it's something in the code of WordPress, or more likely one of the plugins or themes you have installed.\nThe way the code works is something like this:\n$query = 'SELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key,\n  wp_usermeta.meta_value \nFROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"' . $variable . \n  '\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" \n  AND wp_users.ID = wp_usermeta.user_id';\n\nBut the value of $variable has been exploited by some attacker. They set it to the following string:\n\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\n\n(even including the quote characters.)\nWhen the variable is concatenated into the query, it causes the SQL query to have extra expression terms, that the attacker injected.\nIt looks like they're forcing sleep() calls to test if certain tables exist. They'll use this method to learn all your table names. Then they'll use information in subsequent attacks, to read those tables. SQL injection hackers have to probe using techniques like this to try to avoid detection.\nThe original query may be a normal part of the code of WordPress or one of the plugins or themes. But the programmer made a mistake by concatenating a variable whose value was set from untrusted input. Programmers aren't supposed to do this, but many are either unaware of the risk, or else they think it won't happen to their code.\nYou said you are up to date on all the versions of WordPress and plugins, but the vulnerability may exist in the current version. In other words, no newer version with a fix has been released (yet).\nSometimes it doesn't help to update the software, because the newest version has introduced a new vulnerability that didn't exist before. Programmers add new code in every version, and security vulnerabilities are the result of mistakes made by software developers. New vulnerabilities occur regularly.\nWordPress itself is pretty well tested, that's why I suppose the vulnerability may be in a plugin or theme. I don't know which plugins you use.\nOr you may have added custom code that has the vulnerability, so there is no other person who will update it. It's up to you.\nWhat you have to do now is figure out which line of code, not data, is responsible for the vulnerability. If you don't have the skills to do this (basically a text search across many files to find a line of code similar to the one I showed above), then you need to employ someone to help you.\nOnce you find the line of code responsible, either fix it yourself, or if it's in a plugin you could just uninstall that plugin to remove the vulnerable code.\nIt sounds like your hosting company isn't going to help. They probably have very little resources to provide customer service in this case. Even if you fix the code, it sounds like it will be a struggle to get them to allow you to restore your website.\nYou may need to find a new hosting provider if your current one won't communicate or let you have access to your site.\nBut a different hosting provider won't be more secure, because the fault is not with the hosting provider. The fault is in the code you are using.\nIf you install the same code on the current provider or another provider without fixing it, the code will still be vulnerable to hacks. If you upload code you know is vulnerable, then it'll be your fault.\n",
        "Source": "https://stackoverflow.com/questions/77602811/wordpress-sql-injection"
    },
    {
        "Title": "Protects dplyr against SQL injections?",
        "Question": "I would like to use R-Shiny to develop a web app that accesses an SQL database with sensitive data.\nSo far I have written the database query as a pure SQL string.\nHowever, this approach is very susceptible to SQL injections.\nMy intention is therefore to write the database query with dplyr, as the query is written in R and not in pure SQL.\nUnfortunately, I have not yet been able to find any more detailed information or an estimate on this topic online. Therefore I would like to clarify my request in this question.\nSo far I have only read a statement about the dbplyr::translate_sql() function that is supposed to protect SQL injections:\nhttps://dbplyr.tidyverse.org/articles/sql-translation.html#vectors\nAs my data is very confidential, dbplyr / dplyr should provide 100% protection against SQL injections.\nI would be very pleased to receive further information and assessments on this topic.\nUPDATE\nAs suggested in the comments, I have added an example for reproducibility:\n(adapted from: https://shiny.posit.co/r/articles/build/pool-dplyr/)\nlibrary(shiny)\nlibrary(DBI)\nlibrary(pool)\nlibrary(tidyverse)\nlibrary(dbplyr)\n\npool <- dbPool(\n  drv = RMySQL::MySQL(),\n  dbname = \"shinydemo\",\n  host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",\n  username = \"guest\",\n  password = \"guest\")\n\nui <- fluidPage(\n  textInput(\"ID\", \"Enter your ID:\", \"5\"),\n  tableOutput(\"tbl\"),\n  numericInput(\"nrows\", \"How many cities to show?\", 10),\n  plotOutput(\"popPlot\"))\n\nserver <- function(input, output, session) {\n  output$tbl <- renderTable({\n    pool %>% tbl(\"City\") %>%\n      filter(ID == !!input$ID)\n  })\n  output$popPlot <- renderPlot({\n    df <- pool %>% tbl(\"City\") %>%\n      head(as.integer(input$nrows)[1]) %>% collect()\n    pop <- df$Population\n    names(pop) <- df$Name\n    barplot(pop)\n  })\n}\n\nshinyApp(ui, server)\n\n",
        "Answer": "The threat of SQL injection depends on how the user-provided text is incorporated into the dynamic SQL query. So if you are trying to protect against injection, you need to assess each of the ways user input is used when querying the database.\nIn the example you have posted there are two pieces of user input:\n\ninput$nrows which is limited to numeric by the input widget\ninput$ID which is free text, and hence has greater risk of SQL injection.\n\nYou can use any of the approaches below to investigate each piece of user input. Overall, the approach I would choose is to Sanitise and then Review.\nThis answer focuses on the case where you are using dbplyr to translate from R to SQL. If other approaches are used to access the database (such as the DBI package) then a different approach will be required.\n\nOption 1) Review the SQL query that is generated\nConsider where input$ID is used in the example code:\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID)\n\nIn order to execute this, dbplyr will translate the dplyr commands from R into SQL. We can review this translation using the show_query command.\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID) %>%\n  show_query()\n\nThis will probably produce an SQL query similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value'\n\nYou do not need the entire Shiny app to test this for SQL injection. You can simply vary this query and see what happens. For example, try a simple alternative query:\nattempt_inject = 'my_id_value;SELECT 123'\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!attempt_inject) %>%\n  show_query()\n\nI suspect this will produce SQL similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value;SELECT 123'\n\nWhich would seem an effective prevention for SQL injection. But you will need to test this as thoroughly as required to ensure you are confident.\n\nOption 2) Review source code\nThe dbplyr package is open source and available online. You could review the source code to confirm how inputs are handled during translation.\nMy suspicion is that unless inputs are of type sql, then they will be escaped as either text or an SQL object.\nThere is an sql() function that converts input to type sql. One of its uses is to tell dbplyr not to translate the contents of the function but to use them as-is. This means that if your user can submit R objects as inputs then this is a significant area of vulnerability. However, this is unlikely to be the case as your app restricts users to submitting text and numeric input.\n\nOption 3) Sanitise your inputs before passing them to dbplyr\nR has several advantages over pure SQL, in that you can use R to validate users' input before including it in a dbplyr query.\nConsider this an an alternative to your output$tbl component of the app:\noutput$tbl <- renderTable({\n  current_ID = as.character(input$ID)\n  acceptable_ids = pool %>%\n    tbl(\"City\") %>%\n    select(ID) %>%\n    distinct() %>%\n    collect() %>%\n    pull()\n  req(current_ID %in% acceptable_ids)\n\n  pool %>%\n    tbl(\"City\") %>%\n    filter(ID == !!current_ID)\n})\n\nThis approach enforces that the user input is converted to type character and is a value found in the ID column, before passing the user input through to dbplyr.\nThe exact choice of checks will depend on how user input is used. I often include a check that user input does not contain special characters (such as ;{}[]* or spaces).\ndbplyr includes commands to delimit certain inputs. Investigate and use these commands where applicable.\nNotes\n\nreq is a Shiny command that stops execution of a component if the condition is not met. You can use stopifnot outside a Shiny context.\nFetching the list of acceptable ids within the renderTable statement is not efficient app design. This should be calculated once and reused multiple times.\n\n",
        "Source": "https://stackoverflow.com/questions/77598340/protects-dplyr-against-sql-injections"
    },
    {
        "Title": "Interfacing with &quot;API&quot; that only takes raw SQL: Node / pSQL sanitization without prepared statements or parameterization?",
        "Question": "I am working with an \"API\" provided by a client's ERP. They do not have actual endpoints, rather a REST endpoint that you can send raw sql queries to, that they then execute. To make matters even worse, they only recently upgraded to https.\nI am writing some Node cloud functions to interface with this system. There will be two roles working with this product, and I need to prevent the role with less permissions to fire unwanted queries in the application when they are searching with specific parameters.\nFor filtering, I can just check if the values are in an array of allowed terms, but with a search I am not quite sure how to approach this. My general opinion has always been to use parameterized statements, but that is not an option here as I can't actually establish a connection to their database. I also saw some posts where people suggested wrapping the strings in dollar signs since the underlying DB is PostgreSQL, but I could not find anything in the documentation for this purpose.\nI was also thinking about only allowing alpha-numeric characters, but this seems like a potentially weak approach. If anyone knows of any libraries or ideas for dealing with this situation, I would greatly appreciate it.\nI tried looking for a Node library or piece of documentation that could help this situation, but I could not find anything relevant.\n",
        "Answer": "I found this interesting post around the question: https://security.stackexchange.com/questions/172297/sanitizing-input-for-parameterized-queries.\nTo summarize it, doing data sanitization(more like general validation) is always good idea but it will not necessarily guarantee that query will be safe. Directly running queries without parameterized statements will be still quite a big risk even if you find some great library for cleaning data to make it SQL safe.\nInstead try to think of ways to not run user input directly. Add some kind of mapper in between which will accept some filter codes and translate it into SQL values. For example if I had delivery company and wanted to filter all deliveries with status delivered, I would use mapping like this:\nconst status_code = \"DELIVERED\"\nconst statusMapper = {DELIVERED: \"delivered\"(value to filter in sql)}\n\nAnd if my mapper does not find the exact match, return error or empty result and don't run the query at all. If its search bar, try to identify most frequent search keywords and build mapper for that. Obviously it will not be too accurate, but still better than having risk of sql injection, especially if you work with sensitive and important data(I assume you work with company's internal data since you integrate with ERP).\n",
        "Source": "https://stackoverflow.com/questions/77516509/interfacing-with-api-that-only-takes-raw-sql-node-psql-sanitization-without"
    },
    {
        "Title": "Dremio SQL injection vulnerability",
        "Question": "I'd like to query an S3 storage containing parquet files through my Spring Java app with Dremio. These are dynamic queries with user given parameters.\nI use Apache Arrow SQl driver and simply run queries by a JdbcTemplate instantiated with a DataSource from the following properties:\n  driver-class-name: org.apache.arrow.driver.jdbc.ArrowFlightJdbcDriver\n  url: jdbc:arrow-flight-sql://localhost:32010/?useEncryption=false\n  username: user\n  password: pwd\n\nFor the sql string I use a String formatted with the user given value:\n\"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = '%s';\".formatted(userInput)\n\nIt works well but needless to say how big of an SQL injection opportunity it is. If I try to use a Prepared Statement:\nString sql = \"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = ?\"\njdbcTemplate.query(sql, ps -> ps.setString(1, userInput), rs -> {\n  //handling the result set\n});\n\nI get the following error:\ncfjd.org.apache.arrow.flight.FlightRuntimeException: Cannot convert RexNode to equivalent Dremio expression. RexNode Class: org.apache.calcite.rex.RexDynamicParam, RexNode Digest: ?0\n\nI'm finding ambiguous information on the web. The claim that Dremio doesn't support prepared statements could be found in some forums, but all of these comments are several years old*, moreover the official Dremio site has an article recommending the usage of prepared statements..\nAs far as I know Dremio uses ANSI SQL under the hood, which I believe supports prepared statements. Or does that depend on the database engine and not the dialect? Can anyone confirm that it is still not possible with Dremio? Then I'll stop pursuing it further.\nIf that's the case, I will escape the unsafe characters, use a dictionary for encoding and decoding user given characteres, etc.\nIf you have some other advices or experiences mitigating SQL injection without prepared statements though, I would appreciate them as well!\nThank you!\n*latest update I found: https://community.dremio.com/t/sql-parameterization-support/1733/5\n",
        "Answer": "I'll post my findings as an answer, maybe it could be useful for someone in the same boat:\nIn lack of any other ideas I went down the encode/decode road.\nFor that the initial idea was to use an own dictionary, but I figured that hexadecimal encoding should be sufficient enough.\nLuckily Dremio SQL has a FROM_HEX function, which can return a BINARY value for the given hexadecimal string.\nWith that I can (so far..) safely build dynamic queries with any kind of user given input turned into HEX strings and then converting back at execution time, with the function behaving kind of like a wrapper.\nStill, this isn't a perfectly calming solution, but as far as I can see, there isn't really a better option at the moment. I heard Dremio will implement prepared statements (quite a shock that they haven't already), until then, let's hope for the best!\n",
        "Source": "https://stackoverflow.com/questions/77501615/dremio-sql-injection-vulnerability"
    },
    {
        "Title": "SQL Injection in Stored Procedures via MySQL Connector",
        "Question": "I use the mysql-connector-python driver for executing database operations. Recently, I came across stored procedures in MySQL and decided to migrate some of my APIs from utilizing cursor.execute() to cursor.callproc(proc_name, args=()). This transition has proven successful, and everything works seamlessly. However, I'm uncertain about the vulnerability of these stored procedures to SQL injection.\nTo assess this, I created a test stored procedure and examined its susceptibility to SQL injection payloads.\nStored Procedure:\nDELIMITER //\nCREATE PROCEDURE TestProcedure(IN arg_test VARCHAR(150))\n  BEGIN\n    IF EXISTS (SELECT 1 FROM Random_Table WHERE test = arg_test) THEN\n        SELECT 'success' AS message;\n    ELSE\n        SELECT 'failed' AS message;\n    END IF;\n  END //\nDELIMITER ;\n\nPayloads:\n\n' or 1=1 -- \n\" or 1=1 -- \n\nSurprisingly, none of these payloads yielded any successful results. Seeking further assurance, I consulted one of the database administrators in the company. Although he expressed uncertainty, he suggested that these stored procedures function similarly to prepared statements. This aligns with my observation that the cursor.callproc() method accepts user inputs as arguments via the args parameter, resembling prepared statements.\nIf this interpretation is accurate, it implies that using the cursor.callproc() method ensures a secure backend, free from SQL injection concerns. Despite these positive indications, I would like to seek additional confirmation here to guarantee the safety of this approach.\n",
        "Answer": "Like it often happens, the problem is in the terminology. And it creates a lot of trouble (and vulnerabilities). A programmer should be always strict in their definitions.\nWhat you are talking about here is using stored procedure's parameter. Such a parameter is a special case related to stored procedures, and very similar in nature to SQL variables.\nIn this case your database doesn't add the contents of arg_test into the SQL body (as it would have been in python if you did something like + arg_test +) and then evaluate the resulting SQL. On the contrary, is uses arg_test as though it's a variable (in this sense, it's indeed similar to prepared statements, but technically it's entirely different matters).\nWhile speaking of stored procedures, they are irrelevant to injections. By itself, just using a procedure doesn't guarantee anything. One can write a procedure which is immune to injection, and write another which is prone to injection. Just like any other code.\nBut as long as you are just using a parameter passed to the procedure - it's safe.\n",
        "Source": "https://stackoverflow.com/questions/77500796/sql-injection-in-stored-procedures-via-mysql-connector"
    },
    {
        "Title": "Protection query against SQL injection, using PDO",
        "Question": "may I ask you how to make this protected against sql injection?\nI have\n$podminkazeme = \"\";\n$podminkakraj = \"\";\n\nif ( isset( $_GET[ \"zeme\" ] )and !empty( $_GET[ \"zeme\" ] ) ) {\n   $podminkazeme = \"and nb.zemehledani in (\" . str_replace( '%2C', ',',  $_GET[ \"zeme\" ] ) . \")\";\n};\n\nif ( isset( $_GET[ \"kraj\" ] )and !empty( $_GET[ \"kraj\" ] ) ) {\n  $podminkakraj = \"and nb.krajhledani in (\" . str_replace( '%2C', ',', $_GET[ \"kraj\" ]  ) . \")\";\n};\n\n$conn = new PDO( DB_DSN, DB_USERNAME, DB_PASSWORD );\n$sqljednotkaa = \"\n  select nb.*, \n    dv.nazev as developer, \n    UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, \n    UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, \n    uz.nazev as skladUpravil, \n    uzm.nazev as makler, \n    tp.nazev as typProdeje, \n    dal.nazev as nazevdalnice\n  from nabidka nb \n  left join uzivatele uz on uz.id=nb.skladUpravil \n  left join uzivatele uzm on uzm.id=nb.makler \n  left join typProdeje tp on tp.id=nb.typProdeje \n  left join developer dv on dv.id=nb.developer\n  left join dalnice dal on dal.id=nb.dalnice \n  where nb.emptyid is null \n    $podminkaid \n    $podminkastav \n    $podminkaupraveno \n    $podminkavelikost \n    $podminkacena \n    $podminkamakler \n    $podminkaexport \n    $podminkatypprodeje \n    $podminkatypnemovitosti \n    $podminkazeme \n    $podminkadalnice \n    $podminkakraj \n    $podminkaokres \n    $podminkadeveloper \n    $podminkatechnickeparametry \n    $podminkahledanislovo \n  order by nb.emptyid asc $razenipodminka\";\n\n$stjednotkaa = $conn->prepare( $sqljednotkaa );\n$stjednotkaa->execute();\n\n",
        "Answer": "Try this\n$conditions = [];\n$parameters = [];\n\nif (isset($_GET[\"zeme\"]) && !empty($_GET[\"zeme\"])) {\n    $zemeValues = explode(',', $_GET[\"zeme\"]);\n    $conditions[] = \"nb.zemehledani IN (\" . implode(', ', array_fill(0, count($zemeValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $zemeValues);\n}\n\nif (isset($_GET[\"kraj\"]) && !empty($_GET[\"kraj\"])) {\n    $krajValues = explode(',', $_GET[\"kraj\"]);\n    $conditions[] = \"nb.krajhledani IN (\" . implode(', ', array_fill(0, count($krajValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $krajValues);\n}\n\n$conn = new PDO(DB_DSN, DB_USERNAME, DB_PASSWORD);\n$sqljednotkaa = \"SELECT nb.*, dv.nazev as developer, UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, uz.nazev as skladUpravil, uzm.nazev as makler, tp.nazev as typProdeje, dal.nazev as nazevdalnice from nabidka nb left join uzivatele uz on uz.id=nb.skladUpravil left join uzivatele uzm on uzm.id=nb.makler left join typProdeje tp on tp.id=nb.typProdeje left join developer dv on dv.id=nb.developer left join dalnice dal on dal.id=nb.dalnice where nb.emptyid is null\";\nif ($conditions) {\n    $sqljednotkaa .= \" AND \" . implode(\" AND \", $conditions);\n}\n$sqljednotkaa .= \" ORDER BY nb.emptyid ASC $razenipodminka\";\n$stjednotkaa = $conn->prepare($sqljednotkaa);\n$stjednotkaa->execute($parameters);\n\n",
        "Source": "https://stackoverflow.com/questions/77416426/protection-query-against-sql-injection-using-pdo"
    },
    {
        "Title": "Enforcing row-level security in a shared postgres pool",
        "Question": "I'm working on a typical client-server webapp. It is using a system somewhat like GraphQL where the client has some flexibility in specifying what data it needs, without custom API endpoints for every type of data. The server is running node, and is using node-postgres with a typical pg.Pool. A client could send something like this:\n{select: '*', from: 'expenses', where: {'op': 'gt', 'lhs': 'expenses.amount', 'rhs': 20}}\n\nwhich would be translated to SELECT * FROM expenses WHERE expenses.amount > $1 (given $1 = 20). With enough care, this system can be made safe from injection attacks.\nI'd also like to incorporate row-level security policies. For example:\ncreate policy only_see_own_expenses on expenses using (expenses.user_id = <USER ID>);\n\nAs an extra security barrier, I want to make sure that even if an injection attack is succesful, a client can not \"unset\" its user ID.\nI've seen <USER ID> been defined in a few ways:\n\ncurrent_user, in which case every user of the app also needs a postgres user/role\nAn arbitrary setting like current_setting('myapp.user_id') in combination with a SET LOCAL myapp.user_id = ... at the start of a transaction\n\nApproach (2) seems most flexible to me. I'd just wrap every generated SQL query in a BEGIN; SET LOCAL myapp.user_id = 123; {generated query}; END;. The problem is that an attacker could inject another SET LOCAL statement, and impersonate another user.\nIn approach (1) you can similarly wrap every generated query with a SET ROLE ... statement at the start, yielding the same problem. An alternative is to create a new connection for each query with that specific role. I believe postgres would never allow that connection to switch to another role. But setting up a new connection per query would result in a lot of overhead.\nHow do I enforce row-level security without the performance hit of a new connection per query?\n",
        "Answer": "As you observe, setting a placeholder parameter and using SET LOCAL ROLE to temporarily assume a different role can be subverted by attackers who can execute arbitrary SQL, like in an SQL injection attack.\nI don't think that there is a way to accomplish what you want that is safe from SQL injection. The problem is a fundamental one: you handle authentication in the application, not in the database (where you are using a single application user to benefit from connection pooling), but you want to have the database handle authorization via row-level security. That requires a way for the application to tell the database what the application user is. Now the only way that the application can tell the database anything is by using SQL, and an attacker who can run arbitrary SQL statements can always subvert that.\nI think that the only option for you is to harden your application against SQL injection attacks.\n",
        "Source": "https://stackoverflow.com/questions/77272972/enforcing-row-level-security-in-a-shared-postgres-pool"
    },
    {
        "Title": "SQL Injection - Python - MySQL",
        "Question": "Basically,\nI'm trying to find ways to explore SQL Injection vulnerabilities in  the code presented below. The code has another layer, presentation, where it asks the user for board_name input.\nTable_name is an inside variable, user doesn't have control over it.\n    def find_board_by_name(cls, connector, board_name, table_name: str):\n        query = \"SELECT * FROM {} WHERE name = '{}'\".format(table_name,board_name.title())\n        print(query)\n        try:\n            connector.mycursor.execute(query)\n            res = connector.mycursor.fetchone()\n            if res:\n                return res[1]\n            return None\n        except Exception as e:\n            raise e\n        \n\nTried to :\n1- board_name as:          ' OR '1'='1\nIt worked, program returned to me me first item on the table (it wasn't supposed to, since I didn't provide any name)\n2- Tried to put board_name as:          ';Delete Table BoardGames;\nIt didn't work, mysql.connector.errors.InterfaceError: Use multi=True when executing multiple statements was presented to me.\nSo my question is \" mysql.connector\" is protecting me against the majorities of the SQL Injections? Since I didn't set the \"multi\" tag in the code to True?  Could you show me other ways to explore vulnerabilities in this code? Besides the 1 and 2.\nI guess I know how to fix the SQL Injection problem: \"connector.mycursor.execute(query, values)\" probably will do the job.  But, I'm trying to understand better what kind of SQL Vulnerabilities I would have with this original code without this fix.\n",
        "Answer": "SQL injection isn't always malicious. It could result in a simple error instead of deleting all the student records.\nFor example, if some legitimate user of your site is named \"O'Reilly\" then your code formatting would have an imbalanced quote, which would be a syntax error:\nSELECT * FROM tablename WHERE name = 'O'Reilly'\n                                       ^ wtf\n\nUsing parameters avoids this kind of problem. Query parameters aren't just a quick way of interpolating variables. They either escape special characters in the dynamic content (by default Python does this), or else full-blown parameters keep the values separate from the SQL query until after it has been parsed by the SQL server. So no special characters can ever cause a syntax error.\nBut table names and other identifiers cannot be parameters. You can use parameters only in place of SQL values, like your quoted string in your example.\nYou said the user is not in control of the table name variable. That's great, but not sufficient.\nWhat if another programmer on your project isn't careful when calling your find_board_by_name() function, and inadvertently passes unsafe content as the table name? Note that unsafe content is more than just user input.\nWhat if the table name is a reserved keyword in SQL?\nSELECT * FROM order WHERE name = ?\n              ^ syntax error\n\nWhat if the table name contains whitespace or punctuation? There are other risks.\nYou should code your function so it does not trust its caller. For SQL values, do use parameters of course. For other dynamic elements like table names, you do have to interpolate variables into the SQL string, but you can be defensive:\n\nUse an allowlist to verify the table name is a legitimate known table name.\n\nDelimit the table name in back-ticks in your SQL, just in case it's a reserved word or not a simple identifier.\nlegit_table_names = Set(['table1', 'table2', 'table3'])\nif table_name not in legit_table_names:\n  return error # pseudocode\n\nquery = f\"SELECT * FROM {table_name} WHERE name = %s\"\n\n\n\n(I prefer f-strings instead of format() in modern Python)\n",
        "Source": "https://stackoverflow.com/questions/77167563/sql-injection-python-mysql"
    },
    {
        "Title": "PHP Code Functioning as Intended but UNION Injection Payload Doesn&#39;t Work",
        "Question": "I am attempting to make a web application (LAMP stack - MySQL version: 8.0.36-0ubuntu0.22.04.1) that is vulnerable to a SQL UNION Injection attack (or some type of SQL injection attack). The code takes the user's input via POST parameters to get the VIN & mileage.\nThe following PHP Code handles the backend to adding the parameters to the database:\n// If SESSION variables are set then proceed to Mileage.php\n    if (isset($_SESSION['username'])) {\n        // PHP Code for Handling ADDING CAR\n        // Declare Variables\n        $username = $_SESSION['username'];\n        $vin = $_POST['vehicle'];\n        $mileage = $_POST['mileage'];\n\n        // Implement Try-catch for Error Hanlding\n        try {\n            // Add Mileage\n            if(isset($_POST['add_data'])) {\n                $query = \"INSERT INTO mileage_master.mileages (`username`, `VIN`, `mileage`) VALUES ('$username', '$vin', '$mileage')\";\n                $query_result = mysqli_query($db,$query);\n    \n            // Update Mileage\n            } elseif(isset($_POST['update_data'])) {\n                // Query to update associated VIN's Mileage\n                $update = \"UPDATE mileage_master.mileages SET mileage='$mileage' WHERE username='$username' AND VIN='$vin'\";\n                $update_result = mysqli_query($db,$update);\n            // Remove Mileage\n            } elseif(isset($_POST['remove_data'])) {\n                // Query to Remove VIN & Mileage\n                $remove = \"DELETE FROM mileage_master.mileages WHERE username='$username' AND VIN='$vin'\";\n                $remove_result = mysqli_query($db,$remove);\n            }\n        }\n        catch (mysqli_sql_exception $e) {\n            $showAlert = true;\n            // Display Syntax Error\n            $errorMessage = \"My SQL Error: \" . $e->getMessage();\n            // Display Query (Intentional Unsafe Coding Practices)\n            $errorMessage .= \"\\t||\\tQuery: \" . $sql;\n        }\n\n        \n    }    \n    else {\n        header(\"Location: /\");\n    }\n?>\n\nThe following PHP code prints the VIN & mileage to user's page:\n<?php\n    // Query to get all VINs associated with username\n    $result = mysqli_query($db,\"SELECT * FROM mileages WHERE username='$username'\");\n\n    echo \"<table style='margin-top: 35px;'>\";\n    echo \"<tr><th>VIN</th>\";\n    echo \"<th>Mileage</th></tr>\";\n\n    // While Loop to iterate through all returned rows\n    while($row = mysqli_fetch_assoc($result)) {\n        echo \"<tr style='text-align: center;'>\";\n        // VIN\n        echo \"<td>\" . $row['VIN'] . \"</td>\";\n        // Mileage\n        echo \"<td>\" . $row['mileage'] . \"</td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n?>\n\nMy thought process was that because the application uses dynamic queries an attacker could include some type of UNION SELECT statement. The UNION select statement's output would be stored within the VIN column for that query.\nHowever, I am unable to create a successful SQL Injection payload that would accomplish this.\nQuestion\nDo I need to change the logic of my application to make the exploit possible or is my idea not exploitable in the first place?\n",
        "Answer": "You can't get SQL injection in the SELECT query, since the user doesn't have control over the $username variable, and that's the only thing you substitute. But you can do it in the INSERT query, to insert extra rows in the table with arbitrary values.\nIt needs to terminate the current value list, then it can use a subquery in another value list, and finally it has to provide the beginning to match the end of the original value list.\n$vin = \"12345', '20'), ('baduser', (SELECT '67890'), (SELECT '30')), ('baduser2', '1111\";\n\nThis will put a bogus VIN and mileage into the row for $username, then insert additional rows for baduser and baduser2. baduser2 will get another bogus VIN and the mileage from the parameter.\nbaduser can use subqueries to get its VIN and mileage values, as long as the subqueries each only return one row and column. I used literals in the above example, but you can make them arbitrarily complex.\n",
        "Source": "https://stackoverflow.com/questions/78093937/php-code-functioning-as-intended-but-union-injection-payload-doesnt-work"
    },
    {
        "Title": "How to fix SQL injection if we have to use DB name dynamically in SQL Server?",
        "Question": "This is the implementation in code: the schema name comes from a configuration file and is different for each environment. Sonar throws SQL injection alert at this statement:\nselect * \nfrom dbName.dbo.stu_name;     <<dbname is the variable that comes from property file>>\n\nI tried these solutions:\n\nUsing query.setParameter(?,dbname). Tried passing dbname dynamically and vulnerability was fixed. When debugging, the query was throwing an error and did not execute.\n\nUsed String.format(select * from \\'%s\\',tablename.replace(\"\\'\",\"\\'\\'\")) - vulnerability fixed, but query failed to execute\n\n\nI tried various other solutions and nothing worked.\nCan anyone please help me with this?\n",
        "Answer": "The \"best\" defence you can do is not use dynamic SQL. Considering that this is the database that's dynamic, and based on a prior question, I would suggest that this is occurring from an application, so that means you don't need 3-part naming. Instead you parametrise the database name in the connection string and use 2-part naming; no dynamic SQL needed.\nIf you must use dynamic SQL, then the \"best\u2122\ufe0f\" defence would be to validate the database name, and then ensure you properly quote the database name when you inject it into your dynamic statement.\nHere I validate the database name in sys.databases and then use QUOTENAME to quote the name appropriately. If the database doesn't exist, no query is run (and no error is returned):\nDECLARE @DatabaseName sysname = N'YourDatabaseName';\n\nDECLARE @SQL nvarchar(MAX);\nSELECT @SQL = N'SELECT * FROM ' + QUOTENAME(d.name) + N'.dbo.stu_name;'\nFROM sys.databases d\nWHERE d.name = @DatabaseName;\n\nEXEC sys.sp_executesql @SQL;\n\n",
        "Source": "https://stackoverflow.com/questions/78027431/how-to-fix-sql-injection-if-we-have-to-use-db-name-dynamically-in-sql-server"
    },
    {
        "Title": "How to reduce vulnerability to cyber attacks from injection?",
        "Question": "I have very little knowledge about SQL injection, and there are probably other threats I am unaware of out there for stealing company data, how would I make this python code better in regards to security?\nmerge_query = \"\"\"\nMERGE INTO sql_table_name AS Target\nUSING (\n    VALUES {}\n) AS Source (transaction_year, month_num, month_name, price_nt)\nON Target.transaction_year = Source.transaction_year \nAND Target.month_num = Source.month_num\nWHEN MATCHED AND (Target.month_name != Source.month_name OR Target.price_nt != Source.price_nt) THEN\n    UPDATE SET Target.month_name = Source.month_name, Target.price_nt = Source.price_nt\nWHEN NOT MATCHED THEN\n    INSERT (transaction_year, month_num, month_name, price_nt) VALUES (Source.transaction_year, Source.month_num, Source.month_name, Source.price_nt);\n\"\"\".format(','.join(['(?,?,?,?)' for _ in range(len(data))]))\n\nparams = [item for sublist in data for item in sublist]\n\ntry:\n    obj_crsr.execute(merge_query, params)\n\nexcept Exception as e:\n    obj_crsr.rollback()\n    print(e)\n    print(\"Transaction rolled back\")\n\nelse:\n    obj_cnxn.commit()\n    obj_crsr.close()\n    obj_cnxn.close()\n\nThis python code is given data in the following format:\n[(2023, M12,    December,   541.44),\n(2023,  M11,    November,   486.64),\n(2023,  M10,    October,    468.23),\n(2023,  M09,    September,  478.80),\n(2023,  M08,    August,     475.41)]\n\nAnd then is converted to a list in the params variable.  That data looks like this:\n['2023', 'M12', 'December', '541.442', '2023', 'M11', 'November', '486.639', '2023', 'M10', 'October', '468.226', '2023', 'M09', 'September', '478.802', '2023', 'M08', 'August', '475.411']\n\nThis is the only method I have found to work when trying to merge data into an existing table using PYODBC.  I have heard of parameterizing the query or naming sql variables, but I don't know how to adapt existing examples/solution on stack overflow to my specific use case.  Any suggestions are appreciated.\n",
        "Answer": "There is nothing wrong with your existing code as far as injection is concerned.\nInjection only happens when user data is injected directly into the query. Here, that is not happening. What is happening is that a dynamic list of ? parameter markers are being injected, in a well-defined way (once per row), and the actual values are passed as a dynamic list of parameters. There is absolutely no scope for injection here.\nBe aware of a few points though:\n\nUsing such code does tend to focus minds on \"oh just inject the data\". Might be worth putting in a comment such as only paramaters are injected here.\nIf there are no rows at all to insert then you get invalid code ( VALUES ), so you should check for that.\nDynamic numbers of parameters mean you get a recompile for every possible variation of parameters. This is not as many as would be had if you actually injected the data, but still a concern.\nA Table-Valued Parameter or a bulk insert into a temp table are therefore both better options than any of this, but neither are supported by pyodbc. fast_executemany or to_sql might be options, or BULK INSERT from an external file.\nThe maximum number of parameters is 2100, you will hit performance issues well before that though.\n\n",
        "Source": "https://stackoverflow.com/questions/77996154/how-to-reduce-vulnerability-to-cyber-attacks-from-injection"
    },
    {
        "Title": "Is using Hibernate&#39;s Restrictions.eq() method safe against SQL injection?",
        "Question": "Is using Hibernate's Restrictions.eq() method, as used in the example below, safe against SQL injection? Or similar methods like Restrictions.in(), Restrictions.ge(), ...\nString vulnerable = //parameter from user interface \nCriteria ct = this.getCriteria();\nct.add(Restrictions.eq(\"propertyName\", vulnerable));\n\nI have found that probably is, as explained in this answer\nbut reviewing OWASP documentation, there is an example that shows a comment which confuses me (// This should REALLY be validated too). Is needed to validate the input, or is secure as is?\nThe example in the OWASP documentation\n// Criteria API\n// This should REALLY be validated too\nString userSuppliedParameter = request.getParameter(\"Product-Description\");\n// Perform input validation to detect attacks\nInventory inv = (Inventory) session.createCriteria(Inventory.class).add\n(Restrictions.eq(\"productDescription\", userSuppliedParameter)).uniqueResult();\n\n",
        "Answer": "Yes, Hibernate's Criteria API would protect you against SQL Injection, as it parameterises the query - you can see this in action by enabling sql logging.\nWhat you do need to be careful about is concatenating user inputs etc. I think the documentation may perhaps be referring to validate the user input at both client and server side.\n",
        "Source": "https://stackoverflow.com/questions/77993970/is-using-hibernates-restrictions-eq-method-safe-against-sql-injection"
    },
    {
        "Title": "Operand type clash: int is incompatible with date in sql",
        "Question": "i using am writing a insert statement but getting above error\nInsert query\nvar insertSql = string.Format(\n                $\"INSERT INTO Sales (Date, Team, Sales) VALUES ({0}, {1}, {2})\",\n                new List<SqlParameter>()\n                {\n                    new(\"@date\", sales.Date.ToString(\"yyyy-MM-dd\")),\n                    new(\"@team\", sales.Team),\n                    new(\"@sales\", sales.Sales),\n                });\n            var rowCount = Sql.ExecuteNonQuery(Conn,insertSql);\n\nhere is my table schema and class\nSaleId int,\nDate Date,\nTeam varchar(50),\nSales int\n\npublic class Sales\n{\n    public int SalesId { get; set; }\n    public DateTime Date { get; set; }\n    public string Team { get; set; }\n    public int Sales { get; set; }\n}\n\nI want to use parameterized query to achive this so tried this but giving above error\n",
        "Answer": "The immediate problem here is that $\"...\" is itself an interpolated string, and the values you are injecting are the literal 0, 1, and 2 - they're not placeholders: they're the values. Removing the $ would make it a literal string suitable for string.Format, but you don't want to use string.Format here; also, you don't want to format the date - just pass it as a date.\nHonestly: if you're writing the SQL yourself, I'm not sure EF is even needed here; with Dapper this would be simply:\nconn.Execute(\"INSERT INTO Sales (Date, Team, Sales) Values (@Date, @Team, @Sales)\",\n    sales);\n\nor with a trick for better SQL formatting:\nconn.Execute(\"\"\"\n    INSERT INTO Sales (Date, Team, Sales)\n    Values (@Date, @Team, @Sales)\n    \"\"\", sales);\n\nDapper will deal with finding sales.Date, sales.Team and sales.Sales, and add them correctly. EF may also have an API for doing ad-hoc queries like this, but... this feels more like a Dapper scenario, unless you're emotionally invested in EF.\n",
        "Source": "https://stackoverflow.com/questions/77926016/operand-type-clash-int-is-incompatible-with-date-in-sql"
    },
    {
        "Title": "How to limit memory usage with PDO in MariaDB : Fatal error: Allowed memory size of 67108864 bytes exhausted",
        "Question": "I am changing my SQL request to PDO in order to integrate more security against SQL injecting.  I was using before procedural msqli and everything was working ok.  Now I updated server to PHP 8.2 and I am using PDO and prepared statements.\nThe BD I am accessing is old MariaDB and has a table with 247 fields most of which are NULL on a single row. (It is sections for a description of mushrooms, but only some of each are really described in a single row (mushrooms)).\nMost of the 247 fields are set to mediumtext because they can content up to a couple paragraphs.\nMy connection script is :\ntry {\n\n    db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\nreturn;\n} \n\nWhen I select one row of that table in order to echo the not NULL descriptions column, as soon as I execute the statement I run into a full memory.  The error is at the stmt->execute() line, not even at the fetchAll line.\n$description = 'someTag';\n\n$sql = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n$stmt = $db->prepare($sql);\n$stmt->bindParam(':tag', $description, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n$result = $stmt->fetchAll();\n$stmt->closeCursor();\n\nThe error :\nFatal error: Allowed memory size of 67108864 bytes exhausted (tried to allocate 262144 bytes) in /home/mycoqueb/public_html/nou.mycoquebec.org/scripts/bd-query.php on line (**the $stmt->execute() line)\n\nI tried to use :\nwhile ($row = $stmt->fetch()) {\n\nInstead of fetchAll() but it changed noting, I used it on every other request from the same page and it changed noting.  I flushed variables that were no more useful to NULL on the rest of the page and it changed nothing.  I even isolated the script on an empty page and it exceeds the memory limit.\nI tried to add this to my connection script and it changed nothing :\ndb->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\nI tried to select only one field instead of * and this worked, but I don't have an easy way to find NOT NULL columns in the table for a specific tag (row).\nI tried to find a SQL statement to restrict my SELECT to NOT NULL columns but I was not successful.\nI know I could get add memory_limit = 256M to the phpini file, but that is not what I want since the website has a high usage and for now its on a multihosted server.\nThe best solution would be to reengineer the MariaDB database using a table with description sections labels and linking only used sections to the main description table for each row, but I have limited access to the db since it is online with the old website and the old website needs to stay online and up to date for 1-2 years after new deployment. I though of creating a daily cron job to do that but I would like to avoid for the moment.\nAny Idea how I can get this to work?  It was working fine using msqli on php 8.1.\nTo answer the worries of contributors that think it's related to another part of the page code, here is the complete code of the isolated test page.\nfunction convert($size)\n {\n    $unit=array('b','kb','mb','gb','tb','pb');\n    return @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];\n }\n\n\n$servername = \"localhost\";\n$username = \"myUser\";\n$password = \"myPass\";\n$dbname = \"myDB\";\n\n\ntry {\n\n    $db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    //$db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\n } catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\n    return;\n}   \n\n$query = (array_key_exists(\"query\",$_REQUEST) ? $_REQUEST[\"query\"] : \"\");\n\n\nif($query != \"\"){\n\n    $tag_desc = 'Aegerita candida';\n    // Code works if I limit to \"SELECT Titre FROM description WHERE tag = :tag LIMIT 1\";\n    $sql_description = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n    $stmt = $db->prepare($sql_description);\n    $stmt->bindParam(':tag', $tag_desc, PDO::PARAM_STR);\n    \n    echo convert(memory_get_usage(true));  // returns 2mb\n    $stmt->execute();\n    $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n    \n    $i = 0;\n    \n    while ($row = $stmt->fetch()) {\n\n        if($i == 0) {\n\n            ?><table style=\"border-collapse:collapse;border: 0;table-layout: fixed;color: #063850;background-color: #DDDDDD;text-align: left\"><thead><tr style=\"border: 2px solid #063850;\"> <?php\n            foreach (array_keys($row) as $key) {\n                //print_r($key);\n                echo (\"<th style='padding:5px;border: 2px solid #063850;position:sticky;top: -2;z-index:10;background-color:#e5a045'>$key</th>\");\n            }\n            echo (\"</tr></thead>\");\n        }\n\n        $i++;\n\n        echo (\"<tr style='border: 2px solid #063850'>\");\n        foreach ($row as $value) {\n            echo (\"<td style='padding:2px;border: 2px solid #063850'>$value</td>\");\n            // <img src=\\\"$value\\\" height=\\\"400\\\" >\n        }\n        echo (\"</tr>\");\n    }\n    \n    if ($i > 0) {\n        echo (\"</table>\");\n        echo ('<div style=\"margin-top:400px\">&nbsp;</div>');\n    } else {\n        echo \"Aucun r\u00e9sultat\";\n    }\n\n}\n\n$db = null;\n\nHas mentioned it automatically work if I limit my sql to a couple fields.\nThe error is still on the stmt->execute() line.\n",
        "Answer": "Could it be that the issue is your data model?\nIf you have a table that has a lot of nulls, then the data is most likely not normalized.\nInstead of having 256 columns in your table, maybe just have the ones that are always there, and then relate it to a separate table with three fields: foreign key to the main table, a tag field and a value field.\nIf you are rewriting your application to USE PDO anyway, some long-term considerations could be included.\nExample table\nLayout like yours (all data in one table):\n\n\n\n\nid\nname\nemail\nsomeotherdata\ntag1\ntag2\ntag3\ntag4\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\nNULL\na\nNULL\n100\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\nc\na\nNULL\n400\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\nNULL\nNULL\n5000\nNULL\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\nNULL\na\nNULL\n100\n\n\n\nSuggested Tag-Value table layout\nMain Table\n\n\n\n\nid\nname\nemail\nsomeotherdata\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\n\n\n\n\nTag-Value Table\n\n\n\n\nid\ntag\nvalue\n\n\n\n\n1\ntag2\na\n\n\n1\ntag4\n100\n\n\n2\ntag1\nc\n\n\n2\ntag2\na\n\n\n2\ntag4\n400\n\n\n3\ntag3\n5000\n\n\n4\ntag2\na\n\n\n4\ntag4\n100\n\n\n\nUsage\nInstead of selecting just your row, you WILL need to either join the results together, or make two separate calls. I would suggest two calls, especially since you are rtunning into memory issues.\nSELECT \n  id, \n  name,\n  email,\n  someotherdata\nFROM\n  MainTable\nWHERE\n  id = 1;\n\n-- and then the tags\nSELECT \n  id, \n  tag,\n  value\nFROM\n  TagValueTable\nWHERE\n  id = 1; -- reference to the main table\n\n\n\nAdvantaages of this normalized approach\n\nLess bloat (not so many nulls)\nSimpler structures\nREST ready\nMore resilient\n\nAdd tags without changing the DDL of the database (ALTER)\n\n\nYou can still get the original layout by making subselects and transpositions in mysql\nYou can easily make statistics on the tags related to each other\n\nDisadvantages\n\nComplexity of the data model increases\nYou need to do a lot of extra SQL gymnastics to get EXACTLY what you had before\n\n",
        "Source": "https://stackoverflow.com/questions/77895050/how-to-limit-memory-usage-with-pdo-in-mariadb-fatal-error-allowed-memory-size"
    },
    {
        "Title": "PHP: Prepare JSON selector to Prevent MySQL Injection",
        "Question": "What is the best/proper way to prepare a dynamic MySQL JSON selector for queries, in order to prevent SQL injection? As an example, say I want to execute the following query:\nSELECT `key` ->> \"$.key.path\" AS `setting_value`\nFROM `settings`\nLIMIT 1\n\nBut I want to make the key path dynamic, e.g.:\n$sql = <<<SQL\n    SELECT `key` ->> \"{$path}\" AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nWith conditional values, I can structure the SQL for a prepared statement using PDO, e.g.:\n$sql = <<<SQL\n    SELECT *\n    FROM `settings`\n    WHERE `other_field` = :field_val\n    LIMIT 1\nSQL;\n\n$statement = $this->handle()->prepare($sql);\n$statement->execute([':field_val' => 'some val']);\n$records = $statement->fetchAll(PDO::FETCH_OBJ);\n\nAdding something like the following to my database adapter (or even to my helper functions) seems rather inelegant and prone to errors/issues:\n    public function cleanJsonSelector(string $selector) : string {\n        return preg_replace('/[^-\\$a-zA-Z0-9_\\[\\].*\\s]/', '', $selector);\n    }\n\nThoughts/help?\n",
        "Answer": "The -> and ->> operators only support string literals. They do not expressions, variables, or parameters.\nBut you can use any expression \u2014\u00a0including a parameter placeholder \u2014\u00a0in the equivalent JSON function JSON_EXTRACT().\nThe ->> operator is like JSON_UNQUOTE(JSON_EXTRACT(json_doc, path))\n$sql = <<<SQL\n    SELECT JSON_UNQUOTE(JSON_EXTRACT(`key`, :path)) AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nThis seems like an unnecessary inconsistency in the functionality of MySQL's JSON operators, but this is how it's implemented in the current MySQL version 8.3.\n\nFor what it's worth, it was requested to support expressions after the -> operator (and presumably also the ->> operator) here: https://bugs.mysql.com/bug.php?id=87360\nYou may want to log into the MySQL bug tracker site and click the \"Affects Me\" button to hopefully increase the priority of implementing that feature.\n\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => true (the default), then parameters are not true parameters, they are string-substitutions into the SQL query before it is parsed. So what looks like a parameterized query really uses a string literal as far as MySQL is concerned, and the ->> operator is successful.\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => false, then parameters placeholders are parsed by MySQL during the prepare step. Since parameters are not supported as the argument to the ->> operator, this will fail.\nMysqli only supports true parameters, so it will always fail.\n",
        "Source": "https://stackoverflow.com/questions/77892840/php-prepare-json-selector-to-prevent-mysql-injection"
    },
    {
        "Title": "SQL-Injection in duckdb-queries on pandas dataframes",
        "Question": "In a project I am working with duckdb to perform some queries on dataframes. For one of the queries, I have some user-input that I need to add to the query. That is why I am wondering if SQL-Injection is possible in this case. Is there a way a user could harm the application or the system through the input? And if so, how could I prevent this case? It seems that duckdb has no PreparedStatement for queries on dataframes.\nI already looked up in the documentation (https://duckdb.org/docs/api/python/overview.html) but couldn't find anything useful. The method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\nThere is another question on stackoverflow (Syntax for Duckdb > Python SQL with Parameter\\Variable) about this topic but the answer only works on real sql-connections and the version with f-strings seems insecure to me.\nHere is a small code sample to show what I mean:\nimport duckdb\nimport pandas as pd\n\ndf_data = pd.DataFrame({'id': [1, 2, 3, 4], 'student': ['student_a', 'student_a', 'student_b', 'student_c']})\n    \nuser_input = 3  # fetch some user_input here\n    \n# How to prevent sql-injection, if its even possible in this case?\nresult = duckdb.query(\"SELECT * FROM df_data WHERE id={}\".format(user_input))\n\nSo how would you approach this problem? Is sql-injection even possible? Thanks for your help and feel free to ask for more details, if you need some more information!\nEDIT: Fixed a syntax error in the code\n",
        "Answer": "\nThe method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\n\nIt seems it's possible:\n>>> duckdb.execute(\"\"\"SELECT * FROM df_data WHERE id=?\"\"\", (user_input,)).df()\n\n   id    student\n0   3  student_b\n\n",
        "Source": "https://stackoverflow.com/questions/77884985/sql-injection-in-duckdb-queries-on-pandas-dataframes"
    },
    {
        "Title": "SQL injection error in Modsecurity logs in Plesk",
        "Question": "I am receiving the following error for 1 of my wordpress site running on a Plesk server.\n[client 000.00.00.000] ModSecurity: Access denied with code 403 (phase\n 2). Pattern match \"[\\\\\\\\[\\\\\\\\]\\\\\\\\x22',()\\\\\\\\.]{10}$|\\\\\\\\b(?:union\n\\\\\\\\sall\\\\\\\\sselect\\\\\\\\s(?:(?:null|\\\\\\\\d+),?)+|order\\\\\\\\sby\n\\\\\\\\s\\\\\\\\d{1,4}|(?:and|or)\\\\\\\\s\\\\\\\\d{4}=\\\\\\\\d{4}|waitfor\\\\\\\\sdelay\\\\\\\\s'\n\\\\\\\\d+:\\\\\\\\d+:\\\\\\\\d+'|(?:select|and|or)\\\\\\\\s(?:(?:pg_)?sleep\\\\\\\\(\\\\\\\\d+\n\\\\\\\\)|\\\\\\\\d+\\\\\\\\s?=\\\\\\\\s?(?:dbms_pipe\\\\\\\\.receive_message\\\\\\\\ ...\" at \nREQUEST_COOKIES:sbjs_first. [file \"/etc/httpd/conf/modsecurity.d/rules\n/comodo_free/22_SQL_SQLi.conf\"] [line \"66\"] [id \"218500\"] [rev \"18\"] \n[msg \"COMODO WAF: SQLmap attack detected||website name|F|2\"] [data \n\"Matched Data: |||id=(none) found within REQUEST_COOKIES:sbjs_first: \ntyp=typein|||src=(direct)|||mdm=(none)|||cmp=(none)|||cnt=(none)|||trm=\n(none)|||id=(none)\"] [severity \"CRITICAL\"] [tag \"CWAF\"] [tag \"SQLi\"] \n[hostname \"website name\"] [uri \"/wp-login.php\"] [unique_id \"ZamB-\n8j9IfDbYiJgRoahGwAAAAM\"], referer:\n\nWhen I visited some pages on the frontend it gives this error:\nServer Error\n403\nForbidden\nYou do not have permission to access this document.\nThat's what you can do\nReload Page Back to Previous Page Home Page\nI wonder if this a real attack? or false positive\nI was able to export the site to local. It seems working ok there.\n",
        "Answer": "CRS dev-on-duty here. Even if you don't use CRS rules and this is a problem of COMODO WAF rules, I'll try to help. While searching for the cookie name sbjs_first, I found this GitHub issue here, which is an indication that this sourcebuster cookie looks legitimate. Maybe you'll even the solution to your problem in one of the comments in this issue.\nIf this isn't the solution, you may need to tune the rules. Maybe you can also use our (CRS) documentation on false positives and rule tuning.\n",
        "Source": "https://stackoverflow.com/questions/77842169/sql-injection-error-in-modsecurity-logs-in-plesk"
    },
    {
        "Title": "Oracle SP Checkmarx SAST scan showing Parameter Tampering",
        "Question": "SP accepts key and returns flag status. In Checkmarx SAST scan key, It is saying parameter not validated before being used in query. Please help to understand what validation can be added so that it passes the vulnerability test.\nCreate procedure sp_name (key varchar2, v_flag out number) as\nv_key varchar2(50);\nv_sql clob;\nBegin\nIf key is null then\nv_flag:=-1;\nElse\nv_key:=sys.dbms_assert.enquote_literal(upper(trim(key)));\nv_key:=replace(v_key,'''');\nv_sql:=q'[select flag from tbl where key=:1]';\nExecute immediate v_sql into v_flag using v_key;\nEnd if;\nException when no_data_found then\nv_flag:=-1;\nEnd;\n\nI tried bind variable and dbms_assert but still it shows code is vulnerable\n",
        "Answer": "Stop using EXECUTE IMMEDIATE when you do not need to (and trying to make it overly complicated) and use a simple SELECT ... INTO ... statement with the PL/SQL variable as the bind variable (and give the PL/SQL variable a different name to the table's column).\nThe procedure can be simplified to:\nCREATE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  SELECT flag\n  INTO   v_flag\n  FROM   tbl\n  WHERE  key=v_key;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nThen, if you have the sample data:\nCREATE TABLE tbl (key, flag) AS\n  SELECT 'A',  1 FROM DUAL UNION ALL\n  SELECT 'B',  2 FROM DUAL UNION ALL\n  SELECT 'C',  3 FROM DUAL UNION ALL\n  SELECT NULL, 4 FROM DUAL;\n\nThen:\nDECLARE\n  v_flag TBL.FLAG%TYPE;\nBEGIN\n  sp_name('A', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('B', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('C', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('D', v_flag);\n  DBMS_OUTPUT.PUT_LINE('D: ' || v_flag);\n  sp_name(NULL, v_flag);\n  DBMS_OUTPUT.PUT_LINE('NULL: ' || v_flag);\nEND;\n/\n\nOutputs:\n\nA: 1\nB: 2\nC: 3\nD: -1\nNULL: -1\n\n\nOr, if you want it slightly more complicated to avoid the SELECT if the key is NULL then:\nCREATE OR REPLACE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  IF v_key IS NULL THEN\n    v_flag := -1;\n  ELSE\n    SELECT flag\n    INTO   v_flag\n    FROM   tbl\n    WHERE  key=v_key;\n  END IF;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nfiddle\n",
        "Source": "https://stackoverflow.com/questions/77841440/oracle-sp-checkmarx-sast-scan-showing-parameter-tampering"
    },
    {
        "Title": "What is the correct syntax for dollar-parameters in PostgreSQL queries?",
        "Question": "I am struggling with the correct syntax for a dollar-parameter. It sometimes works, sometimes not.\nI am using the 'pg' package for NodeJS, but since AFAIK parsing the query happens on the server side, I don't expect this to matter.\nCode:\nconst client: PoolClient = ...;\nawait client.query('SELECT \\'foo\\' = $1', [projectId]);\nawait client.query('SET \"gvc.currentProjectId\" = $1', [projectId]);\n\nThe first query is obviously useless, but I added it to experiment with the syntax. An error occurs in the second query, so the first one seems to work. The second one fails with:\nunexpected exception error: syntax error at or near \"$1\"\n\nIs it even possible to use dollar-parameters in the value for SET? I want to secure my application against SQL injection attacks, so manually escaping the projectId is a last resort.\n",
        "Answer": "As explained in https://dba.stackexchange.com/a/333947, SET can indeed only take literal values, no parameters or query results. That post links to the set_config command, which does not have such a restriction.\nhttps://pgpedia.info/s/set_config.html\n\nNeither the post not the documentation explain why both exist, nor why SET cannot take parameters since set_config demonstrates that it is possible to do so.\nSimply using set_config over SET solves the problem.\n",
        "Source": "https://stackoverflow.com/questions/77839814/what-is-the-correct-syntax-for-dollar-parameters-in-postgresql-queries"
    },
    {
        "Title": "How do I write prepared statements in ballerina?",
        "Question": "Is there a way to write prepared statements for SQL in ballerina? or is it a good practice to use the following method for that?\nfunction selectUserQuery(string username) returns sql:ParameterizedQuery => `SELECT * FROM users WHERE user_name=${username}`;\n\n",
        "Answer": "In ballerina sql:ParamerterizedQuery works as a prepared statement. (this differs a little from other languages as ballerina mandates giving the variable order, when writing the statement itself)\nYes, using functions is the best practise to keep SQL statements in ballerina.\nFor the sake of completeness, I would like to quote the following from this article.\nConsider the below statement,\nsql:ParameterizedQuery selectQuery = `SELECT * FROM users WHERE user_name=${username}`;\nBallerina executes this query in multiple steps,\n\nTemplate the query:\nThe sql module will replace the insertions in the query using ?. (e.g. `SELECT * FROM users where user_name=?`) Here, all insertions in the query are considered to be user inputs.\n\nThe database compiles the query:\nThe database validates the templated SQL query for syntax and semantics (column availability, authorization) errors. Finally, the server parses the query.\n\nPlaceholder replacement:\nThe programme sends all the user data values to the database. The database will replace the placeholders at this point. However, since the query is pre-compiled, even if the database appends the values, the scope of the execution will not change. i.e. SQL Injection cannot turn a SELECT command into a DELETE.\n\nQuery execution.\n\n\n",
        "Source": "https://stackoverflow.com/questions/77763194/how-do-i-write-prepared-statements-in-ballerina"
    },
    {
        "Title": "Problem with identical metrics results after machine learning",
        "Question": "When trying machine learning on a dataset, I got the same results for metrics such as accuracy and F-score on different machine learning algorithms.\nI have a dataset on which I trained my chosen algorithms. I found it on the Kaggle website: source.\nHere are code snippets from the Jupiter file, and the results of their execution:\nList of connected libraries\nIN:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report\nimport joblib\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras import models, layers\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nLoading dataset\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\ndf.head(10)\n\nLoad, process and split the data for further training of the classification model\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\n\ndf = df[(df['attack_type'] == 'sqli') | (df['attack_type'] == 'norm')]\n\nX = df['payload']\ny = df['label']\n\nvectorizer = CountVectorizer(min_df = 2, max_df = 0.8, stop_words = stopwords.words('english'))\nX = vectorizer.fit_transform(X.values.astype('U')).toarray()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)\n\nOUT:\n(8040, 1585)\n(8040,)\n(2011, 1585)\n(2011,)\n\nNaive Bayes Classifier\nIN:\nnb_clf = GaussianNB()\nnb_clf.fit(X_train, y_train)\ny_pred = nb_clf.predict(X_test)\nprint(f\"Accuracy of Naive Bayes on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Naive Bayes on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of Naive Bayes on test set : 0.9806066633515664\nF1 Score of Naive Bayes on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       0.97      0.98      0.97       732\n        norm       0.99      0.98      0.98      1279\n\n    accuracy                           0.98      2011\n   macro avg       0.98      0.98      0.98      2011\nweighted avg       0.98      0.98      0.98      2011\n\nRandom forest algorithm:\nIN:\nrf_clf = RandomForestClassifier()\nrf_clf.fit(X_train, y_train)\ny_pred_rf = rf_clf.predict(X_test)\nprint(f\"Accuracy of Random Forest on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Random Forest on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred_rf))\n\nOUT:\nAccuracy of Random Forest on test set : 0.9806066633515664\nF1 Score of Random Forest on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.96      0.98       732\n        norm       0.98      1.00      0.99      1279\n\n    accuracy                           0.99      2011\n   macro avg       0.99      0.98      0.99      2011\nweighted avg       0.99      0.99      0.99      2011\n\nSupport vector machine\nIN:\nsvm_clf = SVC(gamma = 'auto')\nsvm_clf.fit(X_train, y_train)\ny_pred = svm_clf.predict(X_test)\nprint(f\"Accuracy of SVM on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of SVM on test set: {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of SVM on test set : 0.9189457981103928\nF1 Score of SVM on test set: 0.8658436213991769\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.76      0.87       689\n        norm       0.89      1.00      0.94      1322\n\n    accuracy                           0.92      2011\n   macro avg       0.95      0.88      0.90      2011\nweighted avg       0.93      0.92      0.92      2011\n\nAs you can see when training on different machine learning algorithms, we get the same results in the case of random forest and naive Bayesian classifier.\nI hope you can help me to fix a possible bug in the code or improve it in some way.\n",
        "Answer": "In your code for Random Forest, you're storing predictions as y_pred_rf but calling your metrics on y_pred\n",
        "Source": "https://stackoverflow.com/questions/77686328/problem-with-identical-metrics-results-after-machine-learning"
    },
    {
        "Title": "WordPress sql injection",
        "Question": "Thanks for letting me post here, I'm just starting to learn programming.\nI have a problem with a WordPress site which I update for my dad's local motorcycle road safety training group, which is run as a charity/non-profit by volunteer instructors. The hosting company (LCN) has taken the site down and emailed the group the following:\n\n\nDomain name : kamg.org.uk\nDatabase : kamg_org_uk_dbtest\nMySQL Server : database3.lcn.com\nOur monitoring scripts have detected an SQL injection attack occurring on your web site kamg.org.uk, using exploitable code hosted there.\nThe SQL queries that have been flagged as suspicious/malicious are listed here :\n----- BEGIN REPORT -----\nTIME RUNNING: 01:34:02\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\nTIME RUNNING: 01:34:00\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\n----- END REPORT -----\n\nWP, plugins and theme are all kept up to date at all times.\nCan I safely just delete those lines from the database to clean the site?\nLCN offer the group free charity hosting but I have found over 1600 domains share the same server. Once the sql injection is cleaned the group will move to managed WP hosting in the hope it will be more secure.\nThx,\nNiels\nI have tried reinstalling WordPress by FTP, but the hosts have denied the attempt, having removed all permissions.\nTheir support is appalling, taking 4 days to respond to queries, and then answering the wrong question with a cut & paste stock response.\nI have just started learning, but I'd be happy to go in and edit files (with some nervousness) but haven't attempted anything at this stage.\n",
        "Answer": "It's not the data that is at fault, it's something in the code of WordPress, or more likely one of the plugins or themes you have installed.\nThe way the code works is something like this:\n$query = 'SELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key,\n  wp_usermeta.meta_value \nFROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"' . $variable . \n  '\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" \n  AND wp_users.ID = wp_usermeta.user_id';\n\nBut the value of $variable has been exploited by some attacker. They set it to the following string:\n\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\n\n(even including the quote characters.)\nWhen the variable is concatenated into the query, it causes the SQL query to have extra expression terms, that the attacker injected.\nIt looks like they're forcing sleep() calls to test if certain tables exist. They'll use this method to learn all your table names. Then they'll use information in subsequent attacks, to read those tables. SQL injection hackers have to probe using techniques like this to try to avoid detection.\nThe original query may be a normal part of the code of WordPress or one of the plugins or themes. But the programmer made a mistake by concatenating a variable whose value was set from untrusted input. Programmers aren't supposed to do this, but many are either unaware of the risk, or else they think it won't happen to their code.\nYou said you are up to date on all the versions of WordPress and plugins, but the vulnerability may exist in the current version. In other words, no newer version with a fix has been released (yet).\nSometimes it doesn't help to update the software, because the newest version has introduced a new vulnerability that didn't exist before. Programmers add new code in every version, and security vulnerabilities are the result of mistakes made by software developers. New vulnerabilities occur regularly.\nWordPress itself is pretty well tested, that's why I suppose the vulnerability may be in a plugin or theme. I don't know which plugins you use.\nOr you may have added custom code that has the vulnerability, so there is no other person who will update it. It's up to you.\nWhat you have to do now is figure out which line of code, not data, is responsible for the vulnerability. If you don't have the skills to do this (basically a text search across many files to find a line of code similar to the one I showed above), then you need to employ someone to help you.\nOnce you find the line of code responsible, either fix it yourself, or if it's in a plugin you could just uninstall that plugin to remove the vulnerable code.\nIt sounds like your hosting company isn't going to help. They probably have very little resources to provide customer service in this case. Even if you fix the code, it sounds like it will be a struggle to get them to allow you to restore your website.\nYou may need to find a new hosting provider if your current one won't communicate or let you have access to your site.\nBut a different hosting provider won't be more secure, because the fault is not with the hosting provider. The fault is in the code you are using.\nIf you install the same code on the current provider or another provider without fixing it, the code will still be vulnerable to hacks. If you upload code you know is vulnerable, then it'll be your fault.\n",
        "Source": "https://stackoverflow.com/questions/77602811/wordpress-sql-injection"
    },
    {
        "Title": "Protects dplyr against SQL injections?",
        "Question": "I would like to use R-Shiny to develop a web app that accesses an SQL database with sensitive data.\nSo far I have written the database query as a pure SQL string.\nHowever, this approach is very susceptible to SQL injections.\nMy intention is therefore to write the database query with dplyr, as the query is written in R and not in pure SQL.\nUnfortunately, I have not yet been able to find any more detailed information or an estimate on this topic online. Therefore I would like to clarify my request in this question.\nSo far I have only read a statement about the dbplyr::translate_sql() function that is supposed to protect SQL injections:\nhttps://dbplyr.tidyverse.org/articles/sql-translation.html#vectors\nAs my data is very confidential, dbplyr / dplyr should provide 100% protection against SQL injections.\nI would be very pleased to receive further information and assessments on this topic.\nUPDATE\nAs suggested in the comments, I have added an example for reproducibility:\n(adapted from: https://shiny.posit.co/r/articles/build/pool-dplyr/)\nlibrary(shiny)\nlibrary(DBI)\nlibrary(pool)\nlibrary(tidyverse)\nlibrary(dbplyr)\n\npool <- dbPool(\n  drv = RMySQL::MySQL(),\n  dbname = \"shinydemo\",\n  host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",\n  username = \"guest\",\n  password = \"guest\")\n\nui <- fluidPage(\n  textInput(\"ID\", \"Enter your ID:\", \"5\"),\n  tableOutput(\"tbl\"),\n  numericInput(\"nrows\", \"How many cities to show?\", 10),\n  plotOutput(\"popPlot\"))\n\nserver <- function(input, output, session) {\n  output$tbl <- renderTable({\n    pool %>% tbl(\"City\") %>%\n      filter(ID == !!input$ID)\n  })\n  output$popPlot <- renderPlot({\n    df <- pool %>% tbl(\"City\") %>%\n      head(as.integer(input$nrows)[1]) %>% collect()\n    pop <- df$Population\n    names(pop) <- df$Name\n    barplot(pop)\n  })\n}\n\nshinyApp(ui, server)\n\n",
        "Answer": "The threat of SQL injection depends on how the user-provided text is incorporated into the dynamic SQL query. So if you are trying to protect against injection, you need to assess each of the ways user input is used when querying the database.\nIn the example you have posted there are two pieces of user input:\n\ninput$nrows which is limited to numeric by the input widget\ninput$ID which is free text, and hence has greater risk of SQL injection.\n\nYou can use any of the approaches below to investigate each piece of user input. Overall, the approach I would choose is to Sanitise and then Review.\nThis answer focuses on the case where you are using dbplyr to translate from R to SQL. If other approaches are used to access the database (such as the DBI package) then a different approach will be required.\n\nOption 1) Review the SQL query that is generated\nConsider where input$ID is used in the example code:\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID)\n\nIn order to execute this, dbplyr will translate the dplyr commands from R into SQL. We can review this translation using the show_query command.\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID) %>%\n  show_query()\n\nThis will probably produce an SQL query similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value'\n\nYou do not need the entire Shiny app to test this for SQL injection. You can simply vary this query and see what happens. For example, try a simple alternative query:\nattempt_inject = 'my_id_value;SELECT 123'\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!attempt_inject) %>%\n  show_query()\n\nI suspect this will produce SQL similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value;SELECT 123'\n\nWhich would seem an effective prevention for SQL injection. But you will need to test this as thoroughly as required to ensure you are confident.\n\nOption 2) Review source code\nThe dbplyr package is open source and available online. You could review the source code to confirm how inputs are handled during translation.\nMy suspicion is that unless inputs are of type sql, then they will be escaped as either text or an SQL object.\nThere is an sql() function that converts input to type sql. One of its uses is to tell dbplyr not to translate the contents of the function but to use them as-is. This means that if your user can submit R objects as inputs then this is a significant area of vulnerability. However, this is unlikely to be the case as your app restricts users to submitting text and numeric input.\n\nOption 3) Sanitise your inputs before passing them to dbplyr\nR has several advantages over pure SQL, in that you can use R to validate users' input before including it in a dbplyr query.\nConsider this an an alternative to your output$tbl component of the app:\noutput$tbl <- renderTable({\n  current_ID = as.character(input$ID)\n  acceptable_ids = pool %>%\n    tbl(\"City\") %>%\n    select(ID) %>%\n    distinct() %>%\n    collect() %>%\n    pull()\n  req(current_ID %in% acceptable_ids)\n\n  pool %>%\n    tbl(\"City\") %>%\n    filter(ID == !!current_ID)\n})\n\nThis approach enforces that the user input is converted to type character and is a value found in the ID column, before passing the user input through to dbplyr.\nThe exact choice of checks will depend on how user input is used. I often include a check that user input does not contain special characters (such as ;{}[]* or spaces).\ndbplyr includes commands to delimit certain inputs. Investigate and use these commands where applicable.\nNotes\n\nreq is a Shiny command that stops execution of a component if the condition is not met. You can use stopifnot outside a Shiny context.\nFetching the list of acceptable ids within the renderTable statement is not efficient app design. This should be calculated once and reused multiple times.\n\n",
        "Source": "https://stackoverflow.com/questions/77598340/protects-dplyr-against-sql-injections"
    },
    {
        "Title": "Interfacing with &quot;API&quot; that only takes raw SQL: Node / pSQL sanitization without prepared statements or parameterization?",
        "Question": "I am working with an \"API\" provided by a client's ERP. They do not have actual endpoints, rather a REST endpoint that you can send raw sql queries to, that they then execute. To make matters even worse, they only recently upgraded to https.\nI am writing some Node cloud functions to interface with this system. There will be two roles working with this product, and I need to prevent the role with less permissions to fire unwanted queries in the application when they are searching with specific parameters.\nFor filtering, I can just check if the values are in an array of allowed terms, but with a search I am not quite sure how to approach this. My general opinion has always been to use parameterized statements, but that is not an option here as I can't actually establish a connection to their database. I also saw some posts where people suggested wrapping the strings in dollar signs since the underlying DB is PostgreSQL, but I could not find anything in the documentation for this purpose.\nI was also thinking about only allowing alpha-numeric characters, but this seems like a potentially weak approach. If anyone knows of any libraries or ideas for dealing with this situation, I would greatly appreciate it.\nI tried looking for a Node library or piece of documentation that could help this situation, but I could not find anything relevant.\n",
        "Answer": "I found this interesting post around the question: https://security.stackexchange.com/questions/172297/sanitizing-input-for-parameterized-queries.\nTo summarize it, doing data sanitization(more like general validation) is always good idea but it will not necessarily guarantee that query will be safe. Directly running queries without parameterized statements will be still quite a big risk even if you find some great library for cleaning data to make it SQL safe.\nInstead try to think of ways to not run user input directly. Add some kind of mapper in between which will accept some filter codes and translate it into SQL values. For example if I had delivery company and wanted to filter all deliveries with status delivered, I would use mapping like this:\nconst status_code = \"DELIVERED\"\nconst statusMapper = {DELIVERED: \"delivered\"(value to filter in sql)}\n\nAnd if my mapper does not find the exact match, return error or empty result and don't run the query at all. If its search bar, try to identify most frequent search keywords and build mapper for that. Obviously it will not be too accurate, but still better than having risk of sql injection, especially if you work with sensitive and important data(I assume you work with company's internal data since you integrate with ERP).\n",
        "Source": "https://stackoverflow.com/questions/77516509/interfacing-with-api-that-only-takes-raw-sql-node-psql-sanitization-without"
    },
    {
        "Title": "Dremio SQL injection vulnerability",
        "Question": "I'd like to query an S3 storage containing parquet files through my Spring Java app with Dremio. These are dynamic queries with user given parameters.\nI use Apache Arrow SQl driver and simply run queries by a JdbcTemplate instantiated with a DataSource from the following properties:\n  driver-class-name: org.apache.arrow.driver.jdbc.ArrowFlightJdbcDriver\n  url: jdbc:arrow-flight-sql://localhost:32010/?useEncryption=false\n  username: user\n  password: pwd\n\nFor the sql string I use a String formatted with the user given value:\n\"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = '%s';\".formatted(userInput)\n\nIt works well but needless to say how big of an SQL injection opportunity it is. If I try to use a Prepared Statement:\nString sql = \"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = ?\"\njdbcTemplate.query(sql, ps -> ps.setString(1, userInput), rs -> {\n  //handling the result set\n});\n\nI get the following error:\ncfjd.org.apache.arrow.flight.FlightRuntimeException: Cannot convert RexNode to equivalent Dremio expression. RexNode Class: org.apache.calcite.rex.RexDynamicParam, RexNode Digest: ?0\n\nI'm finding ambiguous information on the web. The claim that Dremio doesn't support prepared statements could be found in some forums, but all of these comments are several years old*, moreover the official Dremio site has an article recommending the usage of prepared statements..\nAs far as I know Dremio uses ANSI SQL under the hood, which I believe supports prepared statements. Or does that depend on the database engine and not the dialect? Can anyone confirm that it is still not possible with Dremio? Then I'll stop pursuing it further.\nIf that's the case, I will escape the unsafe characters, use a dictionary for encoding and decoding user given characteres, etc.\nIf you have some other advices or experiences mitigating SQL injection without prepared statements though, I would appreciate them as well!\nThank you!\n*latest update I found: https://community.dremio.com/t/sql-parameterization-support/1733/5\n",
        "Answer": "I'll post my findings as an answer, maybe it could be useful for someone in the same boat:\nIn lack of any other ideas I went down the encode/decode road.\nFor that the initial idea was to use an own dictionary, but I figured that hexadecimal encoding should be sufficient enough.\nLuckily Dremio SQL has a FROM_HEX function, which can return a BINARY value for the given hexadecimal string.\nWith that I can (so far..) safely build dynamic queries with any kind of user given input turned into HEX strings and then converting back at execution time, with the function behaving kind of like a wrapper.\nStill, this isn't a perfectly calming solution, but as far as I can see, there isn't really a better option at the moment. I heard Dremio will implement prepared statements (quite a shock that they haven't already), until then, let's hope for the best!\n",
        "Source": "https://stackoverflow.com/questions/77501615/dremio-sql-injection-vulnerability"
    },
    {
        "Title": "SQL Injection in Stored Procedures via MySQL Connector",
        "Question": "I use the mysql-connector-python driver for executing database operations. Recently, I came across stored procedures in MySQL and decided to migrate some of my APIs from utilizing cursor.execute() to cursor.callproc(proc_name, args=()). This transition has proven successful, and everything works seamlessly. However, I'm uncertain about the vulnerability of these stored procedures to SQL injection.\nTo assess this, I created a test stored procedure and examined its susceptibility to SQL injection payloads.\nStored Procedure:\nDELIMITER //\nCREATE PROCEDURE TestProcedure(IN arg_test VARCHAR(150))\n  BEGIN\n    IF EXISTS (SELECT 1 FROM Random_Table WHERE test = arg_test) THEN\n        SELECT 'success' AS message;\n    ELSE\n        SELECT 'failed' AS message;\n    END IF;\n  END //\nDELIMITER ;\n\nPayloads:\n\n' or 1=1 -- \n\" or 1=1 -- \n\nSurprisingly, none of these payloads yielded any successful results. Seeking further assurance, I consulted one of the database administrators in the company. Although he expressed uncertainty, he suggested that these stored procedures function similarly to prepared statements. This aligns with my observation that the cursor.callproc() method accepts user inputs as arguments via the args parameter, resembling prepared statements.\nIf this interpretation is accurate, it implies that using the cursor.callproc() method ensures a secure backend, free from SQL injection concerns. Despite these positive indications, I would like to seek additional confirmation here to guarantee the safety of this approach.\n",
        "Answer": "Like it often happens, the problem is in the terminology. And it creates a lot of trouble (and vulnerabilities). A programmer should be always strict in their definitions.\nWhat you are talking about here is using stored procedure's parameter. Such a parameter is a special case related to stored procedures, and very similar in nature to SQL variables.\nIn this case your database doesn't add the contents of arg_test into the SQL body (as it would have been in python if you did something like + arg_test +) and then evaluate the resulting SQL. On the contrary, is uses arg_test as though it's a variable (in this sense, it's indeed similar to prepared statements, but technically it's entirely different matters).\nWhile speaking of stored procedures, they are irrelevant to injections. By itself, just using a procedure doesn't guarantee anything. One can write a procedure which is immune to injection, and write another which is prone to injection. Just like any other code.\nBut as long as you are just using a parameter passed to the procedure - it's safe.\n",
        "Source": "https://stackoverflow.com/questions/77500796/sql-injection-in-stored-procedures-via-mysql-connector"
    },
    {
        "Title": "Protection query against SQL injection, using PDO",
        "Question": "may I ask you how to make this protected against sql injection?\nI have\n$podminkazeme = \"\";\n$podminkakraj = \"\";\n\nif ( isset( $_GET[ \"zeme\" ] )and !empty( $_GET[ \"zeme\" ] ) ) {\n   $podminkazeme = \"and nb.zemehledani in (\" . str_replace( '%2C', ',',  $_GET[ \"zeme\" ] ) . \")\";\n};\n\nif ( isset( $_GET[ \"kraj\" ] )and !empty( $_GET[ \"kraj\" ] ) ) {\n  $podminkakraj = \"and nb.krajhledani in (\" . str_replace( '%2C', ',', $_GET[ \"kraj\" ]  ) . \")\";\n};\n\n$conn = new PDO( DB_DSN, DB_USERNAME, DB_PASSWORD );\n$sqljednotkaa = \"\n  select nb.*, \n    dv.nazev as developer, \n    UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, \n    UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, \n    uz.nazev as skladUpravil, \n    uzm.nazev as makler, \n    tp.nazev as typProdeje, \n    dal.nazev as nazevdalnice\n  from nabidka nb \n  left join uzivatele uz on uz.id=nb.skladUpravil \n  left join uzivatele uzm on uzm.id=nb.makler \n  left join typProdeje tp on tp.id=nb.typProdeje \n  left join developer dv on dv.id=nb.developer\n  left join dalnice dal on dal.id=nb.dalnice \n  where nb.emptyid is null \n    $podminkaid \n    $podminkastav \n    $podminkaupraveno \n    $podminkavelikost \n    $podminkacena \n    $podminkamakler \n    $podminkaexport \n    $podminkatypprodeje \n    $podminkatypnemovitosti \n    $podminkazeme \n    $podminkadalnice \n    $podminkakraj \n    $podminkaokres \n    $podminkadeveloper \n    $podminkatechnickeparametry \n    $podminkahledanislovo \n  order by nb.emptyid asc $razenipodminka\";\n\n$stjednotkaa = $conn->prepare( $sqljednotkaa );\n$stjednotkaa->execute();\n\n",
        "Answer": "Try this\n$conditions = [];\n$parameters = [];\n\nif (isset($_GET[\"zeme\"]) && !empty($_GET[\"zeme\"])) {\n    $zemeValues = explode(',', $_GET[\"zeme\"]);\n    $conditions[] = \"nb.zemehledani IN (\" . implode(', ', array_fill(0, count($zemeValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $zemeValues);\n}\n\nif (isset($_GET[\"kraj\"]) && !empty($_GET[\"kraj\"])) {\n    $krajValues = explode(',', $_GET[\"kraj\"]);\n    $conditions[] = \"nb.krajhledani IN (\" . implode(', ', array_fill(0, count($krajValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $krajValues);\n}\n\n$conn = new PDO(DB_DSN, DB_USERNAME, DB_PASSWORD);\n$sqljednotkaa = \"SELECT nb.*, dv.nazev as developer, UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, uz.nazev as skladUpravil, uzm.nazev as makler, tp.nazev as typProdeje, dal.nazev as nazevdalnice from nabidka nb left join uzivatele uz on uz.id=nb.skladUpravil left join uzivatele uzm on uzm.id=nb.makler left join typProdeje tp on tp.id=nb.typProdeje left join developer dv on dv.id=nb.developer left join dalnice dal on dal.id=nb.dalnice where nb.emptyid is null\";\nif ($conditions) {\n    $sqljednotkaa .= \" AND \" . implode(\" AND \", $conditions);\n}\n$sqljednotkaa .= \" ORDER BY nb.emptyid ASC $razenipodminka\";\n$stjednotkaa = $conn->prepare($sqljednotkaa);\n$stjednotkaa->execute($parameters);\n\n",
        "Source": "https://stackoverflow.com/questions/77416426/protection-query-against-sql-injection-using-pdo"
    },
    {
        "Title": "Enforcing row-level security in a shared postgres pool",
        "Question": "I'm working on a typical client-server webapp. It is using a system somewhat like GraphQL where the client has some flexibility in specifying what data it needs, without custom API endpoints for every type of data. The server is running node, and is using node-postgres with a typical pg.Pool. A client could send something like this:\n{select: '*', from: 'expenses', where: {'op': 'gt', 'lhs': 'expenses.amount', 'rhs': 20}}\n\nwhich would be translated to SELECT * FROM expenses WHERE expenses.amount > $1 (given $1 = 20). With enough care, this system can be made safe from injection attacks.\nI'd also like to incorporate row-level security policies. For example:\ncreate policy only_see_own_expenses on expenses using (expenses.user_id = <USER ID>);\n\nAs an extra security barrier, I want to make sure that even if an injection attack is succesful, a client can not \"unset\" its user ID.\nI've seen <USER ID> been defined in a few ways:\n\ncurrent_user, in which case every user of the app also needs a postgres user/role\nAn arbitrary setting like current_setting('myapp.user_id') in combination with a SET LOCAL myapp.user_id = ... at the start of a transaction\n\nApproach (2) seems most flexible to me. I'd just wrap every generated SQL query in a BEGIN; SET LOCAL myapp.user_id = 123; {generated query}; END;. The problem is that an attacker could inject another SET LOCAL statement, and impersonate another user.\nIn approach (1) you can similarly wrap every generated query with a SET ROLE ... statement at the start, yielding the same problem. An alternative is to create a new connection for each query with that specific role. I believe postgres would never allow that connection to switch to another role. But setting up a new connection per query would result in a lot of overhead.\nHow do I enforce row-level security without the performance hit of a new connection per query?\n",
        "Answer": "As you observe, setting a placeholder parameter and using SET LOCAL ROLE to temporarily assume a different role can be subverted by attackers who can execute arbitrary SQL, like in an SQL injection attack.\nI don't think that there is a way to accomplish what you want that is safe from SQL injection. The problem is a fundamental one: you handle authentication in the application, not in the database (where you are using a single application user to benefit from connection pooling), but you want to have the database handle authorization via row-level security. That requires a way for the application to tell the database what the application user is. Now the only way that the application can tell the database anything is by using SQL, and an attacker who can run arbitrary SQL statements can always subvert that.\nI think that the only option for you is to harden your application against SQL injection attacks.\n",
        "Source": "https://stackoverflow.com/questions/77272972/enforcing-row-level-security-in-a-shared-postgres-pool"
    },
    {
        "Title": "SQL Injection - Python - MySQL",
        "Question": "Basically,\nI'm trying to find ways to explore SQL Injection vulnerabilities in  the code presented below. The code has another layer, presentation, where it asks the user for board_name input.\nTable_name is an inside variable, user doesn't have control over it.\n    def find_board_by_name(cls, connector, board_name, table_name: str):\n        query = \"SELECT * FROM {} WHERE name = '{}'\".format(table_name,board_name.title())\n        print(query)\n        try:\n            connector.mycursor.execute(query)\n            res = connector.mycursor.fetchone()\n            if res:\n                return res[1]\n            return None\n        except Exception as e:\n            raise e\n        \n\nTried to :\n1- board_name as:          ' OR '1'='1\nIt worked, program returned to me me first item on the table (it wasn't supposed to, since I didn't provide any name)\n2- Tried to put board_name as:          ';Delete Table BoardGames;\nIt didn't work, mysql.connector.errors.InterfaceError: Use multi=True when executing multiple statements was presented to me.\nSo my question is \" mysql.connector\" is protecting me against the majorities of the SQL Injections? Since I didn't set the \"multi\" tag in the code to True?  Could you show me other ways to explore vulnerabilities in this code? Besides the 1 and 2.\nI guess I know how to fix the SQL Injection problem: \"connector.mycursor.execute(query, values)\" probably will do the job.  But, I'm trying to understand better what kind of SQL Vulnerabilities I would have with this original code without this fix.\n",
        "Answer": "SQL injection isn't always malicious. It could result in a simple error instead of deleting all the student records.\nFor example, if some legitimate user of your site is named \"O'Reilly\" then your code formatting would have an imbalanced quote, which would be a syntax error:\nSELECT * FROM tablename WHERE name = 'O'Reilly'\n                                       ^ wtf\n\nUsing parameters avoids this kind of problem. Query parameters aren't just a quick way of interpolating variables. They either escape special characters in the dynamic content (by default Python does this), or else full-blown parameters keep the values separate from the SQL query until after it has been parsed by the SQL server. So no special characters can ever cause a syntax error.\nBut table names and other identifiers cannot be parameters. You can use parameters only in place of SQL values, like your quoted string in your example.\nYou said the user is not in control of the table name variable. That's great, but not sufficient.\nWhat if another programmer on your project isn't careful when calling your find_board_by_name() function, and inadvertently passes unsafe content as the table name? Note that unsafe content is more than just user input.\nWhat if the table name is a reserved keyword in SQL?\nSELECT * FROM order WHERE name = ?\n              ^ syntax error\n\nWhat if the table name contains whitespace or punctuation? There are other risks.\nYou should code your function so it does not trust its caller. For SQL values, do use parameters of course. For other dynamic elements like table names, you do have to interpolate variables into the SQL string, but you can be defensive:\n\nUse an allowlist to verify the table name is a legitimate known table name.\n\nDelimit the table name in back-ticks in your SQL, just in case it's a reserved word or not a simple identifier.\nlegit_table_names = Set(['table1', 'table2', 'table3'])\nif table_name not in legit_table_names:\n  return error # pseudocode\n\nquery = f\"SELECT * FROM {table_name} WHERE name = %s\"\n\n\n\n(I prefer f-strings instead of format() in modern Python)\n",
        "Source": "https://stackoverflow.com/questions/77167563/sql-injection-python-mysql"
    },
    {
        "Title": "PHP Code Functioning as Intended but UNION Injection Payload Doesn&#39;t Work",
        "Question": "I am attempting to make a web application (LAMP stack - MySQL version: 8.0.36-0ubuntu0.22.04.1) that is vulnerable to a SQL UNION Injection attack (or some type of SQL injection attack). The code takes the user's input via POST parameters to get the VIN & mileage.\nThe following PHP Code handles the backend to adding the parameters to the database:\n// If SESSION variables are set then proceed to Mileage.php\n    if (isset($_SESSION['username'])) {\n        // PHP Code for Handling ADDING CAR\n        // Declare Variables\n        $username = $_SESSION['username'];\n        $vin = $_POST['vehicle'];\n        $mileage = $_POST['mileage'];\n\n        // Implement Try-catch for Error Hanlding\n        try {\n            // Add Mileage\n            if(isset($_POST['add_data'])) {\n                $query = \"INSERT INTO mileage_master.mileages (`username`, `VIN`, `mileage`) VALUES ('$username', '$vin', '$mileage')\";\n                $query_result = mysqli_query($db,$query);\n    \n            // Update Mileage\n            } elseif(isset($_POST['update_data'])) {\n                // Query to update associated VIN's Mileage\n                $update = \"UPDATE mileage_master.mileages SET mileage='$mileage' WHERE username='$username' AND VIN='$vin'\";\n                $update_result = mysqli_query($db,$update);\n            // Remove Mileage\n            } elseif(isset($_POST['remove_data'])) {\n                // Query to Remove VIN & Mileage\n                $remove = \"DELETE FROM mileage_master.mileages WHERE username='$username' AND VIN='$vin'\";\n                $remove_result = mysqli_query($db,$remove);\n            }\n        }\n        catch (mysqli_sql_exception $e) {\n            $showAlert = true;\n            // Display Syntax Error\n            $errorMessage = \"My SQL Error: \" . $e->getMessage();\n            // Display Query (Intentional Unsafe Coding Practices)\n            $errorMessage .= \"\\t||\\tQuery: \" . $sql;\n        }\n\n        \n    }    \n    else {\n        header(\"Location: /\");\n    }\n?>\n\nThe following PHP code prints the VIN & mileage to user's page:\n<?php\n    // Query to get all VINs associated with username\n    $result = mysqli_query($db,\"SELECT * FROM mileages WHERE username='$username'\");\n\n    echo \"<table style='margin-top: 35px;'>\";\n    echo \"<tr><th>VIN</th>\";\n    echo \"<th>Mileage</th></tr>\";\n\n    // While Loop to iterate through all returned rows\n    while($row = mysqli_fetch_assoc($result)) {\n        echo \"<tr style='text-align: center;'>\";\n        // VIN\n        echo \"<td>\" . $row['VIN'] . \"</td>\";\n        // Mileage\n        echo \"<td>\" . $row['mileage'] . \"</td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n?>\n\nMy thought process was that because the application uses dynamic queries an attacker could include some type of UNION SELECT statement. The UNION select statement's output would be stored within the VIN column for that query.\nHowever, I am unable to create a successful SQL Injection payload that would accomplish this.\nQuestion\nDo I need to change the logic of my application to make the exploit possible or is my idea not exploitable in the first place?\n",
        "Answer": "You can't get SQL injection in the SELECT query, since the user doesn't have control over the $username variable, and that's the only thing you substitute. But you can do it in the INSERT query, to insert extra rows in the table with arbitrary values.\nIt needs to terminate the current value list, then it can use a subquery in another value list, and finally it has to provide the beginning to match the end of the original value list.\n$vin = \"12345', '20'), ('baduser', (SELECT '67890'), (SELECT '30')), ('baduser2', '1111\";\n\nThis will put a bogus VIN and mileage into the row for $username, then insert additional rows for baduser and baduser2. baduser2 will get another bogus VIN and the mileage from the parameter.\nbaduser can use subqueries to get its VIN and mileage values, as long as the subqueries each only return one row and column. I used literals in the above example, but you can make them arbitrarily complex.\n",
        "Source": "https://stackoverflow.com/questions/78093937/php-code-functioning-as-intended-but-union-injection-payload-doesnt-work"
    },
    {
        "Title": "How to fix SQL injection if we have to use DB name dynamically in SQL Server?",
        "Question": "This is the implementation in code: the schema name comes from a configuration file and is different for each environment. Sonar throws SQL injection alert at this statement:\nselect * \nfrom dbName.dbo.stu_name;     <<dbname is the variable that comes from property file>>\n\nI tried these solutions:\n\nUsing query.setParameter(?,dbname). Tried passing dbname dynamically and vulnerability was fixed. When debugging, the query was throwing an error and did not execute.\n\nUsed String.format(select * from \\'%s\\',tablename.replace(\"\\'\",\"\\'\\'\")) - vulnerability fixed, but query failed to execute\n\n\nI tried various other solutions and nothing worked.\nCan anyone please help me with this?\n",
        "Answer": "The \"best\" defence you can do is not use dynamic SQL. Considering that this is the database that's dynamic, and based on a prior question, I would suggest that this is occurring from an application, so that means you don't need 3-part naming. Instead you parametrise the database name in the connection string and use 2-part naming; no dynamic SQL needed.\nIf you must use dynamic SQL, then the \"best\u2122\ufe0f\" defence would be to validate the database name, and then ensure you properly quote the database name when you inject it into your dynamic statement.\nHere I validate the database name in sys.databases and then use QUOTENAME to quote the name appropriately. If the database doesn't exist, no query is run (and no error is returned):\nDECLARE @DatabaseName sysname = N'YourDatabaseName';\n\nDECLARE @SQL nvarchar(MAX);\nSELECT @SQL = N'SELECT * FROM ' + QUOTENAME(d.name) + N'.dbo.stu_name;'\nFROM sys.databases d\nWHERE d.name = @DatabaseName;\n\nEXEC sys.sp_executesql @SQL;\n\n",
        "Source": "https://stackoverflow.com/questions/78027431/how-to-fix-sql-injection-if-we-have-to-use-db-name-dynamically-in-sql-server"
    },
    {
        "Title": "How to reduce vulnerability to cyber attacks from injection?",
        "Question": "I have very little knowledge about SQL injection, and there are probably other threats I am unaware of out there for stealing company data, how would I make this python code better in regards to security?\nmerge_query = \"\"\"\nMERGE INTO sql_table_name AS Target\nUSING (\n    VALUES {}\n) AS Source (transaction_year, month_num, month_name, price_nt)\nON Target.transaction_year = Source.transaction_year \nAND Target.month_num = Source.month_num\nWHEN MATCHED AND (Target.month_name != Source.month_name OR Target.price_nt != Source.price_nt) THEN\n    UPDATE SET Target.month_name = Source.month_name, Target.price_nt = Source.price_nt\nWHEN NOT MATCHED THEN\n    INSERT (transaction_year, month_num, month_name, price_nt) VALUES (Source.transaction_year, Source.month_num, Source.month_name, Source.price_nt);\n\"\"\".format(','.join(['(?,?,?,?)' for _ in range(len(data))]))\n\nparams = [item for sublist in data for item in sublist]\n\ntry:\n    obj_crsr.execute(merge_query, params)\n\nexcept Exception as e:\n    obj_crsr.rollback()\n    print(e)\n    print(\"Transaction rolled back\")\n\nelse:\n    obj_cnxn.commit()\n    obj_crsr.close()\n    obj_cnxn.close()\n\nThis python code is given data in the following format:\n[(2023, M12,    December,   541.44),\n(2023,  M11,    November,   486.64),\n(2023,  M10,    October,    468.23),\n(2023,  M09,    September,  478.80),\n(2023,  M08,    August,     475.41)]\n\nAnd then is converted to a list in the params variable.  That data looks like this:\n['2023', 'M12', 'December', '541.442', '2023', 'M11', 'November', '486.639', '2023', 'M10', 'October', '468.226', '2023', 'M09', 'September', '478.802', '2023', 'M08', 'August', '475.411']\n\nThis is the only method I have found to work when trying to merge data into an existing table using PYODBC.  I have heard of parameterizing the query or naming sql variables, but I don't know how to adapt existing examples/solution on stack overflow to my specific use case.  Any suggestions are appreciated.\n",
        "Answer": "There is nothing wrong with your existing code as far as injection is concerned.\nInjection only happens when user data is injected directly into the query. Here, that is not happening. What is happening is that a dynamic list of ? parameter markers are being injected, in a well-defined way (once per row), and the actual values are passed as a dynamic list of parameters. There is absolutely no scope for injection here.\nBe aware of a few points though:\n\nUsing such code does tend to focus minds on \"oh just inject the data\". Might be worth putting in a comment such as only paramaters are injected here.\nIf there are no rows at all to insert then you get invalid code ( VALUES ), so you should check for that.\nDynamic numbers of parameters mean you get a recompile for every possible variation of parameters. This is not as many as would be had if you actually injected the data, but still a concern.\nA Table-Valued Parameter or a bulk insert into a temp table are therefore both better options than any of this, but neither are supported by pyodbc. fast_executemany or to_sql might be options, or BULK INSERT from an external file.\nThe maximum number of parameters is 2100, you will hit performance issues well before that though.\n\n",
        "Source": "https://stackoverflow.com/questions/77996154/how-to-reduce-vulnerability-to-cyber-attacks-from-injection"
    },
    {
        "Title": "Is using Hibernate&#39;s Restrictions.eq() method safe against SQL injection?",
        "Question": "Is using Hibernate's Restrictions.eq() method, as used in the example below, safe against SQL injection? Or similar methods like Restrictions.in(), Restrictions.ge(), ...\nString vulnerable = //parameter from user interface \nCriteria ct = this.getCriteria();\nct.add(Restrictions.eq(\"propertyName\", vulnerable));\n\nI have found that probably is, as explained in this answer\nbut reviewing OWASP documentation, there is an example that shows a comment which confuses me (// This should REALLY be validated too). Is needed to validate the input, or is secure as is?\nThe example in the OWASP documentation\n// Criteria API\n// This should REALLY be validated too\nString userSuppliedParameter = request.getParameter(\"Product-Description\");\n// Perform input validation to detect attacks\nInventory inv = (Inventory) session.createCriteria(Inventory.class).add\n(Restrictions.eq(\"productDescription\", userSuppliedParameter)).uniqueResult();\n\n",
        "Answer": "Yes, Hibernate's Criteria API would protect you against SQL Injection, as it parameterises the query - you can see this in action by enabling sql logging.\nWhat you do need to be careful about is concatenating user inputs etc. I think the documentation may perhaps be referring to validate the user input at both client and server side.\n",
        "Source": "https://stackoverflow.com/questions/77993970/is-using-hibernates-restrictions-eq-method-safe-against-sql-injection"
    },
    {
        "Title": "Operand type clash: int is incompatible with date in sql",
        "Question": "i using am writing a insert statement but getting above error\nInsert query\nvar insertSql = string.Format(\n                $\"INSERT INTO Sales (Date, Team, Sales) VALUES ({0}, {1}, {2})\",\n                new List<SqlParameter>()\n                {\n                    new(\"@date\", sales.Date.ToString(\"yyyy-MM-dd\")),\n                    new(\"@team\", sales.Team),\n                    new(\"@sales\", sales.Sales),\n                });\n            var rowCount = Sql.ExecuteNonQuery(Conn,insertSql);\n\nhere is my table schema and class\nSaleId int,\nDate Date,\nTeam varchar(50),\nSales int\n\npublic class Sales\n{\n    public int SalesId { get; set; }\n    public DateTime Date { get; set; }\n    public string Team { get; set; }\n    public int Sales { get; set; }\n}\n\nI want to use parameterized query to achive this so tried this but giving above error\n",
        "Answer": "The immediate problem here is that $\"...\" is itself an interpolated string, and the values you are injecting are the literal 0, 1, and 2 - they're not placeholders: they're the values. Removing the $ would make it a literal string suitable for string.Format, but you don't want to use string.Format here; also, you don't want to format the date - just pass it as a date.\nHonestly: if you're writing the SQL yourself, I'm not sure EF is even needed here; with Dapper this would be simply:\nconn.Execute(\"INSERT INTO Sales (Date, Team, Sales) Values (@Date, @Team, @Sales)\",\n    sales);\n\nor with a trick for better SQL formatting:\nconn.Execute(\"\"\"\n    INSERT INTO Sales (Date, Team, Sales)\n    Values (@Date, @Team, @Sales)\n    \"\"\", sales);\n\nDapper will deal with finding sales.Date, sales.Team and sales.Sales, and add them correctly. EF may also have an API for doing ad-hoc queries like this, but... this feels more like a Dapper scenario, unless you're emotionally invested in EF.\n",
        "Source": "https://stackoverflow.com/questions/77926016/operand-type-clash-int-is-incompatible-with-date-in-sql"
    },
    {
        "Title": "How to limit memory usage with PDO in MariaDB : Fatal error: Allowed memory size of 67108864 bytes exhausted",
        "Question": "I am changing my SQL request to PDO in order to integrate more security against SQL injecting.  I was using before procedural msqli and everything was working ok.  Now I updated server to PHP 8.2 and I am using PDO and prepared statements.\nThe BD I am accessing is old MariaDB and has a table with 247 fields most of which are NULL on a single row. (It is sections for a description of mushrooms, but only some of each are really described in a single row (mushrooms)).\nMost of the 247 fields are set to mediumtext because they can content up to a couple paragraphs.\nMy connection script is :\ntry {\n\n    db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\nreturn;\n} \n\nWhen I select one row of that table in order to echo the not NULL descriptions column, as soon as I execute the statement I run into a full memory.  The error is at the stmt->execute() line, not even at the fetchAll line.\n$description = 'someTag';\n\n$sql = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n$stmt = $db->prepare($sql);\n$stmt->bindParam(':tag', $description, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n$result = $stmt->fetchAll();\n$stmt->closeCursor();\n\nThe error :\nFatal error: Allowed memory size of 67108864 bytes exhausted (tried to allocate 262144 bytes) in /home/mycoqueb/public_html/nou.mycoquebec.org/scripts/bd-query.php on line (**the $stmt->execute() line)\n\nI tried to use :\nwhile ($row = $stmt->fetch()) {\n\nInstead of fetchAll() but it changed noting, I used it on every other request from the same page and it changed noting.  I flushed variables that were no more useful to NULL on the rest of the page and it changed nothing.  I even isolated the script on an empty page and it exceeds the memory limit.\nI tried to add this to my connection script and it changed nothing :\ndb->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\nI tried to select only one field instead of * and this worked, but I don't have an easy way to find NOT NULL columns in the table for a specific tag (row).\nI tried to find a SQL statement to restrict my SELECT to NOT NULL columns but I was not successful.\nI know I could get add memory_limit = 256M to the phpini file, but that is not what I want since the website has a high usage and for now its on a multihosted server.\nThe best solution would be to reengineer the MariaDB database using a table with description sections labels and linking only used sections to the main description table for each row, but I have limited access to the db since it is online with the old website and the old website needs to stay online and up to date for 1-2 years after new deployment. I though of creating a daily cron job to do that but I would like to avoid for the moment.\nAny Idea how I can get this to work?  It was working fine using msqli on php 8.1.\nTo answer the worries of contributors that think it's related to another part of the page code, here is the complete code of the isolated test page.\nfunction convert($size)\n {\n    $unit=array('b','kb','mb','gb','tb','pb');\n    return @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];\n }\n\n\n$servername = \"localhost\";\n$username = \"myUser\";\n$password = \"myPass\";\n$dbname = \"myDB\";\n\n\ntry {\n\n    $db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    //$db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\n } catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\n    return;\n}   \n\n$query = (array_key_exists(\"query\",$_REQUEST) ? $_REQUEST[\"query\"] : \"\");\n\n\nif($query != \"\"){\n\n    $tag_desc = 'Aegerita candida';\n    // Code works if I limit to \"SELECT Titre FROM description WHERE tag = :tag LIMIT 1\";\n    $sql_description = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n    $stmt = $db->prepare($sql_description);\n    $stmt->bindParam(':tag', $tag_desc, PDO::PARAM_STR);\n    \n    echo convert(memory_get_usage(true));  // returns 2mb\n    $stmt->execute();\n    $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n    \n    $i = 0;\n    \n    while ($row = $stmt->fetch()) {\n\n        if($i == 0) {\n\n            ?><table style=\"border-collapse:collapse;border: 0;table-layout: fixed;color: #063850;background-color: #DDDDDD;text-align: left\"><thead><tr style=\"border: 2px solid #063850;\"> <?php\n            foreach (array_keys($row) as $key) {\n                //print_r($key);\n                echo (\"<th style='padding:5px;border: 2px solid #063850;position:sticky;top: -2;z-index:10;background-color:#e5a045'>$key</th>\");\n            }\n            echo (\"</tr></thead>\");\n        }\n\n        $i++;\n\n        echo (\"<tr style='border: 2px solid #063850'>\");\n        foreach ($row as $value) {\n            echo (\"<td style='padding:2px;border: 2px solid #063850'>$value</td>\");\n            // <img src=\\\"$value\\\" height=\\\"400\\\" >\n        }\n        echo (\"</tr>\");\n    }\n    \n    if ($i > 0) {\n        echo (\"</table>\");\n        echo ('<div style=\"margin-top:400px\">&nbsp;</div>');\n    } else {\n        echo \"Aucun r\u00e9sultat\";\n    }\n\n}\n\n$db = null;\n\nHas mentioned it automatically work if I limit my sql to a couple fields.\nThe error is still on the stmt->execute() line.\n",
        "Answer": "Could it be that the issue is your data model?\nIf you have a table that has a lot of nulls, then the data is most likely not normalized.\nInstead of having 256 columns in your table, maybe just have the ones that are always there, and then relate it to a separate table with three fields: foreign key to the main table, a tag field and a value field.\nIf you are rewriting your application to USE PDO anyway, some long-term considerations could be included.\nExample table\nLayout like yours (all data in one table):\n\n\n\n\nid\nname\nemail\nsomeotherdata\ntag1\ntag2\ntag3\ntag4\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\nNULL\na\nNULL\n100\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\nc\na\nNULL\n400\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\nNULL\nNULL\n5000\nNULL\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\nNULL\na\nNULL\n100\n\n\n\nSuggested Tag-Value table layout\nMain Table\n\n\n\n\nid\nname\nemail\nsomeotherdata\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\n\n\n\n\nTag-Value Table\n\n\n\n\nid\ntag\nvalue\n\n\n\n\n1\ntag2\na\n\n\n1\ntag4\n100\n\n\n2\ntag1\nc\n\n\n2\ntag2\na\n\n\n2\ntag4\n400\n\n\n3\ntag3\n5000\n\n\n4\ntag2\na\n\n\n4\ntag4\n100\n\n\n\nUsage\nInstead of selecting just your row, you WILL need to either join the results together, or make two separate calls. I would suggest two calls, especially since you are rtunning into memory issues.\nSELECT \n  id, \n  name,\n  email,\n  someotherdata\nFROM\n  MainTable\nWHERE\n  id = 1;\n\n-- and then the tags\nSELECT \n  id, \n  tag,\n  value\nFROM\n  TagValueTable\nWHERE\n  id = 1; -- reference to the main table\n\n\n\nAdvantaages of this normalized approach\n\nLess bloat (not so many nulls)\nSimpler structures\nREST ready\nMore resilient\n\nAdd tags without changing the DDL of the database (ALTER)\n\n\nYou can still get the original layout by making subselects and transpositions in mysql\nYou can easily make statistics on the tags related to each other\n\nDisadvantages\n\nComplexity of the data model increases\nYou need to do a lot of extra SQL gymnastics to get EXACTLY what you had before\n\n",
        "Source": "https://stackoverflow.com/questions/77895050/how-to-limit-memory-usage-with-pdo-in-mariadb-fatal-error-allowed-memory-size"
    },
    {
        "Title": "PHP: Prepare JSON selector to Prevent MySQL Injection",
        "Question": "What is the best/proper way to prepare a dynamic MySQL JSON selector for queries, in order to prevent SQL injection? As an example, say I want to execute the following query:\nSELECT `key` ->> \"$.key.path\" AS `setting_value`\nFROM `settings`\nLIMIT 1\n\nBut I want to make the key path dynamic, e.g.:\n$sql = <<<SQL\n    SELECT `key` ->> \"{$path}\" AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nWith conditional values, I can structure the SQL for a prepared statement using PDO, e.g.:\n$sql = <<<SQL\n    SELECT *\n    FROM `settings`\n    WHERE `other_field` = :field_val\n    LIMIT 1\nSQL;\n\n$statement = $this->handle()->prepare($sql);\n$statement->execute([':field_val' => 'some val']);\n$records = $statement->fetchAll(PDO::FETCH_OBJ);\n\nAdding something like the following to my database adapter (or even to my helper functions) seems rather inelegant and prone to errors/issues:\n    public function cleanJsonSelector(string $selector) : string {\n        return preg_replace('/[^-\\$a-zA-Z0-9_\\[\\].*\\s]/', '', $selector);\n    }\n\nThoughts/help?\n",
        "Answer": "The -> and ->> operators only support string literals. They do not expressions, variables, or parameters.\nBut you can use any expression \u2014\u00a0including a parameter placeholder \u2014\u00a0in the equivalent JSON function JSON_EXTRACT().\nThe ->> operator is like JSON_UNQUOTE(JSON_EXTRACT(json_doc, path))\n$sql = <<<SQL\n    SELECT JSON_UNQUOTE(JSON_EXTRACT(`key`, :path)) AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nThis seems like an unnecessary inconsistency in the functionality of MySQL's JSON operators, but this is how it's implemented in the current MySQL version 8.3.\n\nFor what it's worth, it was requested to support expressions after the -> operator (and presumably also the ->> operator) here: https://bugs.mysql.com/bug.php?id=87360\nYou may want to log into the MySQL bug tracker site and click the \"Affects Me\" button to hopefully increase the priority of implementing that feature.\n\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => true (the default), then parameters are not true parameters, they are string-substitutions into the SQL query before it is parsed. So what looks like a parameterized query really uses a string literal as far as MySQL is concerned, and the ->> operator is successful.\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => false, then parameters placeholders are parsed by MySQL during the prepare step. Since parameters are not supported as the argument to the ->> operator, this will fail.\nMysqli only supports true parameters, so it will always fail.\n",
        "Source": "https://stackoverflow.com/questions/77892840/php-prepare-json-selector-to-prevent-mysql-injection"
    },
    {
        "Title": "SQL-Injection in duckdb-queries on pandas dataframes",
        "Question": "In a project I am working with duckdb to perform some queries on dataframes. For one of the queries, I have some user-input that I need to add to the query. That is why I am wondering if SQL-Injection is possible in this case. Is there a way a user could harm the application or the system through the input? And if so, how could I prevent this case? It seems that duckdb has no PreparedStatement for queries on dataframes.\nI already looked up in the documentation (https://duckdb.org/docs/api/python/overview.html) but couldn't find anything useful. The method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\nThere is another question on stackoverflow (Syntax for Duckdb > Python SQL with Parameter\\Variable) about this topic but the answer only works on real sql-connections and the version with f-strings seems insecure to me.\nHere is a small code sample to show what I mean:\nimport duckdb\nimport pandas as pd\n\ndf_data = pd.DataFrame({'id': [1, 2, 3, 4], 'student': ['student_a', 'student_a', 'student_b', 'student_c']})\n    \nuser_input = 3  # fetch some user_input here\n    \n# How to prevent sql-injection, if its even possible in this case?\nresult = duckdb.query(\"SELECT * FROM df_data WHERE id={}\".format(user_input))\n\nSo how would you approach this problem? Is sql-injection even possible? Thanks for your help and feel free to ask for more details, if you need some more information!\nEDIT: Fixed a syntax error in the code\n",
        "Answer": "\nThe method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\n\nIt seems it's possible:\n>>> duckdb.execute(\"\"\"SELECT * FROM df_data WHERE id=?\"\"\", (user_input,)).df()\n\n   id    student\n0   3  student_b\n\n",
        "Source": "https://stackoverflow.com/questions/77884985/sql-injection-in-duckdb-queries-on-pandas-dataframes"
    },
    {
        "Title": "SQL injection error in Modsecurity logs in Plesk",
        "Question": "I am receiving the following error for 1 of my wordpress site running on a Plesk server.\n[client 000.00.00.000] ModSecurity: Access denied with code 403 (phase\n 2). Pattern match \"[\\\\\\\\[\\\\\\\\]\\\\\\\\x22',()\\\\\\\\.]{10}$|\\\\\\\\b(?:union\n\\\\\\\\sall\\\\\\\\sselect\\\\\\\\s(?:(?:null|\\\\\\\\d+),?)+|order\\\\\\\\sby\n\\\\\\\\s\\\\\\\\d{1,4}|(?:and|or)\\\\\\\\s\\\\\\\\d{4}=\\\\\\\\d{4}|waitfor\\\\\\\\sdelay\\\\\\\\s'\n\\\\\\\\d+:\\\\\\\\d+:\\\\\\\\d+'|(?:select|and|or)\\\\\\\\s(?:(?:pg_)?sleep\\\\\\\\(\\\\\\\\d+\n\\\\\\\\)|\\\\\\\\d+\\\\\\\\s?=\\\\\\\\s?(?:dbms_pipe\\\\\\\\.receive_message\\\\\\\\ ...\" at \nREQUEST_COOKIES:sbjs_first. [file \"/etc/httpd/conf/modsecurity.d/rules\n/comodo_free/22_SQL_SQLi.conf\"] [line \"66\"] [id \"218500\"] [rev \"18\"] \n[msg \"COMODO WAF: SQLmap attack detected||website name|F|2\"] [data \n\"Matched Data: |||id=(none) found within REQUEST_COOKIES:sbjs_first: \ntyp=typein|||src=(direct)|||mdm=(none)|||cmp=(none)|||cnt=(none)|||trm=\n(none)|||id=(none)\"] [severity \"CRITICAL\"] [tag \"CWAF\"] [tag \"SQLi\"] \n[hostname \"website name\"] [uri \"/wp-login.php\"] [unique_id \"ZamB-\n8j9IfDbYiJgRoahGwAAAAM\"], referer:\n\nWhen I visited some pages on the frontend it gives this error:\nServer Error\n403\nForbidden\nYou do not have permission to access this document.\nThat's what you can do\nReload Page Back to Previous Page Home Page\nI wonder if this a real attack? or false positive\nI was able to export the site to local. It seems working ok there.\n",
        "Answer": "CRS dev-on-duty here. Even if you don't use CRS rules and this is a problem of COMODO WAF rules, I'll try to help. While searching for the cookie name sbjs_first, I found this GitHub issue here, which is an indication that this sourcebuster cookie looks legitimate. Maybe you'll even the solution to your problem in one of the comments in this issue.\nIf this isn't the solution, you may need to tune the rules. Maybe you can also use our (CRS) documentation on false positives and rule tuning.\n",
        "Source": "https://stackoverflow.com/questions/77842169/sql-injection-error-in-modsecurity-logs-in-plesk"
    },
    {
        "Title": "Oracle SP Checkmarx SAST scan showing Parameter Tampering",
        "Question": "SP accepts key and returns flag status. In Checkmarx SAST scan key, It is saying parameter not validated before being used in query. Please help to understand what validation can be added so that it passes the vulnerability test.\nCreate procedure sp_name (key varchar2, v_flag out number) as\nv_key varchar2(50);\nv_sql clob;\nBegin\nIf key is null then\nv_flag:=-1;\nElse\nv_key:=sys.dbms_assert.enquote_literal(upper(trim(key)));\nv_key:=replace(v_key,'''');\nv_sql:=q'[select flag from tbl where key=:1]';\nExecute immediate v_sql into v_flag using v_key;\nEnd if;\nException when no_data_found then\nv_flag:=-1;\nEnd;\n\nI tried bind variable and dbms_assert but still it shows code is vulnerable\n",
        "Answer": "Stop using EXECUTE IMMEDIATE when you do not need to (and trying to make it overly complicated) and use a simple SELECT ... INTO ... statement with the PL/SQL variable as the bind variable (and give the PL/SQL variable a different name to the table's column).\nThe procedure can be simplified to:\nCREATE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  SELECT flag\n  INTO   v_flag\n  FROM   tbl\n  WHERE  key=v_key;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nThen, if you have the sample data:\nCREATE TABLE tbl (key, flag) AS\n  SELECT 'A',  1 FROM DUAL UNION ALL\n  SELECT 'B',  2 FROM DUAL UNION ALL\n  SELECT 'C',  3 FROM DUAL UNION ALL\n  SELECT NULL, 4 FROM DUAL;\n\nThen:\nDECLARE\n  v_flag TBL.FLAG%TYPE;\nBEGIN\n  sp_name('A', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('B', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('C', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('D', v_flag);\n  DBMS_OUTPUT.PUT_LINE('D: ' || v_flag);\n  sp_name(NULL, v_flag);\n  DBMS_OUTPUT.PUT_LINE('NULL: ' || v_flag);\nEND;\n/\n\nOutputs:\n\nA: 1\nB: 2\nC: 3\nD: -1\nNULL: -1\n\n\nOr, if you want it slightly more complicated to avoid the SELECT if the key is NULL then:\nCREATE OR REPLACE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  IF v_key IS NULL THEN\n    v_flag := -1;\n  ELSE\n    SELECT flag\n    INTO   v_flag\n    FROM   tbl\n    WHERE  key=v_key;\n  END IF;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nfiddle\n",
        "Source": "https://stackoverflow.com/questions/77841440/oracle-sp-checkmarx-sast-scan-showing-parameter-tampering"
    },
    {
        "Title": "What is the correct syntax for dollar-parameters in PostgreSQL queries?",
        "Question": "I am struggling with the correct syntax for a dollar-parameter. It sometimes works, sometimes not.\nI am using the 'pg' package for NodeJS, but since AFAIK parsing the query happens on the server side, I don't expect this to matter.\nCode:\nconst client: PoolClient = ...;\nawait client.query('SELECT \\'foo\\' = $1', [projectId]);\nawait client.query('SET \"gvc.currentProjectId\" = $1', [projectId]);\n\nThe first query is obviously useless, but I added it to experiment with the syntax. An error occurs in the second query, so the first one seems to work. The second one fails with:\nunexpected exception error: syntax error at or near \"$1\"\n\nIs it even possible to use dollar-parameters in the value for SET? I want to secure my application against SQL injection attacks, so manually escaping the projectId is a last resort.\n",
        "Answer": "As explained in https://dba.stackexchange.com/a/333947, SET can indeed only take literal values, no parameters or query results. That post links to the set_config command, which does not have such a restriction.\nhttps://pgpedia.info/s/set_config.html\n\nNeither the post not the documentation explain why both exist, nor why SET cannot take parameters since set_config demonstrates that it is possible to do so.\nSimply using set_config over SET solves the problem.\n",
        "Source": "https://stackoverflow.com/questions/77839814/what-is-the-correct-syntax-for-dollar-parameters-in-postgresql-queries"
    },
    {
        "Title": "How do I write prepared statements in ballerina?",
        "Question": "Is there a way to write prepared statements for SQL in ballerina? or is it a good practice to use the following method for that?\nfunction selectUserQuery(string username) returns sql:ParameterizedQuery => `SELECT * FROM users WHERE user_name=${username}`;\n\n",
        "Answer": "In ballerina sql:ParamerterizedQuery works as a prepared statement. (this differs a little from other languages as ballerina mandates giving the variable order, when writing the statement itself)\nYes, using functions is the best practise to keep SQL statements in ballerina.\nFor the sake of completeness, I would like to quote the following from this article.\nConsider the below statement,\nsql:ParameterizedQuery selectQuery = `SELECT * FROM users WHERE user_name=${username}`;\nBallerina executes this query in multiple steps,\n\nTemplate the query:\nThe sql module will replace the insertions in the query using ?. (e.g. `SELECT * FROM users where user_name=?`) Here, all insertions in the query are considered to be user inputs.\n\nThe database compiles the query:\nThe database validates the templated SQL query for syntax and semantics (column availability, authorization) errors. Finally, the server parses the query.\n\nPlaceholder replacement:\nThe programme sends all the user data values to the database. The database will replace the placeholders at this point. However, since the query is pre-compiled, even if the database appends the values, the scope of the execution will not change. i.e. SQL Injection cannot turn a SELECT command into a DELETE.\n\nQuery execution.\n\n\n",
        "Source": "https://stackoverflow.com/questions/77763194/how-do-i-write-prepared-statements-in-ballerina"
    },
    {
        "Title": "Problem with identical metrics results after machine learning",
        "Question": "When trying machine learning on a dataset, I got the same results for metrics such as accuracy and F-score on different machine learning algorithms.\nI have a dataset on which I trained my chosen algorithms. I found it on the Kaggle website: source.\nHere are code snippets from the Jupiter file, and the results of their execution:\nList of connected libraries\nIN:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report\nimport joblib\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras import models, layers\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nLoading dataset\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\ndf.head(10)\n\nLoad, process and split the data for further training of the classification model\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\n\ndf = df[(df['attack_type'] == 'sqli') | (df['attack_type'] == 'norm')]\n\nX = df['payload']\ny = df['label']\n\nvectorizer = CountVectorizer(min_df = 2, max_df = 0.8, stop_words = stopwords.words('english'))\nX = vectorizer.fit_transform(X.values.astype('U')).toarray()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)\n\nOUT:\n(8040, 1585)\n(8040,)\n(2011, 1585)\n(2011,)\n\nNaive Bayes Classifier\nIN:\nnb_clf = GaussianNB()\nnb_clf.fit(X_train, y_train)\ny_pred = nb_clf.predict(X_test)\nprint(f\"Accuracy of Naive Bayes on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Naive Bayes on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of Naive Bayes on test set : 0.9806066633515664\nF1 Score of Naive Bayes on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       0.97      0.98      0.97       732\n        norm       0.99      0.98      0.98      1279\n\n    accuracy                           0.98      2011\n   macro avg       0.98      0.98      0.98      2011\nweighted avg       0.98      0.98      0.98      2011\n\nRandom forest algorithm:\nIN:\nrf_clf = RandomForestClassifier()\nrf_clf.fit(X_train, y_train)\ny_pred_rf = rf_clf.predict(X_test)\nprint(f\"Accuracy of Random Forest on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Random Forest on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred_rf))\n\nOUT:\nAccuracy of Random Forest on test set : 0.9806066633515664\nF1 Score of Random Forest on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.96      0.98       732\n        norm       0.98      1.00      0.99      1279\n\n    accuracy                           0.99      2011\n   macro avg       0.99      0.98      0.99      2011\nweighted avg       0.99      0.99      0.99      2011\n\nSupport vector machine\nIN:\nsvm_clf = SVC(gamma = 'auto')\nsvm_clf.fit(X_train, y_train)\ny_pred = svm_clf.predict(X_test)\nprint(f\"Accuracy of SVM on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of SVM on test set: {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of SVM on test set : 0.9189457981103928\nF1 Score of SVM on test set: 0.8658436213991769\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.76      0.87       689\n        norm       0.89      1.00      0.94      1322\n\n    accuracy                           0.92      2011\n   macro avg       0.95      0.88      0.90      2011\nweighted avg       0.93      0.92      0.92      2011\n\nAs you can see when training on different machine learning algorithms, we get the same results in the case of random forest and naive Bayesian classifier.\nI hope you can help me to fix a possible bug in the code or improve it in some way.\n",
        "Answer": "In your code for Random Forest, you're storing predictions as y_pred_rf but calling your metrics on y_pred\n",
        "Source": "https://stackoverflow.com/questions/77686328/problem-with-identical-metrics-results-after-machine-learning"
    },
    {
        "Title": "WordPress sql injection",
        "Question": "Thanks for letting me post here, I'm just starting to learn programming.\nI have a problem with a WordPress site which I update for my dad's local motorcycle road safety training group, which is run as a charity/non-profit by volunteer instructors. The hosting company (LCN) has taken the site down and emailed the group the following:\n\n\nDomain name : kamg.org.uk\nDatabase : kamg_org_uk_dbtest\nMySQL Server : database3.lcn.com\nOur monitoring scripts have detected an SQL injection attack occurring on your web site kamg.org.uk, using exploitable code hosted there.\nThe SQL queries that have been flagged as suspicious/malicious are listed here :\n----- BEGIN REPORT -----\nTIME RUNNING: 01:34:02\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\nTIME RUNNING: 01:34:00\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\n----- END REPORT -----\n\nWP, plugins and theme are all kept up to date at all times.\nCan I safely just delete those lines from the database to clean the site?\nLCN offer the group free charity hosting but I have found over 1600 domains share the same server. Once the sql injection is cleaned the group will move to managed WP hosting in the hope it will be more secure.\nThx,\nNiels\nI have tried reinstalling WordPress by FTP, but the hosts have denied the attempt, having removed all permissions.\nTheir support is appalling, taking 4 days to respond to queries, and then answering the wrong question with a cut & paste stock response.\nI have just started learning, but I'd be happy to go in and edit files (with some nervousness) but haven't attempted anything at this stage.\n",
        "Answer": "It's not the data that is at fault, it's something in the code of WordPress, or more likely one of the plugins or themes you have installed.\nThe way the code works is something like this:\n$query = 'SELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key,\n  wp_usermeta.meta_value \nFROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"' . $variable . \n  '\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" \n  AND wp_users.ID = wp_usermeta.user_id';\n\nBut the value of $variable has been exploited by some attacker. They set it to the following string:\n\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\n\n(even including the quote characters.)\nWhen the variable is concatenated into the query, it causes the SQL query to have extra expression terms, that the attacker injected.\nIt looks like they're forcing sleep() calls to test if certain tables exist. They'll use this method to learn all your table names. Then they'll use information in subsequent attacks, to read those tables. SQL injection hackers have to probe using techniques like this to try to avoid detection.\nThe original query may be a normal part of the code of WordPress or one of the plugins or themes. But the programmer made a mistake by concatenating a variable whose value was set from untrusted input. Programmers aren't supposed to do this, but many are either unaware of the risk, or else they think it won't happen to their code.\nYou said you are up to date on all the versions of WordPress and plugins, but the vulnerability may exist in the current version. In other words, no newer version with a fix has been released (yet).\nSometimes it doesn't help to update the software, because the newest version has introduced a new vulnerability that didn't exist before. Programmers add new code in every version, and security vulnerabilities are the result of mistakes made by software developers. New vulnerabilities occur regularly.\nWordPress itself is pretty well tested, that's why I suppose the vulnerability may be in a plugin or theme. I don't know which plugins you use.\nOr you may have added custom code that has the vulnerability, so there is no other person who will update it. It's up to you.\nWhat you have to do now is figure out which line of code, not data, is responsible for the vulnerability. If you don't have the skills to do this (basically a text search across many files to find a line of code similar to the one I showed above), then you need to employ someone to help you.\nOnce you find the line of code responsible, either fix it yourself, or if it's in a plugin you could just uninstall that plugin to remove the vulnerable code.\nIt sounds like your hosting company isn't going to help. They probably have very little resources to provide customer service in this case. Even if you fix the code, it sounds like it will be a struggle to get them to allow you to restore your website.\nYou may need to find a new hosting provider if your current one won't communicate or let you have access to your site.\nBut a different hosting provider won't be more secure, because the fault is not with the hosting provider. The fault is in the code you are using.\nIf you install the same code on the current provider or another provider without fixing it, the code will still be vulnerable to hacks. If you upload code you know is vulnerable, then it'll be your fault.\n",
        "Source": "https://stackoverflow.com/questions/77602811/wordpress-sql-injection"
    },
    {
        "Title": "Protects dplyr against SQL injections?",
        "Question": "I would like to use R-Shiny to develop a web app that accesses an SQL database with sensitive data.\nSo far I have written the database query as a pure SQL string.\nHowever, this approach is very susceptible to SQL injections.\nMy intention is therefore to write the database query with dplyr, as the query is written in R and not in pure SQL.\nUnfortunately, I have not yet been able to find any more detailed information or an estimate on this topic online. Therefore I would like to clarify my request in this question.\nSo far I have only read a statement about the dbplyr::translate_sql() function that is supposed to protect SQL injections:\nhttps://dbplyr.tidyverse.org/articles/sql-translation.html#vectors\nAs my data is very confidential, dbplyr / dplyr should provide 100% protection against SQL injections.\nI would be very pleased to receive further information and assessments on this topic.\nUPDATE\nAs suggested in the comments, I have added an example for reproducibility:\n(adapted from: https://shiny.posit.co/r/articles/build/pool-dplyr/)\nlibrary(shiny)\nlibrary(DBI)\nlibrary(pool)\nlibrary(tidyverse)\nlibrary(dbplyr)\n\npool <- dbPool(\n  drv = RMySQL::MySQL(),\n  dbname = \"shinydemo\",\n  host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",\n  username = \"guest\",\n  password = \"guest\")\n\nui <- fluidPage(\n  textInput(\"ID\", \"Enter your ID:\", \"5\"),\n  tableOutput(\"tbl\"),\n  numericInput(\"nrows\", \"How many cities to show?\", 10),\n  plotOutput(\"popPlot\"))\n\nserver <- function(input, output, session) {\n  output$tbl <- renderTable({\n    pool %>% tbl(\"City\") %>%\n      filter(ID == !!input$ID)\n  })\n  output$popPlot <- renderPlot({\n    df <- pool %>% tbl(\"City\") %>%\n      head(as.integer(input$nrows)[1]) %>% collect()\n    pop <- df$Population\n    names(pop) <- df$Name\n    barplot(pop)\n  })\n}\n\nshinyApp(ui, server)\n\n",
        "Answer": "The threat of SQL injection depends on how the user-provided text is incorporated into the dynamic SQL query. So if you are trying to protect against injection, you need to assess each of the ways user input is used when querying the database.\nIn the example you have posted there are two pieces of user input:\n\ninput$nrows which is limited to numeric by the input widget\ninput$ID which is free text, and hence has greater risk of SQL injection.\n\nYou can use any of the approaches below to investigate each piece of user input. Overall, the approach I would choose is to Sanitise and then Review.\nThis answer focuses on the case where you are using dbplyr to translate from R to SQL. If other approaches are used to access the database (such as the DBI package) then a different approach will be required.\n\nOption 1) Review the SQL query that is generated\nConsider where input$ID is used in the example code:\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID)\n\nIn order to execute this, dbplyr will translate the dplyr commands from R into SQL. We can review this translation using the show_query command.\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID) %>%\n  show_query()\n\nThis will probably produce an SQL query similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value'\n\nYou do not need the entire Shiny app to test this for SQL injection. You can simply vary this query and see what happens. For example, try a simple alternative query:\nattempt_inject = 'my_id_value;SELECT 123'\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!attempt_inject) %>%\n  show_query()\n\nI suspect this will produce SQL similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value;SELECT 123'\n\nWhich would seem an effective prevention for SQL injection. But you will need to test this as thoroughly as required to ensure you are confident.\n\nOption 2) Review source code\nThe dbplyr package is open source and available online. You could review the source code to confirm how inputs are handled during translation.\nMy suspicion is that unless inputs are of type sql, then they will be escaped as either text or an SQL object.\nThere is an sql() function that converts input to type sql. One of its uses is to tell dbplyr not to translate the contents of the function but to use them as-is. This means that if your user can submit R objects as inputs then this is a significant area of vulnerability. However, this is unlikely to be the case as your app restricts users to submitting text and numeric input.\n\nOption 3) Sanitise your inputs before passing them to dbplyr\nR has several advantages over pure SQL, in that you can use R to validate users' input before including it in a dbplyr query.\nConsider this an an alternative to your output$tbl component of the app:\noutput$tbl <- renderTable({\n  current_ID = as.character(input$ID)\n  acceptable_ids = pool %>%\n    tbl(\"City\") %>%\n    select(ID) %>%\n    distinct() %>%\n    collect() %>%\n    pull()\n  req(current_ID %in% acceptable_ids)\n\n  pool %>%\n    tbl(\"City\") %>%\n    filter(ID == !!current_ID)\n})\n\nThis approach enforces that the user input is converted to type character and is a value found in the ID column, before passing the user input through to dbplyr.\nThe exact choice of checks will depend on how user input is used. I often include a check that user input does not contain special characters (such as ;{}[]* or spaces).\ndbplyr includes commands to delimit certain inputs. Investigate and use these commands where applicable.\nNotes\n\nreq is a Shiny command that stops execution of a component if the condition is not met. You can use stopifnot outside a Shiny context.\nFetching the list of acceptable ids within the renderTable statement is not efficient app design. This should be calculated once and reused multiple times.\n\n",
        "Source": "https://stackoverflow.com/questions/77598340/protects-dplyr-against-sql-injections"
    },
    {
        "Title": "Interfacing with &quot;API&quot; that only takes raw SQL: Node / pSQL sanitization without prepared statements or parameterization?",
        "Question": "I am working with an \"API\" provided by a client's ERP. They do not have actual endpoints, rather a REST endpoint that you can send raw sql queries to, that they then execute. To make matters even worse, they only recently upgraded to https.\nI am writing some Node cloud functions to interface with this system. There will be two roles working with this product, and I need to prevent the role with less permissions to fire unwanted queries in the application when they are searching with specific parameters.\nFor filtering, I can just check if the values are in an array of allowed terms, but with a search I am not quite sure how to approach this. My general opinion has always been to use parameterized statements, but that is not an option here as I can't actually establish a connection to their database. I also saw some posts where people suggested wrapping the strings in dollar signs since the underlying DB is PostgreSQL, but I could not find anything in the documentation for this purpose.\nI was also thinking about only allowing alpha-numeric characters, but this seems like a potentially weak approach. If anyone knows of any libraries or ideas for dealing with this situation, I would greatly appreciate it.\nI tried looking for a Node library or piece of documentation that could help this situation, but I could not find anything relevant.\n",
        "Answer": "I found this interesting post around the question: https://security.stackexchange.com/questions/172297/sanitizing-input-for-parameterized-queries.\nTo summarize it, doing data sanitization(more like general validation) is always good idea but it will not necessarily guarantee that query will be safe. Directly running queries without parameterized statements will be still quite a big risk even if you find some great library for cleaning data to make it SQL safe.\nInstead try to think of ways to not run user input directly. Add some kind of mapper in between which will accept some filter codes and translate it into SQL values. For example if I had delivery company and wanted to filter all deliveries with status delivered, I would use mapping like this:\nconst status_code = \"DELIVERED\"\nconst statusMapper = {DELIVERED: \"delivered\"(value to filter in sql)}\n\nAnd if my mapper does not find the exact match, return error or empty result and don't run the query at all. If its search bar, try to identify most frequent search keywords and build mapper for that. Obviously it will not be too accurate, but still better than having risk of sql injection, especially if you work with sensitive and important data(I assume you work with company's internal data since you integrate with ERP).\n",
        "Source": "https://stackoverflow.com/questions/77516509/interfacing-with-api-that-only-takes-raw-sql-node-psql-sanitization-without"
    },
    {
        "Title": "Dremio SQL injection vulnerability",
        "Question": "I'd like to query an S3 storage containing parquet files through my Spring Java app with Dremio. These are dynamic queries with user given parameters.\nI use Apache Arrow SQl driver and simply run queries by a JdbcTemplate instantiated with a DataSource from the following properties:\n  driver-class-name: org.apache.arrow.driver.jdbc.ArrowFlightJdbcDriver\n  url: jdbc:arrow-flight-sql://localhost:32010/?useEncryption=false\n  username: user\n  password: pwd\n\nFor the sql string I use a String formatted with the user given value:\n\"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = '%s';\".formatted(userInput)\n\nIt works well but needless to say how big of an SQL injection opportunity it is. If I try to use a Prepared Statement:\nString sql = \"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = ?\"\njdbcTemplate.query(sql, ps -> ps.setString(1, userInput), rs -> {\n  //handling the result set\n});\n\nI get the following error:\ncfjd.org.apache.arrow.flight.FlightRuntimeException: Cannot convert RexNode to equivalent Dremio expression. RexNode Class: org.apache.calcite.rex.RexDynamicParam, RexNode Digest: ?0\n\nI'm finding ambiguous information on the web. The claim that Dremio doesn't support prepared statements could be found in some forums, but all of these comments are several years old*, moreover the official Dremio site has an article recommending the usage of prepared statements..\nAs far as I know Dremio uses ANSI SQL under the hood, which I believe supports prepared statements. Or does that depend on the database engine and not the dialect? Can anyone confirm that it is still not possible with Dremio? Then I'll stop pursuing it further.\nIf that's the case, I will escape the unsafe characters, use a dictionary for encoding and decoding user given characteres, etc.\nIf you have some other advices or experiences mitigating SQL injection without prepared statements though, I would appreciate them as well!\nThank you!\n*latest update I found: https://community.dremio.com/t/sql-parameterization-support/1733/5\n",
        "Answer": "I'll post my findings as an answer, maybe it could be useful for someone in the same boat:\nIn lack of any other ideas I went down the encode/decode road.\nFor that the initial idea was to use an own dictionary, but I figured that hexadecimal encoding should be sufficient enough.\nLuckily Dremio SQL has a FROM_HEX function, which can return a BINARY value for the given hexadecimal string.\nWith that I can (so far..) safely build dynamic queries with any kind of user given input turned into HEX strings and then converting back at execution time, with the function behaving kind of like a wrapper.\nStill, this isn't a perfectly calming solution, but as far as I can see, there isn't really a better option at the moment. I heard Dremio will implement prepared statements (quite a shock that they haven't already), until then, let's hope for the best!\n",
        "Source": "https://stackoverflow.com/questions/77501615/dremio-sql-injection-vulnerability"
    },
    {
        "Title": "SQL Injection in Stored Procedures via MySQL Connector",
        "Question": "I use the mysql-connector-python driver for executing database operations. Recently, I came across stored procedures in MySQL and decided to migrate some of my APIs from utilizing cursor.execute() to cursor.callproc(proc_name, args=()). This transition has proven successful, and everything works seamlessly. However, I'm uncertain about the vulnerability of these stored procedures to SQL injection.\nTo assess this, I created a test stored procedure and examined its susceptibility to SQL injection payloads.\nStored Procedure:\nDELIMITER //\nCREATE PROCEDURE TestProcedure(IN arg_test VARCHAR(150))\n  BEGIN\n    IF EXISTS (SELECT 1 FROM Random_Table WHERE test = arg_test) THEN\n        SELECT 'success' AS message;\n    ELSE\n        SELECT 'failed' AS message;\n    END IF;\n  END //\nDELIMITER ;\n\nPayloads:\n\n' or 1=1 -- \n\" or 1=1 -- \n\nSurprisingly, none of these payloads yielded any successful results. Seeking further assurance, I consulted one of the database administrators in the company. Although he expressed uncertainty, he suggested that these stored procedures function similarly to prepared statements. This aligns with my observation that the cursor.callproc() method accepts user inputs as arguments via the args parameter, resembling prepared statements.\nIf this interpretation is accurate, it implies that using the cursor.callproc() method ensures a secure backend, free from SQL injection concerns. Despite these positive indications, I would like to seek additional confirmation here to guarantee the safety of this approach.\n",
        "Answer": "Like it often happens, the problem is in the terminology. And it creates a lot of trouble (and vulnerabilities). A programmer should be always strict in their definitions.\nWhat you are talking about here is using stored procedure's parameter. Such a parameter is a special case related to stored procedures, and very similar in nature to SQL variables.\nIn this case your database doesn't add the contents of arg_test into the SQL body (as it would have been in python if you did something like + arg_test +) and then evaluate the resulting SQL. On the contrary, is uses arg_test as though it's a variable (in this sense, it's indeed similar to prepared statements, but technically it's entirely different matters).\nWhile speaking of stored procedures, they are irrelevant to injections. By itself, just using a procedure doesn't guarantee anything. One can write a procedure which is immune to injection, and write another which is prone to injection. Just like any other code.\nBut as long as you are just using a parameter passed to the procedure - it's safe.\n",
        "Source": "https://stackoverflow.com/questions/77500796/sql-injection-in-stored-procedures-via-mysql-connector"
    },
    {
        "Title": "Protection query against SQL injection, using PDO",
        "Question": "may I ask you how to make this protected against sql injection?\nI have\n$podminkazeme = \"\";\n$podminkakraj = \"\";\n\nif ( isset( $_GET[ \"zeme\" ] )and !empty( $_GET[ \"zeme\" ] ) ) {\n   $podminkazeme = \"and nb.zemehledani in (\" . str_replace( '%2C', ',',  $_GET[ \"zeme\" ] ) . \")\";\n};\n\nif ( isset( $_GET[ \"kraj\" ] )and !empty( $_GET[ \"kraj\" ] ) ) {\n  $podminkakraj = \"and nb.krajhledani in (\" . str_replace( '%2C', ',', $_GET[ \"kraj\" ]  ) . \")\";\n};\n\n$conn = new PDO( DB_DSN, DB_USERNAME, DB_PASSWORD );\n$sqljednotkaa = \"\n  select nb.*, \n    dv.nazev as developer, \n    UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, \n    UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, \n    uz.nazev as skladUpravil, \n    uzm.nazev as makler, \n    tp.nazev as typProdeje, \n    dal.nazev as nazevdalnice\n  from nabidka nb \n  left join uzivatele uz on uz.id=nb.skladUpravil \n  left join uzivatele uzm on uzm.id=nb.makler \n  left join typProdeje tp on tp.id=nb.typProdeje \n  left join developer dv on dv.id=nb.developer\n  left join dalnice dal on dal.id=nb.dalnice \n  where nb.emptyid is null \n    $podminkaid \n    $podminkastav \n    $podminkaupraveno \n    $podminkavelikost \n    $podminkacena \n    $podminkamakler \n    $podminkaexport \n    $podminkatypprodeje \n    $podminkatypnemovitosti \n    $podminkazeme \n    $podminkadalnice \n    $podminkakraj \n    $podminkaokres \n    $podminkadeveloper \n    $podminkatechnickeparametry \n    $podminkahledanislovo \n  order by nb.emptyid asc $razenipodminka\";\n\n$stjednotkaa = $conn->prepare( $sqljednotkaa );\n$stjednotkaa->execute();\n\n",
        "Answer": "Try this\n$conditions = [];\n$parameters = [];\n\nif (isset($_GET[\"zeme\"]) && !empty($_GET[\"zeme\"])) {\n    $zemeValues = explode(',', $_GET[\"zeme\"]);\n    $conditions[] = \"nb.zemehledani IN (\" . implode(', ', array_fill(0, count($zemeValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $zemeValues);\n}\n\nif (isset($_GET[\"kraj\"]) && !empty($_GET[\"kraj\"])) {\n    $krajValues = explode(',', $_GET[\"kraj\"]);\n    $conditions[] = \"nb.krajhledani IN (\" . implode(', ', array_fill(0, count($krajValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $krajValues);\n}\n\n$conn = new PDO(DB_DSN, DB_USERNAME, DB_PASSWORD);\n$sqljednotkaa = \"SELECT nb.*, dv.nazev as developer, UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, uz.nazev as skladUpravil, uzm.nazev as makler, tp.nazev as typProdeje, dal.nazev as nazevdalnice from nabidka nb left join uzivatele uz on uz.id=nb.skladUpravil left join uzivatele uzm on uzm.id=nb.makler left join typProdeje tp on tp.id=nb.typProdeje left join developer dv on dv.id=nb.developer left join dalnice dal on dal.id=nb.dalnice where nb.emptyid is null\";\nif ($conditions) {\n    $sqljednotkaa .= \" AND \" . implode(\" AND \", $conditions);\n}\n$sqljednotkaa .= \" ORDER BY nb.emptyid ASC $razenipodminka\";\n$stjednotkaa = $conn->prepare($sqljednotkaa);\n$stjednotkaa->execute($parameters);\n\n",
        "Source": "https://stackoverflow.com/questions/77416426/protection-query-against-sql-injection-using-pdo"
    },
    {
        "Title": "Enforcing row-level security in a shared postgres pool",
        "Question": "I'm working on a typical client-server webapp. It is using a system somewhat like GraphQL where the client has some flexibility in specifying what data it needs, without custom API endpoints for every type of data. The server is running node, and is using node-postgres with a typical pg.Pool. A client could send something like this:\n{select: '*', from: 'expenses', where: {'op': 'gt', 'lhs': 'expenses.amount', 'rhs': 20}}\n\nwhich would be translated to SELECT * FROM expenses WHERE expenses.amount > $1 (given $1 = 20). With enough care, this system can be made safe from injection attacks.\nI'd also like to incorporate row-level security policies. For example:\ncreate policy only_see_own_expenses on expenses using (expenses.user_id = <USER ID>);\n\nAs an extra security barrier, I want to make sure that even if an injection attack is succesful, a client can not \"unset\" its user ID.\nI've seen <USER ID> been defined in a few ways:\n\ncurrent_user, in which case every user of the app also needs a postgres user/role\nAn arbitrary setting like current_setting('myapp.user_id') in combination with a SET LOCAL myapp.user_id = ... at the start of a transaction\n\nApproach (2) seems most flexible to me. I'd just wrap every generated SQL query in a BEGIN; SET LOCAL myapp.user_id = 123; {generated query}; END;. The problem is that an attacker could inject another SET LOCAL statement, and impersonate another user.\nIn approach (1) you can similarly wrap every generated query with a SET ROLE ... statement at the start, yielding the same problem. An alternative is to create a new connection for each query with that specific role. I believe postgres would never allow that connection to switch to another role. But setting up a new connection per query would result in a lot of overhead.\nHow do I enforce row-level security without the performance hit of a new connection per query?\n",
        "Answer": "As you observe, setting a placeholder parameter and using SET LOCAL ROLE to temporarily assume a different role can be subverted by attackers who can execute arbitrary SQL, like in an SQL injection attack.\nI don't think that there is a way to accomplish what you want that is safe from SQL injection. The problem is a fundamental one: you handle authentication in the application, not in the database (where you are using a single application user to benefit from connection pooling), but you want to have the database handle authorization via row-level security. That requires a way for the application to tell the database what the application user is. Now the only way that the application can tell the database anything is by using SQL, and an attacker who can run arbitrary SQL statements can always subvert that.\nI think that the only option for you is to harden your application against SQL injection attacks.\n",
        "Source": "https://stackoverflow.com/questions/77272972/enforcing-row-level-security-in-a-shared-postgres-pool"
    },
    {
        "Title": "SQL Injection - Python - MySQL",
        "Question": "Basically,\nI'm trying to find ways to explore SQL Injection vulnerabilities in  the code presented below. The code has another layer, presentation, where it asks the user for board_name input.\nTable_name is an inside variable, user doesn't have control over it.\n    def find_board_by_name(cls, connector, board_name, table_name: str):\n        query = \"SELECT * FROM {} WHERE name = '{}'\".format(table_name,board_name.title())\n        print(query)\n        try:\n            connector.mycursor.execute(query)\n            res = connector.mycursor.fetchone()\n            if res:\n                return res[1]\n            return None\n        except Exception as e:\n            raise e\n        \n\nTried to :\n1- board_name as:          ' OR '1'='1\nIt worked, program returned to me me first item on the table (it wasn't supposed to, since I didn't provide any name)\n2- Tried to put board_name as:          ';Delete Table BoardGames;\nIt didn't work, mysql.connector.errors.InterfaceError: Use multi=True when executing multiple statements was presented to me.\nSo my question is \" mysql.connector\" is protecting me against the majorities of the SQL Injections? Since I didn't set the \"multi\" tag in the code to True?  Could you show me other ways to explore vulnerabilities in this code? Besides the 1 and 2.\nI guess I know how to fix the SQL Injection problem: \"connector.mycursor.execute(query, values)\" probably will do the job.  But, I'm trying to understand better what kind of SQL Vulnerabilities I would have with this original code without this fix.\n",
        "Answer": "SQL injection isn't always malicious. It could result in a simple error instead of deleting all the student records.\nFor example, if some legitimate user of your site is named \"O'Reilly\" then your code formatting would have an imbalanced quote, which would be a syntax error:\nSELECT * FROM tablename WHERE name = 'O'Reilly'\n                                       ^ wtf\n\nUsing parameters avoids this kind of problem. Query parameters aren't just a quick way of interpolating variables. They either escape special characters in the dynamic content (by default Python does this), or else full-blown parameters keep the values separate from the SQL query until after it has been parsed by the SQL server. So no special characters can ever cause a syntax error.\nBut table names and other identifiers cannot be parameters. You can use parameters only in place of SQL values, like your quoted string in your example.\nYou said the user is not in control of the table name variable. That's great, but not sufficient.\nWhat if another programmer on your project isn't careful when calling your find_board_by_name() function, and inadvertently passes unsafe content as the table name? Note that unsafe content is more than just user input.\nWhat if the table name is a reserved keyword in SQL?\nSELECT * FROM order WHERE name = ?\n              ^ syntax error\n\nWhat if the table name contains whitespace or punctuation? There are other risks.\nYou should code your function so it does not trust its caller. For SQL values, do use parameters of course. For other dynamic elements like table names, you do have to interpolate variables into the SQL string, but you can be defensive:\n\nUse an allowlist to verify the table name is a legitimate known table name.\n\nDelimit the table name in back-ticks in your SQL, just in case it's a reserved word or not a simple identifier.\nlegit_table_names = Set(['table1', 'table2', 'table3'])\nif table_name not in legit_table_names:\n  return error # pseudocode\n\nquery = f\"SELECT * FROM {table_name} WHERE name = %s\"\n\n\n\n(I prefer f-strings instead of format() in modern Python)\n",
        "Source": "https://stackoverflow.com/questions/77167563/sql-injection-python-mysql"
    },
    {
        "Title": "PHP Code Functioning as Intended but UNION Injection Payload Doesn&#39;t Work",
        "Question": "I am attempting to make a web application (LAMP stack - MySQL version: 8.0.36-0ubuntu0.22.04.1) that is vulnerable to a SQL UNION Injection attack (or some type of SQL injection attack). The code takes the user's input via POST parameters to get the VIN & mileage.\nThe following PHP Code handles the backend to adding the parameters to the database:\n// If SESSION variables are set then proceed to Mileage.php\n    if (isset($_SESSION['username'])) {\n        // PHP Code for Handling ADDING CAR\n        // Declare Variables\n        $username = $_SESSION['username'];\n        $vin = $_POST['vehicle'];\n        $mileage = $_POST['mileage'];\n\n        // Implement Try-catch for Error Hanlding\n        try {\n            // Add Mileage\n            if(isset($_POST['add_data'])) {\n                $query = \"INSERT INTO mileage_master.mileages (`username`, `VIN`, `mileage`) VALUES ('$username', '$vin', '$mileage')\";\n                $query_result = mysqli_query($db,$query);\n    \n            // Update Mileage\n            } elseif(isset($_POST['update_data'])) {\n                // Query to update associated VIN's Mileage\n                $update = \"UPDATE mileage_master.mileages SET mileage='$mileage' WHERE username='$username' AND VIN='$vin'\";\n                $update_result = mysqli_query($db,$update);\n            // Remove Mileage\n            } elseif(isset($_POST['remove_data'])) {\n                // Query to Remove VIN & Mileage\n                $remove = \"DELETE FROM mileage_master.mileages WHERE username='$username' AND VIN='$vin'\";\n                $remove_result = mysqli_query($db,$remove);\n            }\n        }\n        catch (mysqli_sql_exception $e) {\n            $showAlert = true;\n            // Display Syntax Error\n            $errorMessage = \"My SQL Error: \" . $e->getMessage();\n            // Display Query (Intentional Unsafe Coding Practices)\n            $errorMessage .= \"\\t||\\tQuery: \" . $sql;\n        }\n\n        \n    }    \n    else {\n        header(\"Location: /\");\n    }\n?>\n\nThe following PHP code prints the VIN & mileage to user's page:\n<?php\n    // Query to get all VINs associated with username\n    $result = mysqli_query($db,\"SELECT * FROM mileages WHERE username='$username'\");\n\n    echo \"<table style='margin-top: 35px;'>\";\n    echo \"<tr><th>VIN</th>\";\n    echo \"<th>Mileage</th></tr>\";\n\n    // While Loop to iterate through all returned rows\n    while($row = mysqli_fetch_assoc($result)) {\n        echo \"<tr style='text-align: center;'>\";\n        // VIN\n        echo \"<td>\" . $row['VIN'] . \"</td>\";\n        // Mileage\n        echo \"<td>\" . $row['mileage'] . \"</td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n?>\n\nMy thought process was that because the application uses dynamic queries an attacker could include some type of UNION SELECT statement. The UNION select statement's output would be stored within the VIN column for that query.\nHowever, I am unable to create a successful SQL Injection payload that would accomplish this.\nQuestion\nDo I need to change the logic of my application to make the exploit possible or is my idea not exploitable in the first place?\n",
        "Answer": "You can't get SQL injection in the SELECT query, since the user doesn't have control over the $username variable, and that's the only thing you substitute. But you can do it in the INSERT query, to insert extra rows in the table with arbitrary values.\nIt needs to terminate the current value list, then it can use a subquery in another value list, and finally it has to provide the beginning to match the end of the original value list.\n$vin = \"12345', '20'), ('baduser', (SELECT '67890'), (SELECT '30')), ('baduser2', '1111\";\n\nThis will put a bogus VIN and mileage into the row for $username, then insert additional rows for baduser and baduser2. baduser2 will get another bogus VIN and the mileage from the parameter.\nbaduser can use subqueries to get its VIN and mileage values, as long as the subqueries each only return one row and column. I used literals in the above example, but you can make them arbitrarily complex.\n",
        "Source": "https://stackoverflow.com/questions/78093937/php-code-functioning-as-intended-but-union-injection-payload-doesnt-work"
    },
    {
        "Title": "How to fix SQL injection if we have to use DB name dynamically in SQL Server?",
        "Question": "This is the implementation in code: the schema name comes from a configuration file and is different for each environment. Sonar throws SQL injection alert at this statement:\nselect * \nfrom dbName.dbo.stu_name;     <<dbname is the variable that comes from property file>>\n\nI tried these solutions:\n\nUsing query.setParameter(?,dbname). Tried passing dbname dynamically and vulnerability was fixed. When debugging, the query was throwing an error and did not execute.\n\nUsed String.format(select * from \\'%s\\',tablename.replace(\"\\'\",\"\\'\\'\")) - vulnerability fixed, but query failed to execute\n\n\nI tried various other solutions and nothing worked.\nCan anyone please help me with this?\n",
        "Answer": "The \"best\" defence you can do is not use dynamic SQL. Considering that this is the database that's dynamic, and based on a prior question, I would suggest that this is occurring from an application, so that means you don't need 3-part naming. Instead you parametrise the database name in the connection string and use 2-part naming; no dynamic SQL needed.\nIf you must use dynamic SQL, then the \"best\u2122\ufe0f\" defence would be to validate the database name, and then ensure you properly quote the database name when you inject it into your dynamic statement.\nHere I validate the database name in sys.databases and then use QUOTENAME to quote the name appropriately. If the database doesn't exist, no query is run (and no error is returned):\nDECLARE @DatabaseName sysname = N'YourDatabaseName';\n\nDECLARE @SQL nvarchar(MAX);\nSELECT @SQL = N'SELECT * FROM ' + QUOTENAME(d.name) + N'.dbo.stu_name;'\nFROM sys.databases d\nWHERE d.name = @DatabaseName;\n\nEXEC sys.sp_executesql @SQL;\n\n",
        "Source": "https://stackoverflow.com/questions/78027431/how-to-fix-sql-injection-if-we-have-to-use-db-name-dynamically-in-sql-server"
    },
    {
        "Title": "How to reduce vulnerability to cyber attacks from injection?",
        "Question": "I have very little knowledge about SQL injection, and there are probably other threats I am unaware of out there for stealing company data, how would I make this python code better in regards to security?\nmerge_query = \"\"\"\nMERGE INTO sql_table_name AS Target\nUSING (\n    VALUES {}\n) AS Source (transaction_year, month_num, month_name, price_nt)\nON Target.transaction_year = Source.transaction_year \nAND Target.month_num = Source.month_num\nWHEN MATCHED AND (Target.month_name != Source.month_name OR Target.price_nt != Source.price_nt) THEN\n    UPDATE SET Target.month_name = Source.month_name, Target.price_nt = Source.price_nt\nWHEN NOT MATCHED THEN\n    INSERT (transaction_year, month_num, month_name, price_nt) VALUES (Source.transaction_year, Source.month_num, Source.month_name, Source.price_nt);\n\"\"\".format(','.join(['(?,?,?,?)' for _ in range(len(data))]))\n\nparams = [item for sublist in data for item in sublist]\n\ntry:\n    obj_crsr.execute(merge_query, params)\n\nexcept Exception as e:\n    obj_crsr.rollback()\n    print(e)\n    print(\"Transaction rolled back\")\n\nelse:\n    obj_cnxn.commit()\n    obj_crsr.close()\n    obj_cnxn.close()\n\nThis python code is given data in the following format:\n[(2023, M12,    December,   541.44),\n(2023,  M11,    November,   486.64),\n(2023,  M10,    October,    468.23),\n(2023,  M09,    September,  478.80),\n(2023,  M08,    August,     475.41)]\n\nAnd then is converted to a list in the params variable.  That data looks like this:\n['2023', 'M12', 'December', '541.442', '2023', 'M11', 'November', '486.639', '2023', 'M10', 'October', '468.226', '2023', 'M09', 'September', '478.802', '2023', 'M08', 'August', '475.411']\n\nThis is the only method I have found to work when trying to merge data into an existing table using PYODBC.  I have heard of parameterizing the query or naming sql variables, but I don't know how to adapt existing examples/solution on stack overflow to my specific use case.  Any suggestions are appreciated.\n",
        "Answer": "There is nothing wrong with your existing code as far as injection is concerned.\nInjection only happens when user data is injected directly into the query. Here, that is not happening. What is happening is that a dynamic list of ? parameter markers are being injected, in a well-defined way (once per row), and the actual values are passed as a dynamic list of parameters. There is absolutely no scope for injection here.\nBe aware of a few points though:\n\nUsing such code does tend to focus minds on \"oh just inject the data\". Might be worth putting in a comment such as only paramaters are injected here.\nIf there are no rows at all to insert then you get invalid code ( VALUES ), so you should check for that.\nDynamic numbers of parameters mean you get a recompile for every possible variation of parameters. This is not as many as would be had if you actually injected the data, but still a concern.\nA Table-Valued Parameter or a bulk insert into a temp table are therefore both better options than any of this, but neither are supported by pyodbc. fast_executemany or to_sql might be options, or BULK INSERT from an external file.\nThe maximum number of parameters is 2100, you will hit performance issues well before that though.\n\n",
        "Source": "https://stackoverflow.com/questions/77996154/how-to-reduce-vulnerability-to-cyber-attacks-from-injection"
    },
    {
        "Title": "Is using Hibernate&#39;s Restrictions.eq() method safe against SQL injection?",
        "Question": "Is using Hibernate's Restrictions.eq() method, as used in the example below, safe against SQL injection? Or similar methods like Restrictions.in(), Restrictions.ge(), ...\nString vulnerable = //parameter from user interface \nCriteria ct = this.getCriteria();\nct.add(Restrictions.eq(\"propertyName\", vulnerable));\n\nI have found that probably is, as explained in this answer\nbut reviewing OWASP documentation, there is an example that shows a comment which confuses me (// This should REALLY be validated too). Is needed to validate the input, or is secure as is?\nThe example in the OWASP documentation\n// Criteria API\n// This should REALLY be validated too\nString userSuppliedParameter = request.getParameter(\"Product-Description\");\n// Perform input validation to detect attacks\nInventory inv = (Inventory) session.createCriteria(Inventory.class).add\n(Restrictions.eq(\"productDescription\", userSuppliedParameter)).uniqueResult();\n\n",
        "Answer": "Yes, Hibernate's Criteria API would protect you against SQL Injection, as it parameterises the query - you can see this in action by enabling sql logging.\nWhat you do need to be careful about is concatenating user inputs etc. I think the documentation may perhaps be referring to validate the user input at both client and server side.\n",
        "Source": "https://stackoverflow.com/questions/77993970/is-using-hibernates-restrictions-eq-method-safe-against-sql-injection"
    },
    {
        "Title": "Operand type clash: int is incompatible with date in sql",
        "Question": "i using am writing a insert statement but getting above error\nInsert query\nvar insertSql = string.Format(\n                $\"INSERT INTO Sales (Date, Team, Sales) VALUES ({0}, {1}, {2})\",\n                new List<SqlParameter>()\n                {\n                    new(\"@date\", sales.Date.ToString(\"yyyy-MM-dd\")),\n                    new(\"@team\", sales.Team),\n                    new(\"@sales\", sales.Sales),\n                });\n            var rowCount = Sql.ExecuteNonQuery(Conn,insertSql);\n\nhere is my table schema and class\nSaleId int,\nDate Date,\nTeam varchar(50),\nSales int\n\npublic class Sales\n{\n    public int SalesId { get; set; }\n    public DateTime Date { get; set; }\n    public string Team { get; set; }\n    public int Sales { get; set; }\n}\n\nI want to use parameterized query to achive this so tried this but giving above error\n",
        "Answer": "The immediate problem here is that $\"...\" is itself an interpolated string, and the values you are injecting are the literal 0, 1, and 2 - they're not placeholders: they're the values. Removing the $ would make it a literal string suitable for string.Format, but you don't want to use string.Format here; also, you don't want to format the date - just pass it as a date.\nHonestly: if you're writing the SQL yourself, I'm not sure EF is even needed here; with Dapper this would be simply:\nconn.Execute(\"INSERT INTO Sales (Date, Team, Sales) Values (@Date, @Team, @Sales)\",\n    sales);\n\nor with a trick for better SQL formatting:\nconn.Execute(\"\"\"\n    INSERT INTO Sales (Date, Team, Sales)\n    Values (@Date, @Team, @Sales)\n    \"\"\", sales);\n\nDapper will deal with finding sales.Date, sales.Team and sales.Sales, and add them correctly. EF may also have an API for doing ad-hoc queries like this, but... this feels more like a Dapper scenario, unless you're emotionally invested in EF.\n",
        "Source": "https://stackoverflow.com/questions/77926016/operand-type-clash-int-is-incompatible-with-date-in-sql"
    },
    {
        "Title": "How to limit memory usage with PDO in MariaDB : Fatal error: Allowed memory size of 67108864 bytes exhausted",
        "Question": "I am changing my SQL request to PDO in order to integrate more security against SQL injecting.  I was using before procedural msqli and everything was working ok.  Now I updated server to PHP 8.2 and I am using PDO and prepared statements.\nThe BD I am accessing is old MariaDB and has a table with 247 fields most of which are NULL on a single row. (It is sections for a description of mushrooms, but only some of each are really described in a single row (mushrooms)).\nMost of the 247 fields are set to mediumtext because they can content up to a couple paragraphs.\nMy connection script is :\ntry {\n\n    db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\nreturn;\n} \n\nWhen I select one row of that table in order to echo the not NULL descriptions column, as soon as I execute the statement I run into a full memory.  The error is at the stmt->execute() line, not even at the fetchAll line.\n$description = 'someTag';\n\n$sql = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n$stmt = $db->prepare($sql);\n$stmt->bindParam(':tag', $description, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n$result = $stmt->fetchAll();\n$stmt->closeCursor();\n\nThe error :\nFatal error: Allowed memory size of 67108864 bytes exhausted (tried to allocate 262144 bytes) in /home/mycoqueb/public_html/nou.mycoquebec.org/scripts/bd-query.php on line (**the $stmt->execute() line)\n\nI tried to use :\nwhile ($row = $stmt->fetch()) {\n\nInstead of fetchAll() but it changed noting, I used it on every other request from the same page and it changed noting.  I flushed variables that were no more useful to NULL on the rest of the page and it changed nothing.  I even isolated the script on an empty page and it exceeds the memory limit.\nI tried to add this to my connection script and it changed nothing :\ndb->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\nI tried to select only one field instead of * and this worked, but I don't have an easy way to find NOT NULL columns in the table for a specific tag (row).\nI tried to find a SQL statement to restrict my SELECT to NOT NULL columns but I was not successful.\nI know I could get add memory_limit = 256M to the phpini file, but that is not what I want since the website has a high usage and for now its on a multihosted server.\nThe best solution would be to reengineer the MariaDB database using a table with description sections labels and linking only used sections to the main description table for each row, but I have limited access to the db since it is online with the old website and the old website needs to stay online and up to date for 1-2 years after new deployment. I though of creating a daily cron job to do that but I would like to avoid for the moment.\nAny Idea how I can get this to work?  It was working fine using msqli on php 8.1.\nTo answer the worries of contributors that think it's related to another part of the page code, here is the complete code of the isolated test page.\nfunction convert($size)\n {\n    $unit=array('b','kb','mb','gb','tb','pb');\n    return @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];\n }\n\n\n$servername = \"localhost\";\n$username = \"myUser\";\n$password = \"myPass\";\n$dbname = \"myDB\";\n\n\ntry {\n\n    $db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    //$db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\n } catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\n    return;\n}   \n\n$query = (array_key_exists(\"query\",$_REQUEST) ? $_REQUEST[\"query\"] : \"\");\n\n\nif($query != \"\"){\n\n    $tag_desc = 'Aegerita candida';\n    // Code works if I limit to \"SELECT Titre FROM description WHERE tag = :tag LIMIT 1\";\n    $sql_description = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n    $stmt = $db->prepare($sql_description);\n    $stmt->bindParam(':tag', $tag_desc, PDO::PARAM_STR);\n    \n    echo convert(memory_get_usage(true));  // returns 2mb\n    $stmt->execute();\n    $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n    \n    $i = 0;\n    \n    while ($row = $stmt->fetch()) {\n\n        if($i == 0) {\n\n            ?><table style=\"border-collapse:collapse;border: 0;table-layout: fixed;color: #063850;background-color: #DDDDDD;text-align: left\"><thead><tr style=\"border: 2px solid #063850;\"> <?php\n            foreach (array_keys($row) as $key) {\n                //print_r($key);\n                echo (\"<th style='padding:5px;border: 2px solid #063850;position:sticky;top: -2;z-index:10;background-color:#e5a045'>$key</th>\");\n            }\n            echo (\"</tr></thead>\");\n        }\n\n        $i++;\n\n        echo (\"<tr style='border: 2px solid #063850'>\");\n        foreach ($row as $value) {\n            echo (\"<td style='padding:2px;border: 2px solid #063850'>$value</td>\");\n            // <img src=\\\"$value\\\" height=\\\"400\\\" >\n        }\n        echo (\"</tr>\");\n    }\n    \n    if ($i > 0) {\n        echo (\"</table>\");\n        echo ('<div style=\"margin-top:400px\">&nbsp;</div>');\n    } else {\n        echo \"Aucun r\u00e9sultat\";\n    }\n\n}\n\n$db = null;\n\nHas mentioned it automatically work if I limit my sql to a couple fields.\nThe error is still on the stmt->execute() line.\n",
        "Answer": "Could it be that the issue is your data model?\nIf you have a table that has a lot of nulls, then the data is most likely not normalized.\nInstead of having 256 columns in your table, maybe just have the ones that are always there, and then relate it to a separate table with three fields: foreign key to the main table, a tag field and a value field.\nIf you are rewriting your application to USE PDO anyway, some long-term considerations could be included.\nExample table\nLayout like yours (all data in one table):\n\n\n\n\nid\nname\nemail\nsomeotherdata\ntag1\ntag2\ntag3\ntag4\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\nNULL\na\nNULL\n100\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\nc\na\nNULL\n400\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\nNULL\nNULL\n5000\nNULL\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\nNULL\na\nNULL\n100\n\n\n\nSuggested Tag-Value table layout\nMain Table\n\n\n\n\nid\nname\nemail\nsomeotherdata\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\n\n\n\n\nTag-Value Table\n\n\n\n\nid\ntag\nvalue\n\n\n\n\n1\ntag2\na\n\n\n1\ntag4\n100\n\n\n2\ntag1\nc\n\n\n2\ntag2\na\n\n\n2\ntag4\n400\n\n\n3\ntag3\n5000\n\n\n4\ntag2\na\n\n\n4\ntag4\n100\n\n\n\nUsage\nInstead of selecting just your row, you WILL need to either join the results together, or make two separate calls. I would suggest two calls, especially since you are rtunning into memory issues.\nSELECT \n  id, \n  name,\n  email,\n  someotherdata\nFROM\n  MainTable\nWHERE\n  id = 1;\n\n-- and then the tags\nSELECT \n  id, \n  tag,\n  value\nFROM\n  TagValueTable\nWHERE\n  id = 1; -- reference to the main table\n\n\n\nAdvantaages of this normalized approach\n\nLess bloat (not so many nulls)\nSimpler structures\nREST ready\nMore resilient\n\nAdd tags without changing the DDL of the database (ALTER)\n\n\nYou can still get the original layout by making subselects and transpositions in mysql\nYou can easily make statistics on the tags related to each other\n\nDisadvantages\n\nComplexity of the data model increases\nYou need to do a lot of extra SQL gymnastics to get EXACTLY what you had before\n\n",
        "Source": "https://stackoverflow.com/questions/77895050/how-to-limit-memory-usage-with-pdo-in-mariadb-fatal-error-allowed-memory-size"
    },
    {
        "Title": "PHP: Prepare JSON selector to Prevent MySQL Injection",
        "Question": "What is the best/proper way to prepare a dynamic MySQL JSON selector for queries, in order to prevent SQL injection? As an example, say I want to execute the following query:\nSELECT `key` ->> \"$.key.path\" AS `setting_value`\nFROM `settings`\nLIMIT 1\n\nBut I want to make the key path dynamic, e.g.:\n$sql = <<<SQL\n    SELECT `key` ->> \"{$path}\" AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nWith conditional values, I can structure the SQL for a prepared statement using PDO, e.g.:\n$sql = <<<SQL\n    SELECT *\n    FROM `settings`\n    WHERE `other_field` = :field_val\n    LIMIT 1\nSQL;\n\n$statement = $this->handle()->prepare($sql);\n$statement->execute([':field_val' => 'some val']);\n$records = $statement->fetchAll(PDO::FETCH_OBJ);\n\nAdding something like the following to my database adapter (or even to my helper functions) seems rather inelegant and prone to errors/issues:\n    public function cleanJsonSelector(string $selector) : string {\n        return preg_replace('/[^-\\$a-zA-Z0-9_\\[\\].*\\s]/', '', $selector);\n    }\n\nThoughts/help?\n",
        "Answer": "The -> and ->> operators only support string literals. They do not expressions, variables, or parameters.\nBut you can use any expression \u2014\u00a0including a parameter placeholder \u2014\u00a0in the equivalent JSON function JSON_EXTRACT().\nThe ->> operator is like JSON_UNQUOTE(JSON_EXTRACT(json_doc, path))\n$sql = <<<SQL\n    SELECT JSON_UNQUOTE(JSON_EXTRACT(`key`, :path)) AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nThis seems like an unnecessary inconsistency in the functionality of MySQL's JSON operators, but this is how it's implemented in the current MySQL version 8.3.\n\nFor what it's worth, it was requested to support expressions after the -> operator (and presumably also the ->> operator) here: https://bugs.mysql.com/bug.php?id=87360\nYou may want to log into the MySQL bug tracker site and click the \"Affects Me\" button to hopefully increase the priority of implementing that feature.\n\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => true (the default), then parameters are not true parameters, they are string-substitutions into the SQL query before it is parsed. So what looks like a parameterized query really uses a string literal as far as MySQL is concerned, and the ->> operator is successful.\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => false, then parameters placeholders are parsed by MySQL during the prepare step. Since parameters are not supported as the argument to the ->> operator, this will fail.\nMysqli only supports true parameters, so it will always fail.\n",
        "Source": "https://stackoverflow.com/questions/77892840/php-prepare-json-selector-to-prevent-mysql-injection"
    },
    {
        "Title": "SQL-Injection in duckdb-queries on pandas dataframes",
        "Question": "In a project I am working with duckdb to perform some queries on dataframes. For one of the queries, I have some user-input that I need to add to the query. That is why I am wondering if SQL-Injection is possible in this case. Is there a way a user could harm the application or the system through the input? And if so, how could I prevent this case? It seems that duckdb has no PreparedStatement for queries on dataframes.\nI already looked up in the documentation (https://duckdb.org/docs/api/python/overview.html) but couldn't find anything useful. The method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\nThere is another question on stackoverflow (Syntax for Duckdb > Python SQL with Parameter\\Variable) about this topic but the answer only works on real sql-connections and the version with f-strings seems insecure to me.\nHere is a small code sample to show what I mean:\nimport duckdb\nimport pandas as pd\n\ndf_data = pd.DataFrame({'id': [1, 2, 3, 4], 'student': ['student_a', 'student_a', 'student_b', 'student_c']})\n    \nuser_input = 3  # fetch some user_input here\n    \n# How to prevent sql-injection, if its even possible in this case?\nresult = duckdb.query(\"SELECT * FROM df_data WHERE id={}\".format(user_input))\n\nSo how would you approach this problem? Is sql-injection even possible? Thanks for your help and feel free to ask for more details, if you need some more information!\nEDIT: Fixed a syntax error in the code\n",
        "Answer": "\nThe method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\n\nIt seems it's possible:\n>>> duckdb.execute(\"\"\"SELECT * FROM df_data WHERE id=?\"\"\", (user_input,)).df()\n\n   id    student\n0   3  student_b\n\n",
        "Source": "https://stackoverflow.com/questions/77884985/sql-injection-in-duckdb-queries-on-pandas-dataframes"
    },
    {
        "Title": "SQL injection error in Modsecurity logs in Plesk",
        "Question": "I am receiving the following error for 1 of my wordpress site running on a Plesk server.\n[client 000.00.00.000] ModSecurity: Access denied with code 403 (phase\n 2). Pattern match \"[\\\\\\\\[\\\\\\\\]\\\\\\\\x22',()\\\\\\\\.]{10}$|\\\\\\\\b(?:union\n\\\\\\\\sall\\\\\\\\sselect\\\\\\\\s(?:(?:null|\\\\\\\\d+),?)+|order\\\\\\\\sby\n\\\\\\\\s\\\\\\\\d{1,4}|(?:and|or)\\\\\\\\s\\\\\\\\d{4}=\\\\\\\\d{4}|waitfor\\\\\\\\sdelay\\\\\\\\s'\n\\\\\\\\d+:\\\\\\\\d+:\\\\\\\\d+'|(?:select|and|or)\\\\\\\\s(?:(?:pg_)?sleep\\\\\\\\(\\\\\\\\d+\n\\\\\\\\)|\\\\\\\\d+\\\\\\\\s?=\\\\\\\\s?(?:dbms_pipe\\\\\\\\.receive_message\\\\\\\\ ...\" at \nREQUEST_COOKIES:sbjs_first. [file \"/etc/httpd/conf/modsecurity.d/rules\n/comodo_free/22_SQL_SQLi.conf\"] [line \"66\"] [id \"218500\"] [rev \"18\"] \n[msg \"COMODO WAF: SQLmap attack detected||website name|F|2\"] [data \n\"Matched Data: |||id=(none) found within REQUEST_COOKIES:sbjs_first: \ntyp=typein|||src=(direct)|||mdm=(none)|||cmp=(none)|||cnt=(none)|||trm=\n(none)|||id=(none)\"] [severity \"CRITICAL\"] [tag \"CWAF\"] [tag \"SQLi\"] \n[hostname \"website name\"] [uri \"/wp-login.php\"] [unique_id \"ZamB-\n8j9IfDbYiJgRoahGwAAAAM\"], referer:\n\nWhen I visited some pages on the frontend it gives this error:\nServer Error\n403\nForbidden\nYou do not have permission to access this document.\nThat's what you can do\nReload Page Back to Previous Page Home Page\nI wonder if this a real attack? or false positive\nI was able to export the site to local. It seems working ok there.\n",
        "Answer": "CRS dev-on-duty here. Even if you don't use CRS rules and this is a problem of COMODO WAF rules, I'll try to help. While searching for the cookie name sbjs_first, I found this GitHub issue here, which is an indication that this sourcebuster cookie looks legitimate. Maybe you'll even the solution to your problem in one of the comments in this issue.\nIf this isn't the solution, you may need to tune the rules. Maybe you can also use our (CRS) documentation on false positives and rule tuning.\n",
        "Source": "https://stackoverflow.com/questions/77842169/sql-injection-error-in-modsecurity-logs-in-plesk"
    },
    {
        "Title": "Oracle SP Checkmarx SAST scan showing Parameter Tampering",
        "Question": "SP accepts key and returns flag status. In Checkmarx SAST scan key, It is saying parameter not validated before being used in query. Please help to understand what validation can be added so that it passes the vulnerability test.\nCreate procedure sp_name (key varchar2, v_flag out number) as\nv_key varchar2(50);\nv_sql clob;\nBegin\nIf key is null then\nv_flag:=-1;\nElse\nv_key:=sys.dbms_assert.enquote_literal(upper(trim(key)));\nv_key:=replace(v_key,'''');\nv_sql:=q'[select flag from tbl where key=:1]';\nExecute immediate v_sql into v_flag using v_key;\nEnd if;\nException when no_data_found then\nv_flag:=-1;\nEnd;\n\nI tried bind variable and dbms_assert but still it shows code is vulnerable\n",
        "Answer": "Stop using EXECUTE IMMEDIATE when you do not need to (and trying to make it overly complicated) and use a simple SELECT ... INTO ... statement with the PL/SQL variable as the bind variable (and give the PL/SQL variable a different name to the table's column).\nThe procedure can be simplified to:\nCREATE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  SELECT flag\n  INTO   v_flag\n  FROM   tbl\n  WHERE  key=v_key;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nThen, if you have the sample data:\nCREATE TABLE tbl (key, flag) AS\n  SELECT 'A',  1 FROM DUAL UNION ALL\n  SELECT 'B',  2 FROM DUAL UNION ALL\n  SELECT 'C',  3 FROM DUAL UNION ALL\n  SELECT NULL, 4 FROM DUAL;\n\nThen:\nDECLARE\n  v_flag TBL.FLAG%TYPE;\nBEGIN\n  sp_name('A', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('B', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('C', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('D', v_flag);\n  DBMS_OUTPUT.PUT_LINE('D: ' || v_flag);\n  sp_name(NULL, v_flag);\n  DBMS_OUTPUT.PUT_LINE('NULL: ' || v_flag);\nEND;\n/\n\nOutputs:\n\nA: 1\nB: 2\nC: 3\nD: -1\nNULL: -1\n\n\nOr, if you want it slightly more complicated to avoid the SELECT if the key is NULL then:\nCREATE OR REPLACE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  IF v_key IS NULL THEN\n    v_flag := -1;\n  ELSE\n    SELECT flag\n    INTO   v_flag\n    FROM   tbl\n    WHERE  key=v_key;\n  END IF;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nfiddle\n",
        "Source": "https://stackoverflow.com/questions/77841440/oracle-sp-checkmarx-sast-scan-showing-parameter-tampering"
    },
    {
        "Title": "What is the correct syntax for dollar-parameters in PostgreSQL queries?",
        "Question": "I am struggling with the correct syntax for a dollar-parameter. It sometimes works, sometimes not.\nI am using the 'pg' package for NodeJS, but since AFAIK parsing the query happens on the server side, I don't expect this to matter.\nCode:\nconst client: PoolClient = ...;\nawait client.query('SELECT \\'foo\\' = $1', [projectId]);\nawait client.query('SET \"gvc.currentProjectId\" = $1', [projectId]);\n\nThe first query is obviously useless, but I added it to experiment with the syntax. An error occurs in the second query, so the first one seems to work. The second one fails with:\nunexpected exception error: syntax error at or near \"$1\"\n\nIs it even possible to use dollar-parameters in the value for SET? I want to secure my application against SQL injection attacks, so manually escaping the projectId is a last resort.\n",
        "Answer": "As explained in https://dba.stackexchange.com/a/333947, SET can indeed only take literal values, no parameters or query results. That post links to the set_config command, which does not have such a restriction.\nhttps://pgpedia.info/s/set_config.html\n\nNeither the post not the documentation explain why both exist, nor why SET cannot take parameters since set_config demonstrates that it is possible to do so.\nSimply using set_config over SET solves the problem.\n",
        "Source": "https://stackoverflow.com/questions/77839814/what-is-the-correct-syntax-for-dollar-parameters-in-postgresql-queries"
    },
    {
        "Title": "How do I write prepared statements in ballerina?",
        "Question": "Is there a way to write prepared statements for SQL in ballerina? or is it a good practice to use the following method for that?\nfunction selectUserQuery(string username) returns sql:ParameterizedQuery => `SELECT * FROM users WHERE user_name=${username}`;\n\n",
        "Answer": "In ballerina sql:ParamerterizedQuery works as a prepared statement. (this differs a little from other languages as ballerina mandates giving the variable order, when writing the statement itself)\nYes, using functions is the best practise to keep SQL statements in ballerina.\nFor the sake of completeness, I would like to quote the following from this article.\nConsider the below statement,\nsql:ParameterizedQuery selectQuery = `SELECT * FROM users WHERE user_name=${username}`;\nBallerina executes this query in multiple steps,\n\nTemplate the query:\nThe sql module will replace the insertions in the query using ?. (e.g. `SELECT * FROM users where user_name=?`) Here, all insertions in the query are considered to be user inputs.\n\nThe database compiles the query:\nThe database validates the templated SQL query for syntax and semantics (column availability, authorization) errors. Finally, the server parses the query.\n\nPlaceholder replacement:\nThe programme sends all the user data values to the database. The database will replace the placeholders at this point. However, since the query is pre-compiled, even if the database appends the values, the scope of the execution will not change. i.e. SQL Injection cannot turn a SELECT command into a DELETE.\n\nQuery execution.\n\n\n",
        "Source": "https://stackoverflow.com/questions/77763194/how-do-i-write-prepared-statements-in-ballerina"
    },
    {
        "Title": "Problem with identical metrics results after machine learning",
        "Question": "When trying machine learning on a dataset, I got the same results for metrics such as accuracy and F-score on different machine learning algorithms.\nI have a dataset on which I trained my chosen algorithms. I found it on the Kaggle website: source.\nHere are code snippets from the Jupiter file, and the results of their execution:\nList of connected libraries\nIN:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report\nimport joblib\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras import models, layers\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nLoading dataset\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\ndf.head(10)\n\nLoad, process and split the data for further training of the classification model\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\n\ndf = df[(df['attack_type'] == 'sqli') | (df['attack_type'] == 'norm')]\n\nX = df['payload']\ny = df['label']\n\nvectorizer = CountVectorizer(min_df = 2, max_df = 0.8, stop_words = stopwords.words('english'))\nX = vectorizer.fit_transform(X.values.astype('U')).toarray()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)\n\nOUT:\n(8040, 1585)\n(8040,)\n(2011, 1585)\n(2011,)\n\nNaive Bayes Classifier\nIN:\nnb_clf = GaussianNB()\nnb_clf.fit(X_train, y_train)\ny_pred = nb_clf.predict(X_test)\nprint(f\"Accuracy of Naive Bayes on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Naive Bayes on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of Naive Bayes on test set : 0.9806066633515664\nF1 Score of Naive Bayes on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       0.97      0.98      0.97       732\n        norm       0.99      0.98      0.98      1279\n\n    accuracy                           0.98      2011\n   macro avg       0.98      0.98      0.98      2011\nweighted avg       0.98      0.98      0.98      2011\n\nRandom forest algorithm:\nIN:\nrf_clf = RandomForestClassifier()\nrf_clf.fit(X_train, y_train)\ny_pred_rf = rf_clf.predict(X_test)\nprint(f\"Accuracy of Random Forest on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Random Forest on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred_rf))\n\nOUT:\nAccuracy of Random Forest on test set : 0.9806066633515664\nF1 Score of Random Forest on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.96      0.98       732\n        norm       0.98      1.00      0.99      1279\n\n    accuracy                           0.99      2011\n   macro avg       0.99      0.98      0.99      2011\nweighted avg       0.99      0.99      0.99      2011\n\nSupport vector machine\nIN:\nsvm_clf = SVC(gamma = 'auto')\nsvm_clf.fit(X_train, y_train)\ny_pred = svm_clf.predict(X_test)\nprint(f\"Accuracy of SVM on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of SVM on test set: {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of SVM on test set : 0.9189457981103928\nF1 Score of SVM on test set: 0.8658436213991769\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.76      0.87       689\n        norm       0.89      1.00      0.94      1322\n\n    accuracy                           0.92      2011\n   macro avg       0.95      0.88      0.90      2011\nweighted avg       0.93      0.92      0.92      2011\n\nAs you can see when training on different machine learning algorithms, we get the same results in the case of random forest and naive Bayesian classifier.\nI hope you can help me to fix a possible bug in the code or improve it in some way.\n",
        "Answer": "In your code for Random Forest, you're storing predictions as y_pred_rf but calling your metrics on y_pred\n",
        "Source": "https://stackoverflow.com/questions/77686328/problem-with-identical-metrics-results-after-machine-learning"
    },
    {
        "Title": "WordPress sql injection",
        "Question": "Thanks for letting me post here, I'm just starting to learn programming.\nI have a problem with a WordPress site which I update for my dad's local motorcycle road safety training group, which is run as a charity/non-profit by volunteer instructors. The hosting company (LCN) has taken the site down and emailed the group the following:\n\n\nDomain name : kamg.org.uk\nDatabase : kamg_org_uk_dbtest\nMySQL Server : database3.lcn.com\nOur monitoring scripts have detected an SQL injection attack occurring on your web site kamg.org.uk, using exploitable code hosted there.\nThe SQL queries that have been flagged as suspicious/malicious are listed here :\n----- BEGIN REPORT -----\nTIME RUNNING: 01:34:02\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\nTIME RUNNING: 01:34:00\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\n----- END REPORT -----\n\nWP, plugins and theme are all kept up to date at all times.\nCan I safely just delete those lines from the database to clean the site?\nLCN offer the group free charity hosting but I have found over 1600 domains share the same server. Once the sql injection is cleaned the group will move to managed WP hosting in the hope it will be more secure.\nThx,\nNiels\nI have tried reinstalling WordPress by FTP, but the hosts have denied the attempt, having removed all permissions.\nTheir support is appalling, taking 4 days to respond to queries, and then answering the wrong question with a cut & paste stock response.\nI have just started learning, but I'd be happy to go in and edit files (with some nervousness) but haven't attempted anything at this stage.\n",
        "Answer": "It's not the data that is at fault, it's something in the code of WordPress, or more likely one of the plugins or themes you have installed.\nThe way the code works is something like this:\n$query = 'SELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key,\n  wp_usermeta.meta_value \nFROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"' . $variable . \n  '\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" \n  AND wp_users.ID = wp_usermeta.user_id';\n\nBut the value of $variable has been exploited by some attacker. They set it to the following string:\n\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\n\n(even including the quote characters.)\nWhen the variable is concatenated into the query, it causes the SQL query to have extra expression terms, that the attacker injected.\nIt looks like they're forcing sleep() calls to test if certain tables exist. They'll use this method to learn all your table names. Then they'll use information in subsequent attacks, to read those tables. SQL injection hackers have to probe using techniques like this to try to avoid detection.\nThe original query may be a normal part of the code of WordPress or one of the plugins or themes. But the programmer made a mistake by concatenating a variable whose value was set from untrusted input. Programmers aren't supposed to do this, but many are either unaware of the risk, or else they think it won't happen to their code.\nYou said you are up to date on all the versions of WordPress and plugins, but the vulnerability may exist in the current version. In other words, no newer version with a fix has been released (yet).\nSometimes it doesn't help to update the software, because the newest version has introduced a new vulnerability that didn't exist before. Programmers add new code in every version, and security vulnerabilities are the result of mistakes made by software developers. New vulnerabilities occur regularly.\nWordPress itself is pretty well tested, that's why I suppose the vulnerability may be in a plugin or theme. I don't know which plugins you use.\nOr you may have added custom code that has the vulnerability, so there is no other person who will update it. It's up to you.\nWhat you have to do now is figure out which line of code, not data, is responsible for the vulnerability. If you don't have the skills to do this (basically a text search across many files to find a line of code similar to the one I showed above), then you need to employ someone to help you.\nOnce you find the line of code responsible, either fix it yourself, or if it's in a plugin you could just uninstall that plugin to remove the vulnerable code.\nIt sounds like your hosting company isn't going to help. They probably have very little resources to provide customer service in this case. Even if you fix the code, it sounds like it will be a struggle to get them to allow you to restore your website.\nYou may need to find a new hosting provider if your current one won't communicate or let you have access to your site.\nBut a different hosting provider won't be more secure, because the fault is not with the hosting provider. The fault is in the code you are using.\nIf you install the same code on the current provider or another provider without fixing it, the code will still be vulnerable to hacks. If you upload code you know is vulnerable, then it'll be your fault.\n",
        "Source": "https://stackoverflow.com/questions/77602811/wordpress-sql-injection"
    },
    {
        "Title": "Protects dplyr against SQL injections?",
        "Question": "I would like to use R-Shiny to develop a web app that accesses an SQL database with sensitive data.\nSo far I have written the database query as a pure SQL string.\nHowever, this approach is very susceptible to SQL injections.\nMy intention is therefore to write the database query with dplyr, as the query is written in R and not in pure SQL.\nUnfortunately, I have not yet been able to find any more detailed information or an estimate on this topic online. Therefore I would like to clarify my request in this question.\nSo far I have only read a statement about the dbplyr::translate_sql() function that is supposed to protect SQL injections:\nhttps://dbplyr.tidyverse.org/articles/sql-translation.html#vectors\nAs my data is very confidential, dbplyr / dplyr should provide 100% protection against SQL injections.\nI would be very pleased to receive further information and assessments on this topic.\nUPDATE\nAs suggested in the comments, I have added an example for reproducibility:\n(adapted from: https://shiny.posit.co/r/articles/build/pool-dplyr/)\nlibrary(shiny)\nlibrary(DBI)\nlibrary(pool)\nlibrary(tidyverse)\nlibrary(dbplyr)\n\npool <- dbPool(\n  drv = RMySQL::MySQL(),\n  dbname = \"shinydemo\",\n  host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",\n  username = \"guest\",\n  password = \"guest\")\n\nui <- fluidPage(\n  textInput(\"ID\", \"Enter your ID:\", \"5\"),\n  tableOutput(\"tbl\"),\n  numericInput(\"nrows\", \"How many cities to show?\", 10),\n  plotOutput(\"popPlot\"))\n\nserver <- function(input, output, session) {\n  output$tbl <- renderTable({\n    pool %>% tbl(\"City\") %>%\n      filter(ID == !!input$ID)\n  })\n  output$popPlot <- renderPlot({\n    df <- pool %>% tbl(\"City\") %>%\n      head(as.integer(input$nrows)[1]) %>% collect()\n    pop <- df$Population\n    names(pop) <- df$Name\n    barplot(pop)\n  })\n}\n\nshinyApp(ui, server)\n\n",
        "Answer": "The threat of SQL injection depends on how the user-provided text is incorporated into the dynamic SQL query. So if you are trying to protect against injection, you need to assess each of the ways user input is used when querying the database.\nIn the example you have posted there are two pieces of user input:\n\ninput$nrows which is limited to numeric by the input widget\ninput$ID which is free text, and hence has greater risk of SQL injection.\n\nYou can use any of the approaches below to investigate each piece of user input. Overall, the approach I would choose is to Sanitise and then Review.\nThis answer focuses on the case where you are using dbplyr to translate from R to SQL. If other approaches are used to access the database (such as the DBI package) then a different approach will be required.\n\nOption 1) Review the SQL query that is generated\nConsider where input$ID is used in the example code:\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID)\n\nIn order to execute this, dbplyr will translate the dplyr commands from R into SQL. We can review this translation using the show_query command.\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID) %>%\n  show_query()\n\nThis will probably produce an SQL query similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value'\n\nYou do not need the entire Shiny app to test this for SQL injection. You can simply vary this query and see what happens. For example, try a simple alternative query:\nattempt_inject = 'my_id_value;SELECT 123'\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!attempt_inject) %>%\n  show_query()\n\nI suspect this will produce SQL similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value;SELECT 123'\n\nWhich would seem an effective prevention for SQL injection. But you will need to test this as thoroughly as required to ensure you are confident.\n\nOption 2) Review source code\nThe dbplyr package is open source and available online. You could review the source code to confirm how inputs are handled during translation.\nMy suspicion is that unless inputs are of type sql, then they will be escaped as either text or an SQL object.\nThere is an sql() function that converts input to type sql. One of its uses is to tell dbplyr not to translate the contents of the function but to use them as-is. This means that if your user can submit R objects as inputs then this is a significant area of vulnerability. However, this is unlikely to be the case as your app restricts users to submitting text and numeric input.\n\nOption 3) Sanitise your inputs before passing them to dbplyr\nR has several advantages over pure SQL, in that you can use R to validate users' input before including it in a dbplyr query.\nConsider this an an alternative to your output$tbl component of the app:\noutput$tbl <- renderTable({\n  current_ID = as.character(input$ID)\n  acceptable_ids = pool %>%\n    tbl(\"City\") %>%\n    select(ID) %>%\n    distinct() %>%\n    collect() %>%\n    pull()\n  req(current_ID %in% acceptable_ids)\n\n  pool %>%\n    tbl(\"City\") %>%\n    filter(ID == !!current_ID)\n})\n\nThis approach enforces that the user input is converted to type character and is a value found in the ID column, before passing the user input through to dbplyr.\nThe exact choice of checks will depend on how user input is used. I often include a check that user input does not contain special characters (such as ;{}[]* or spaces).\ndbplyr includes commands to delimit certain inputs. Investigate and use these commands where applicable.\nNotes\n\nreq is a Shiny command that stops execution of a component if the condition is not met. You can use stopifnot outside a Shiny context.\nFetching the list of acceptable ids within the renderTable statement is not efficient app design. This should be calculated once and reused multiple times.\n\n",
        "Source": "https://stackoverflow.com/questions/77598340/protects-dplyr-against-sql-injections"
    },
    {
        "Title": "Interfacing with &quot;API&quot; that only takes raw SQL: Node / pSQL sanitization without prepared statements or parameterization?",
        "Question": "I am working with an \"API\" provided by a client's ERP. They do not have actual endpoints, rather a REST endpoint that you can send raw sql queries to, that they then execute. To make matters even worse, they only recently upgraded to https.\nI am writing some Node cloud functions to interface with this system. There will be two roles working with this product, and I need to prevent the role with less permissions to fire unwanted queries in the application when they are searching with specific parameters.\nFor filtering, I can just check if the values are in an array of allowed terms, but with a search I am not quite sure how to approach this. My general opinion has always been to use parameterized statements, but that is not an option here as I can't actually establish a connection to their database. I also saw some posts where people suggested wrapping the strings in dollar signs since the underlying DB is PostgreSQL, but I could not find anything in the documentation for this purpose.\nI was also thinking about only allowing alpha-numeric characters, but this seems like a potentially weak approach. If anyone knows of any libraries or ideas for dealing with this situation, I would greatly appreciate it.\nI tried looking for a Node library or piece of documentation that could help this situation, but I could not find anything relevant.\n",
        "Answer": "I found this interesting post around the question: https://security.stackexchange.com/questions/172297/sanitizing-input-for-parameterized-queries.\nTo summarize it, doing data sanitization(more like general validation) is always good idea but it will not necessarily guarantee that query will be safe. Directly running queries without parameterized statements will be still quite a big risk even if you find some great library for cleaning data to make it SQL safe.\nInstead try to think of ways to not run user input directly. Add some kind of mapper in between which will accept some filter codes and translate it into SQL values. For example if I had delivery company and wanted to filter all deliveries with status delivered, I would use mapping like this:\nconst status_code = \"DELIVERED\"\nconst statusMapper = {DELIVERED: \"delivered\"(value to filter in sql)}\n\nAnd if my mapper does not find the exact match, return error or empty result and don't run the query at all. If its search bar, try to identify most frequent search keywords and build mapper for that. Obviously it will not be too accurate, but still better than having risk of sql injection, especially if you work with sensitive and important data(I assume you work with company's internal data since you integrate with ERP).\n",
        "Source": "https://stackoverflow.com/questions/77516509/interfacing-with-api-that-only-takes-raw-sql-node-psql-sanitization-without"
    },
    {
        "Title": "Dremio SQL injection vulnerability",
        "Question": "I'd like to query an S3 storage containing parquet files through my Spring Java app with Dremio. These are dynamic queries with user given parameters.\nI use Apache Arrow SQl driver and simply run queries by a JdbcTemplate instantiated with a DataSource from the following properties:\n  driver-class-name: org.apache.arrow.driver.jdbc.ArrowFlightJdbcDriver\n  url: jdbc:arrow-flight-sql://localhost:32010/?useEncryption=false\n  username: user\n  password: pwd\n\nFor the sql string I use a String formatted with the user given value:\n\"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = '%s';\".formatted(userInput)\n\nIt works well but needless to say how big of an SQL injection opportunity it is. If I try to use a Prepared Statement:\nString sql = \"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = ?\"\njdbcTemplate.query(sql, ps -> ps.setString(1, userInput), rs -> {\n  //handling the result set\n});\n\nI get the following error:\ncfjd.org.apache.arrow.flight.FlightRuntimeException: Cannot convert RexNode to equivalent Dremio expression. RexNode Class: org.apache.calcite.rex.RexDynamicParam, RexNode Digest: ?0\n\nI'm finding ambiguous information on the web. The claim that Dremio doesn't support prepared statements could be found in some forums, but all of these comments are several years old*, moreover the official Dremio site has an article recommending the usage of prepared statements..\nAs far as I know Dremio uses ANSI SQL under the hood, which I believe supports prepared statements. Or does that depend on the database engine and not the dialect? Can anyone confirm that it is still not possible with Dremio? Then I'll stop pursuing it further.\nIf that's the case, I will escape the unsafe characters, use a dictionary for encoding and decoding user given characteres, etc.\nIf you have some other advices or experiences mitigating SQL injection without prepared statements though, I would appreciate them as well!\nThank you!\n*latest update I found: https://community.dremio.com/t/sql-parameterization-support/1733/5\n",
        "Answer": "I'll post my findings as an answer, maybe it could be useful for someone in the same boat:\nIn lack of any other ideas I went down the encode/decode road.\nFor that the initial idea was to use an own dictionary, but I figured that hexadecimal encoding should be sufficient enough.\nLuckily Dremio SQL has a FROM_HEX function, which can return a BINARY value for the given hexadecimal string.\nWith that I can (so far..) safely build dynamic queries with any kind of user given input turned into HEX strings and then converting back at execution time, with the function behaving kind of like a wrapper.\nStill, this isn't a perfectly calming solution, but as far as I can see, there isn't really a better option at the moment. I heard Dremio will implement prepared statements (quite a shock that they haven't already), until then, let's hope for the best!\n",
        "Source": "https://stackoverflow.com/questions/77501615/dremio-sql-injection-vulnerability"
    },
    {
        "Title": "SQL Injection in Stored Procedures via MySQL Connector",
        "Question": "I use the mysql-connector-python driver for executing database operations. Recently, I came across stored procedures in MySQL and decided to migrate some of my APIs from utilizing cursor.execute() to cursor.callproc(proc_name, args=()). This transition has proven successful, and everything works seamlessly. However, I'm uncertain about the vulnerability of these stored procedures to SQL injection.\nTo assess this, I created a test stored procedure and examined its susceptibility to SQL injection payloads.\nStored Procedure:\nDELIMITER //\nCREATE PROCEDURE TestProcedure(IN arg_test VARCHAR(150))\n  BEGIN\n    IF EXISTS (SELECT 1 FROM Random_Table WHERE test = arg_test) THEN\n        SELECT 'success' AS message;\n    ELSE\n        SELECT 'failed' AS message;\n    END IF;\n  END //\nDELIMITER ;\n\nPayloads:\n\n' or 1=1 -- \n\" or 1=1 -- \n\nSurprisingly, none of these payloads yielded any successful results. Seeking further assurance, I consulted one of the database administrators in the company. Although he expressed uncertainty, he suggested that these stored procedures function similarly to prepared statements. This aligns with my observation that the cursor.callproc() method accepts user inputs as arguments via the args parameter, resembling prepared statements.\nIf this interpretation is accurate, it implies that using the cursor.callproc() method ensures a secure backend, free from SQL injection concerns. Despite these positive indications, I would like to seek additional confirmation here to guarantee the safety of this approach.\n",
        "Answer": "Like it often happens, the problem is in the terminology. And it creates a lot of trouble (and vulnerabilities). A programmer should be always strict in their definitions.\nWhat you are talking about here is using stored procedure's parameter. Such a parameter is a special case related to stored procedures, and very similar in nature to SQL variables.\nIn this case your database doesn't add the contents of arg_test into the SQL body (as it would have been in python if you did something like + arg_test +) and then evaluate the resulting SQL. On the contrary, is uses arg_test as though it's a variable (in this sense, it's indeed similar to prepared statements, but technically it's entirely different matters).\nWhile speaking of stored procedures, they are irrelevant to injections. By itself, just using a procedure doesn't guarantee anything. One can write a procedure which is immune to injection, and write another which is prone to injection. Just like any other code.\nBut as long as you are just using a parameter passed to the procedure - it's safe.\n",
        "Source": "https://stackoverflow.com/questions/77500796/sql-injection-in-stored-procedures-via-mysql-connector"
    },
    {
        "Title": "Protection query against SQL injection, using PDO",
        "Question": "may I ask you how to make this protected against sql injection?\nI have\n$podminkazeme = \"\";\n$podminkakraj = \"\";\n\nif ( isset( $_GET[ \"zeme\" ] )and !empty( $_GET[ \"zeme\" ] ) ) {\n   $podminkazeme = \"and nb.zemehledani in (\" . str_replace( '%2C', ',',  $_GET[ \"zeme\" ] ) . \")\";\n};\n\nif ( isset( $_GET[ \"kraj\" ] )and !empty( $_GET[ \"kraj\" ] ) ) {\n  $podminkakraj = \"and nb.krajhledani in (\" . str_replace( '%2C', ',', $_GET[ \"kraj\" ]  ) . \")\";\n};\n\n$conn = new PDO( DB_DSN, DB_USERNAME, DB_PASSWORD );\n$sqljednotkaa = \"\n  select nb.*, \n    dv.nazev as developer, \n    UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, \n    UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, \n    uz.nazev as skladUpravil, \n    uzm.nazev as makler, \n    tp.nazev as typProdeje, \n    dal.nazev as nazevdalnice\n  from nabidka nb \n  left join uzivatele uz on uz.id=nb.skladUpravil \n  left join uzivatele uzm on uzm.id=nb.makler \n  left join typProdeje tp on tp.id=nb.typProdeje \n  left join developer dv on dv.id=nb.developer\n  left join dalnice dal on dal.id=nb.dalnice \n  where nb.emptyid is null \n    $podminkaid \n    $podminkastav \n    $podminkaupraveno \n    $podminkavelikost \n    $podminkacena \n    $podminkamakler \n    $podminkaexport \n    $podminkatypprodeje \n    $podminkatypnemovitosti \n    $podminkazeme \n    $podminkadalnice \n    $podminkakraj \n    $podminkaokres \n    $podminkadeveloper \n    $podminkatechnickeparametry \n    $podminkahledanislovo \n  order by nb.emptyid asc $razenipodminka\";\n\n$stjednotkaa = $conn->prepare( $sqljednotkaa );\n$stjednotkaa->execute();\n\n",
        "Answer": "Try this\n$conditions = [];\n$parameters = [];\n\nif (isset($_GET[\"zeme\"]) && !empty($_GET[\"zeme\"])) {\n    $zemeValues = explode(',', $_GET[\"zeme\"]);\n    $conditions[] = \"nb.zemehledani IN (\" . implode(', ', array_fill(0, count($zemeValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $zemeValues);\n}\n\nif (isset($_GET[\"kraj\"]) && !empty($_GET[\"kraj\"])) {\n    $krajValues = explode(',', $_GET[\"kraj\"]);\n    $conditions[] = \"nb.krajhledani IN (\" . implode(', ', array_fill(0, count($krajValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $krajValues);\n}\n\n$conn = new PDO(DB_DSN, DB_USERNAME, DB_PASSWORD);\n$sqljednotkaa = \"SELECT nb.*, dv.nazev as developer, UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, uz.nazev as skladUpravil, uzm.nazev as makler, tp.nazev as typProdeje, dal.nazev as nazevdalnice from nabidka nb left join uzivatele uz on uz.id=nb.skladUpravil left join uzivatele uzm on uzm.id=nb.makler left join typProdeje tp on tp.id=nb.typProdeje left join developer dv on dv.id=nb.developer left join dalnice dal on dal.id=nb.dalnice where nb.emptyid is null\";\nif ($conditions) {\n    $sqljednotkaa .= \" AND \" . implode(\" AND \", $conditions);\n}\n$sqljednotkaa .= \" ORDER BY nb.emptyid ASC $razenipodminka\";\n$stjednotkaa = $conn->prepare($sqljednotkaa);\n$stjednotkaa->execute($parameters);\n\n",
        "Source": "https://stackoverflow.com/questions/77416426/protection-query-against-sql-injection-using-pdo"
    },
    {
        "Title": "Enforcing row-level security in a shared postgres pool",
        "Question": "I'm working on a typical client-server webapp. It is using a system somewhat like GraphQL where the client has some flexibility in specifying what data it needs, without custom API endpoints for every type of data. The server is running node, and is using node-postgres with a typical pg.Pool. A client could send something like this:\n{select: '*', from: 'expenses', where: {'op': 'gt', 'lhs': 'expenses.amount', 'rhs': 20}}\n\nwhich would be translated to SELECT * FROM expenses WHERE expenses.amount > $1 (given $1 = 20). With enough care, this system can be made safe from injection attacks.\nI'd also like to incorporate row-level security policies. For example:\ncreate policy only_see_own_expenses on expenses using (expenses.user_id = <USER ID>);\n\nAs an extra security barrier, I want to make sure that even if an injection attack is succesful, a client can not \"unset\" its user ID.\nI've seen <USER ID> been defined in a few ways:\n\ncurrent_user, in which case every user of the app also needs a postgres user/role\nAn arbitrary setting like current_setting('myapp.user_id') in combination with a SET LOCAL myapp.user_id = ... at the start of a transaction\n\nApproach (2) seems most flexible to me. I'd just wrap every generated SQL query in a BEGIN; SET LOCAL myapp.user_id = 123; {generated query}; END;. The problem is that an attacker could inject another SET LOCAL statement, and impersonate another user.\nIn approach (1) you can similarly wrap every generated query with a SET ROLE ... statement at the start, yielding the same problem. An alternative is to create a new connection for each query with that specific role. I believe postgres would never allow that connection to switch to another role. But setting up a new connection per query would result in a lot of overhead.\nHow do I enforce row-level security without the performance hit of a new connection per query?\n",
        "Answer": "As you observe, setting a placeholder parameter and using SET LOCAL ROLE to temporarily assume a different role can be subverted by attackers who can execute arbitrary SQL, like in an SQL injection attack.\nI don't think that there is a way to accomplish what you want that is safe from SQL injection. The problem is a fundamental one: you handle authentication in the application, not in the database (where you are using a single application user to benefit from connection pooling), but you want to have the database handle authorization via row-level security. That requires a way for the application to tell the database what the application user is. Now the only way that the application can tell the database anything is by using SQL, and an attacker who can run arbitrary SQL statements can always subvert that.\nI think that the only option for you is to harden your application against SQL injection attacks.\n",
        "Source": "https://stackoverflow.com/questions/77272972/enforcing-row-level-security-in-a-shared-postgres-pool"
    },
    {
        "Title": "SQL Injection - Python - MySQL",
        "Question": "Basically,\nI'm trying to find ways to explore SQL Injection vulnerabilities in  the code presented below. The code has another layer, presentation, where it asks the user for board_name input.\nTable_name is an inside variable, user doesn't have control over it.\n    def find_board_by_name(cls, connector, board_name, table_name: str):\n        query = \"SELECT * FROM {} WHERE name = '{}'\".format(table_name,board_name.title())\n        print(query)\n        try:\n            connector.mycursor.execute(query)\n            res = connector.mycursor.fetchone()\n            if res:\n                return res[1]\n            return None\n        except Exception as e:\n            raise e\n        \n\nTried to :\n1- board_name as:          ' OR '1'='1\nIt worked, program returned to me me first item on the table (it wasn't supposed to, since I didn't provide any name)\n2- Tried to put board_name as:          ';Delete Table BoardGames;\nIt didn't work, mysql.connector.errors.InterfaceError: Use multi=True when executing multiple statements was presented to me.\nSo my question is \" mysql.connector\" is protecting me against the majorities of the SQL Injections? Since I didn't set the \"multi\" tag in the code to True?  Could you show me other ways to explore vulnerabilities in this code? Besides the 1 and 2.\nI guess I know how to fix the SQL Injection problem: \"connector.mycursor.execute(query, values)\" probably will do the job.  But, I'm trying to understand better what kind of SQL Vulnerabilities I would have with this original code without this fix.\n",
        "Answer": "SQL injection isn't always malicious. It could result in a simple error instead of deleting all the student records.\nFor example, if some legitimate user of your site is named \"O'Reilly\" then your code formatting would have an imbalanced quote, which would be a syntax error:\nSELECT * FROM tablename WHERE name = 'O'Reilly'\n                                       ^ wtf\n\nUsing parameters avoids this kind of problem. Query parameters aren't just a quick way of interpolating variables. They either escape special characters in the dynamic content (by default Python does this), or else full-blown parameters keep the values separate from the SQL query until after it has been parsed by the SQL server. So no special characters can ever cause a syntax error.\nBut table names and other identifiers cannot be parameters. You can use parameters only in place of SQL values, like your quoted string in your example.\nYou said the user is not in control of the table name variable. That's great, but not sufficient.\nWhat if another programmer on your project isn't careful when calling your find_board_by_name() function, and inadvertently passes unsafe content as the table name? Note that unsafe content is more than just user input.\nWhat if the table name is a reserved keyword in SQL?\nSELECT * FROM order WHERE name = ?\n              ^ syntax error\n\nWhat if the table name contains whitespace or punctuation? There are other risks.\nYou should code your function so it does not trust its caller. For SQL values, do use parameters of course. For other dynamic elements like table names, you do have to interpolate variables into the SQL string, but you can be defensive:\n\nUse an allowlist to verify the table name is a legitimate known table name.\n\nDelimit the table name in back-ticks in your SQL, just in case it's a reserved word or not a simple identifier.\nlegit_table_names = Set(['table1', 'table2', 'table3'])\nif table_name not in legit_table_names:\n  return error # pseudocode\n\nquery = f\"SELECT * FROM {table_name} WHERE name = %s\"\n\n\n\n(I prefer f-strings instead of format() in modern Python)\n",
        "Source": "https://stackoverflow.com/questions/77167563/sql-injection-python-mysql"
    },
    {
        "Title": "PHP Code Functioning as Intended but UNION Injection Payload Doesn&#39;t Work",
        "Question": "I am attempting to make a web application (LAMP stack - MySQL version: 8.0.36-0ubuntu0.22.04.1) that is vulnerable to a SQL UNION Injection attack (or some type of SQL injection attack). The code takes the user's input via POST parameters to get the VIN & mileage.\nThe following PHP Code handles the backend to adding the parameters to the database:\n// If SESSION variables are set then proceed to Mileage.php\n    if (isset($_SESSION['username'])) {\n        // PHP Code for Handling ADDING CAR\n        // Declare Variables\n        $username = $_SESSION['username'];\n        $vin = $_POST['vehicle'];\n        $mileage = $_POST['mileage'];\n\n        // Implement Try-catch for Error Hanlding\n        try {\n            // Add Mileage\n            if(isset($_POST['add_data'])) {\n                $query = \"INSERT INTO mileage_master.mileages (`username`, `VIN`, `mileage`) VALUES ('$username', '$vin', '$mileage')\";\n                $query_result = mysqli_query($db,$query);\n    \n            // Update Mileage\n            } elseif(isset($_POST['update_data'])) {\n                // Query to update associated VIN's Mileage\n                $update = \"UPDATE mileage_master.mileages SET mileage='$mileage' WHERE username='$username' AND VIN='$vin'\";\n                $update_result = mysqli_query($db,$update);\n            // Remove Mileage\n            } elseif(isset($_POST['remove_data'])) {\n                // Query to Remove VIN & Mileage\n                $remove = \"DELETE FROM mileage_master.mileages WHERE username='$username' AND VIN='$vin'\";\n                $remove_result = mysqli_query($db,$remove);\n            }\n        }\n        catch (mysqli_sql_exception $e) {\n            $showAlert = true;\n            // Display Syntax Error\n            $errorMessage = \"My SQL Error: \" . $e->getMessage();\n            // Display Query (Intentional Unsafe Coding Practices)\n            $errorMessage .= \"\\t||\\tQuery: \" . $sql;\n        }\n\n        \n    }    \n    else {\n        header(\"Location: /\");\n    }\n?>\n\nThe following PHP code prints the VIN & mileage to user's page:\n<?php\n    // Query to get all VINs associated with username\n    $result = mysqli_query($db,\"SELECT * FROM mileages WHERE username='$username'\");\n\n    echo \"<table style='margin-top: 35px;'>\";\n    echo \"<tr><th>VIN</th>\";\n    echo \"<th>Mileage</th></tr>\";\n\n    // While Loop to iterate through all returned rows\n    while($row = mysqli_fetch_assoc($result)) {\n        echo \"<tr style='text-align: center;'>\";\n        // VIN\n        echo \"<td>\" . $row['VIN'] . \"</td>\";\n        // Mileage\n        echo \"<td>\" . $row['mileage'] . \"</td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n?>\n\nMy thought process was that because the application uses dynamic queries an attacker could include some type of UNION SELECT statement. The UNION select statement's output would be stored within the VIN column for that query.\nHowever, I am unable to create a successful SQL Injection payload that would accomplish this.\nQuestion\nDo I need to change the logic of my application to make the exploit possible or is my idea not exploitable in the first place?\n",
        "Answer": "You can't get SQL injection in the SELECT query, since the user doesn't have control over the $username variable, and that's the only thing you substitute. But you can do it in the INSERT query, to insert extra rows in the table with arbitrary values.\nIt needs to terminate the current value list, then it can use a subquery in another value list, and finally it has to provide the beginning to match the end of the original value list.\n$vin = \"12345', '20'), ('baduser', (SELECT '67890'), (SELECT '30')), ('baduser2', '1111\";\n\nThis will put a bogus VIN and mileage into the row for $username, then insert additional rows for baduser and baduser2. baduser2 will get another bogus VIN and the mileage from the parameter.\nbaduser can use subqueries to get its VIN and mileage values, as long as the subqueries each only return one row and column. I used literals in the above example, but you can make them arbitrarily complex.\n",
        "Source": "https://stackoverflow.com/questions/78093937/php-code-functioning-as-intended-but-union-injection-payload-doesnt-work"
    },
    {
        "Title": "How to fix SQL injection if we have to use DB name dynamically in SQL Server?",
        "Question": "This is the implementation in code: the schema name comes from a configuration file and is different for each environment. Sonar throws SQL injection alert at this statement:\nselect * \nfrom dbName.dbo.stu_name;     <<dbname is the variable that comes from property file>>\n\nI tried these solutions:\n\nUsing query.setParameter(?,dbname). Tried passing dbname dynamically and vulnerability was fixed. When debugging, the query was throwing an error and did not execute.\n\nUsed String.format(select * from \\'%s\\',tablename.replace(\"\\'\",\"\\'\\'\")) - vulnerability fixed, but query failed to execute\n\n\nI tried various other solutions and nothing worked.\nCan anyone please help me with this?\n",
        "Answer": "The \"best\" defence you can do is not use dynamic SQL. Considering that this is the database that's dynamic, and based on a prior question, I would suggest that this is occurring from an application, so that means you don't need 3-part naming. Instead you parametrise the database name in the connection string and use 2-part naming; no dynamic SQL needed.\nIf you must use dynamic SQL, then the \"best\u2122\ufe0f\" defence would be to validate the database name, and then ensure you properly quote the database name when you inject it into your dynamic statement.\nHere I validate the database name in sys.databases and then use QUOTENAME to quote the name appropriately. If the database doesn't exist, no query is run (and no error is returned):\nDECLARE @DatabaseName sysname = N'YourDatabaseName';\n\nDECLARE @SQL nvarchar(MAX);\nSELECT @SQL = N'SELECT * FROM ' + QUOTENAME(d.name) + N'.dbo.stu_name;'\nFROM sys.databases d\nWHERE d.name = @DatabaseName;\n\nEXEC sys.sp_executesql @SQL;\n\n",
        "Source": "https://stackoverflow.com/questions/78027431/how-to-fix-sql-injection-if-we-have-to-use-db-name-dynamically-in-sql-server"
    },
    {
        "Title": "How to reduce vulnerability to cyber attacks from injection?",
        "Question": "I have very little knowledge about SQL injection, and there are probably other threats I am unaware of out there for stealing company data, how would I make this python code better in regards to security?\nmerge_query = \"\"\"\nMERGE INTO sql_table_name AS Target\nUSING (\n    VALUES {}\n) AS Source (transaction_year, month_num, month_name, price_nt)\nON Target.transaction_year = Source.transaction_year \nAND Target.month_num = Source.month_num\nWHEN MATCHED AND (Target.month_name != Source.month_name OR Target.price_nt != Source.price_nt) THEN\n    UPDATE SET Target.month_name = Source.month_name, Target.price_nt = Source.price_nt\nWHEN NOT MATCHED THEN\n    INSERT (transaction_year, month_num, month_name, price_nt) VALUES (Source.transaction_year, Source.month_num, Source.month_name, Source.price_nt);\n\"\"\".format(','.join(['(?,?,?,?)' for _ in range(len(data))]))\n\nparams = [item for sublist in data for item in sublist]\n\ntry:\n    obj_crsr.execute(merge_query, params)\n\nexcept Exception as e:\n    obj_crsr.rollback()\n    print(e)\n    print(\"Transaction rolled back\")\n\nelse:\n    obj_cnxn.commit()\n    obj_crsr.close()\n    obj_cnxn.close()\n\nThis python code is given data in the following format:\n[(2023, M12,    December,   541.44),\n(2023,  M11,    November,   486.64),\n(2023,  M10,    October,    468.23),\n(2023,  M09,    September,  478.80),\n(2023,  M08,    August,     475.41)]\n\nAnd then is converted to a list in the params variable.  That data looks like this:\n['2023', 'M12', 'December', '541.442', '2023', 'M11', 'November', '486.639', '2023', 'M10', 'October', '468.226', '2023', 'M09', 'September', '478.802', '2023', 'M08', 'August', '475.411']\n\nThis is the only method I have found to work when trying to merge data into an existing table using PYODBC.  I have heard of parameterizing the query or naming sql variables, but I don't know how to adapt existing examples/solution on stack overflow to my specific use case.  Any suggestions are appreciated.\n",
        "Answer": "There is nothing wrong with your existing code as far as injection is concerned.\nInjection only happens when user data is injected directly into the query. Here, that is not happening. What is happening is that a dynamic list of ? parameter markers are being injected, in a well-defined way (once per row), and the actual values are passed as a dynamic list of parameters. There is absolutely no scope for injection here.\nBe aware of a few points though:\n\nUsing such code does tend to focus minds on \"oh just inject the data\". Might be worth putting in a comment such as only paramaters are injected here.\nIf there are no rows at all to insert then you get invalid code ( VALUES ), so you should check for that.\nDynamic numbers of parameters mean you get a recompile for every possible variation of parameters. This is not as many as would be had if you actually injected the data, but still a concern.\nA Table-Valued Parameter or a bulk insert into a temp table are therefore both better options than any of this, but neither are supported by pyodbc. fast_executemany or to_sql might be options, or BULK INSERT from an external file.\nThe maximum number of parameters is 2100, you will hit performance issues well before that though.\n\n",
        "Source": "https://stackoverflow.com/questions/77996154/how-to-reduce-vulnerability-to-cyber-attacks-from-injection"
    },
    {
        "Title": "Is using Hibernate&#39;s Restrictions.eq() method safe against SQL injection?",
        "Question": "Is using Hibernate's Restrictions.eq() method, as used in the example below, safe against SQL injection? Or similar methods like Restrictions.in(), Restrictions.ge(), ...\nString vulnerable = //parameter from user interface \nCriteria ct = this.getCriteria();\nct.add(Restrictions.eq(\"propertyName\", vulnerable));\n\nI have found that probably is, as explained in this answer\nbut reviewing OWASP documentation, there is an example that shows a comment which confuses me (// This should REALLY be validated too). Is needed to validate the input, or is secure as is?\nThe example in the OWASP documentation\n// Criteria API\n// This should REALLY be validated too\nString userSuppliedParameter = request.getParameter(\"Product-Description\");\n// Perform input validation to detect attacks\nInventory inv = (Inventory) session.createCriteria(Inventory.class).add\n(Restrictions.eq(\"productDescription\", userSuppliedParameter)).uniqueResult();\n\n",
        "Answer": "Yes, Hibernate's Criteria API would protect you against SQL Injection, as it parameterises the query - you can see this in action by enabling sql logging.\nWhat you do need to be careful about is concatenating user inputs etc. I think the documentation may perhaps be referring to validate the user input at both client and server side.\n",
        "Source": "https://stackoverflow.com/questions/77993970/is-using-hibernates-restrictions-eq-method-safe-against-sql-injection"
    },
    {
        "Title": "Operand type clash: int is incompatible with date in sql",
        "Question": "i using am writing a insert statement but getting above error\nInsert query\nvar insertSql = string.Format(\n                $\"INSERT INTO Sales (Date, Team, Sales) VALUES ({0}, {1}, {2})\",\n                new List<SqlParameter>()\n                {\n                    new(\"@date\", sales.Date.ToString(\"yyyy-MM-dd\")),\n                    new(\"@team\", sales.Team),\n                    new(\"@sales\", sales.Sales),\n                });\n            var rowCount = Sql.ExecuteNonQuery(Conn,insertSql);\n\nhere is my table schema and class\nSaleId int,\nDate Date,\nTeam varchar(50),\nSales int\n\npublic class Sales\n{\n    public int SalesId { get; set; }\n    public DateTime Date { get; set; }\n    public string Team { get; set; }\n    public int Sales { get; set; }\n}\n\nI want to use parameterized query to achive this so tried this but giving above error\n",
        "Answer": "The immediate problem here is that $\"...\" is itself an interpolated string, and the values you are injecting are the literal 0, 1, and 2 - they're not placeholders: they're the values. Removing the $ would make it a literal string suitable for string.Format, but you don't want to use string.Format here; also, you don't want to format the date - just pass it as a date.\nHonestly: if you're writing the SQL yourself, I'm not sure EF is even needed here; with Dapper this would be simply:\nconn.Execute(\"INSERT INTO Sales (Date, Team, Sales) Values (@Date, @Team, @Sales)\",\n    sales);\n\nor with a trick for better SQL formatting:\nconn.Execute(\"\"\"\n    INSERT INTO Sales (Date, Team, Sales)\n    Values (@Date, @Team, @Sales)\n    \"\"\", sales);\n\nDapper will deal with finding sales.Date, sales.Team and sales.Sales, and add them correctly. EF may also have an API for doing ad-hoc queries like this, but... this feels more like a Dapper scenario, unless you're emotionally invested in EF.\n",
        "Source": "https://stackoverflow.com/questions/77926016/operand-type-clash-int-is-incompatible-with-date-in-sql"
    },
    {
        "Title": "How to limit memory usage with PDO in MariaDB : Fatal error: Allowed memory size of 67108864 bytes exhausted",
        "Question": "I am changing my SQL request to PDO in order to integrate more security against SQL injecting.  I was using before procedural msqli and everything was working ok.  Now I updated server to PHP 8.2 and I am using PDO and prepared statements.\nThe BD I am accessing is old MariaDB and has a table with 247 fields most of which are NULL on a single row. (It is sections for a description of mushrooms, but only some of each are really described in a single row (mushrooms)).\nMost of the 247 fields are set to mediumtext because they can content up to a couple paragraphs.\nMy connection script is :\ntry {\n\n    db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\nreturn;\n} \n\nWhen I select one row of that table in order to echo the not NULL descriptions column, as soon as I execute the statement I run into a full memory.  The error is at the stmt->execute() line, not even at the fetchAll line.\n$description = 'someTag';\n\n$sql = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n$stmt = $db->prepare($sql);\n$stmt->bindParam(':tag', $description, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n$result = $stmt->fetchAll();\n$stmt->closeCursor();\n\nThe error :\nFatal error: Allowed memory size of 67108864 bytes exhausted (tried to allocate 262144 bytes) in /home/mycoqueb/public_html/nou.mycoquebec.org/scripts/bd-query.php on line (**the $stmt->execute() line)\n\nI tried to use :\nwhile ($row = $stmt->fetch()) {\n\nInstead of fetchAll() but it changed noting, I used it on every other request from the same page and it changed noting.  I flushed variables that were no more useful to NULL on the rest of the page and it changed nothing.  I even isolated the script on an empty page and it exceeds the memory limit.\nI tried to add this to my connection script and it changed nothing :\ndb->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\nI tried to select only one field instead of * and this worked, but I don't have an easy way to find NOT NULL columns in the table for a specific tag (row).\nI tried to find a SQL statement to restrict my SELECT to NOT NULL columns but I was not successful.\nI know I could get add memory_limit = 256M to the phpini file, but that is not what I want since the website has a high usage and for now its on a multihosted server.\nThe best solution would be to reengineer the MariaDB database using a table with description sections labels and linking only used sections to the main description table for each row, but I have limited access to the db since it is online with the old website and the old website needs to stay online and up to date for 1-2 years after new deployment. I though of creating a daily cron job to do that but I would like to avoid for the moment.\nAny Idea how I can get this to work?  It was working fine using msqli on php 8.1.\nTo answer the worries of contributors that think it's related to another part of the page code, here is the complete code of the isolated test page.\nfunction convert($size)\n {\n    $unit=array('b','kb','mb','gb','tb','pb');\n    return @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];\n }\n\n\n$servername = \"localhost\";\n$username = \"myUser\";\n$password = \"myPass\";\n$dbname = \"myDB\";\n\n\ntry {\n\n    $db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    //$db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\n } catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\n    return;\n}   \n\n$query = (array_key_exists(\"query\",$_REQUEST) ? $_REQUEST[\"query\"] : \"\");\n\n\nif($query != \"\"){\n\n    $tag_desc = 'Aegerita candida';\n    // Code works if I limit to \"SELECT Titre FROM description WHERE tag = :tag LIMIT 1\";\n    $sql_description = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n    $stmt = $db->prepare($sql_description);\n    $stmt->bindParam(':tag', $tag_desc, PDO::PARAM_STR);\n    \n    echo convert(memory_get_usage(true));  // returns 2mb\n    $stmt->execute();\n    $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n    \n    $i = 0;\n    \n    while ($row = $stmt->fetch()) {\n\n        if($i == 0) {\n\n            ?><table style=\"border-collapse:collapse;border: 0;table-layout: fixed;color: #063850;background-color: #DDDDDD;text-align: left\"><thead><tr style=\"border: 2px solid #063850;\"> <?php\n            foreach (array_keys($row) as $key) {\n                //print_r($key);\n                echo (\"<th style='padding:5px;border: 2px solid #063850;position:sticky;top: -2;z-index:10;background-color:#e5a045'>$key</th>\");\n            }\n            echo (\"</tr></thead>\");\n        }\n\n        $i++;\n\n        echo (\"<tr style='border: 2px solid #063850'>\");\n        foreach ($row as $value) {\n            echo (\"<td style='padding:2px;border: 2px solid #063850'>$value</td>\");\n            // <img src=\\\"$value\\\" height=\\\"400\\\" >\n        }\n        echo (\"</tr>\");\n    }\n    \n    if ($i > 0) {\n        echo (\"</table>\");\n        echo ('<div style=\"margin-top:400px\">&nbsp;</div>');\n    } else {\n        echo \"Aucun r\u00e9sultat\";\n    }\n\n}\n\n$db = null;\n\nHas mentioned it automatically work if I limit my sql to a couple fields.\nThe error is still on the stmt->execute() line.\n",
        "Answer": "Could it be that the issue is your data model?\nIf you have a table that has a lot of nulls, then the data is most likely not normalized.\nInstead of having 256 columns in your table, maybe just have the ones that are always there, and then relate it to a separate table with three fields: foreign key to the main table, a tag field and a value field.\nIf you are rewriting your application to USE PDO anyway, some long-term considerations could be included.\nExample table\nLayout like yours (all data in one table):\n\n\n\n\nid\nname\nemail\nsomeotherdata\ntag1\ntag2\ntag3\ntag4\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\nNULL\na\nNULL\n100\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\nc\na\nNULL\n400\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\nNULL\nNULL\n5000\nNULL\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\nNULL\na\nNULL\n100\n\n\n\nSuggested Tag-Value table layout\nMain Table\n\n\n\n\nid\nname\nemail\nsomeotherdata\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\n\n\n\n\nTag-Value Table\n\n\n\n\nid\ntag\nvalue\n\n\n\n\n1\ntag2\na\n\n\n1\ntag4\n100\n\n\n2\ntag1\nc\n\n\n2\ntag2\na\n\n\n2\ntag4\n400\n\n\n3\ntag3\n5000\n\n\n4\ntag2\na\n\n\n4\ntag4\n100\n\n\n\nUsage\nInstead of selecting just your row, you WILL need to either join the results together, or make two separate calls. I would suggest two calls, especially since you are rtunning into memory issues.\nSELECT \n  id, \n  name,\n  email,\n  someotherdata\nFROM\n  MainTable\nWHERE\n  id = 1;\n\n-- and then the tags\nSELECT \n  id, \n  tag,\n  value\nFROM\n  TagValueTable\nWHERE\n  id = 1; -- reference to the main table\n\n\n\nAdvantaages of this normalized approach\n\nLess bloat (not so many nulls)\nSimpler structures\nREST ready\nMore resilient\n\nAdd tags without changing the DDL of the database (ALTER)\n\n\nYou can still get the original layout by making subselects and transpositions in mysql\nYou can easily make statistics on the tags related to each other\n\nDisadvantages\n\nComplexity of the data model increases\nYou need to do a lot of extra SQL gymnastics to get EXACTLY what you had before\n\n",
        "Source": "https://stackoverflow.com/questions/77895050/how-to-limit-memory-usage-with-pdo-in-mariadb-fatal-error-allowed-memory-size"
    },
    {
        "Title": "PHP: Prepare JSON selector to Prevent MySQL Injection",
        "Question": "What is the best/proper way to prepare a dynamic MySQL JSON selector for queries, in order to prevent SQL injection? As an example, say I want to execute the following query:\nSELECT `key` ->> \"$.key.path\" AS `setting_value`\nFROM `settings`\nLIMIT 1\n\nBut I want to make the key path dynamic, e.g.:\n$sql = <<<SQL\n    SELECT `key` ->> \"{$path}\" AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nWith conditional values, I can structure the SQL for a prepared statement using PDO, e.g.:\n$sql = <<<SQL\n    SELECT *\n    FROM `settings`\n    WHERE `other_field` = :field_val\n    LIMIT 1\nSQL;\n\n$statement = $this->handle()->prepare($sql);\n$statement->execute([':field_val' => 'some val']);\n$records = $statement->fetchAll(PDO::FETCH_OBJ);\n\nAdding something like the following to my database adapter (or even to my helper functions) seems rather inelegant and prone to errors/issues:\n    public function cleanJsonSelector(string $selector) : string {\n        return preg_replace('/[^-\\$a-zA-Z0-9_\\[\\].*\\s]/', '', $selector);\n    }\n\nThoughts/help?\n",
        "Answer": "The -> and ->> operators only support string literals. They do not expressions, variables, or parameters.\nBut you can use any expression \u2014\u00a0including a parameter placeholder \u2014\u00a0in the equivalent JSON function JSON_EXTRACT().\nThe ->> operator is like JSON_UNQUOTE(JSON_EXTRACT(json_doc, path))\n$sql = <<<SQL\n    SELECT JSON_UNQUOTE(JSON_EXTRACT(`key`, :path)) AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nThis seems like an unnecessary inconsistency in the functionality of MySQL's JSON operators, but this is how it's implemented in the current MySQL version 8.3.\n\nFor what it's worth, it was requested to support expressions after the -> operator (and presumably also the ->> operator) here: https://bugs.mysql.com/bug.php?id=87360\nYou may want to log into the MySQL bug tracker site and click the \"Affects Me\" button to hopefully increase the priority of implementing that feature.\n\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => true (the default), then parameters are not true parameters, they are string-substitutions into the SQL query before it is parsed. So what looks like a parameterized query really uses a string literal as far as MySQL is concerned, and the ->> operator is successful.\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => false, then parameters placeholders are parsed by MySQL during the prepare step. Since parameters are not supported as the argument to the ->> operator, this will fail.\nMysqli only supports true parameters, so it will always fail.\n",
        "Source": "https://stackoverflow.com/questions/77892840/php-prepare-json-selector-to-prevent-mysql-injection"
    },
    {
        "Title": "SQL-Injection in duckdb-queries on pandas dataframes",
        "Question": "In a project I am working with duckdb to perform some queries on dataframes. For one of the queries, I have some user-input that I need to add to the query. That is why I am wondering if SQL-Injection is possible in this case. Is there a way a user could harm the application or the system through the input? And if so, how could I prevent this case? It seems that duckdb has no PreparedStatement for queries on dataframes.\nI already looked up in the documentation (https://duckdb.org/docs/api/python/overview.html) but couldn't find anything useful. The method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\nThere is another question on stackoverflow (Syntax for Duckdb > Python SQL with Parameter\\Variable) about this topic but the answer only works on real sql-connections and the version with f-strings seems insecure to me.\nHere is a small code sample to show what I mean:\nimport duckdb\nimport pandas as pd\n\ndf_data = pd.DataFrame({'id': [1, 2, 3, 4], 'student': ['student_a', 'student_a', 'student_b', 'student_c']})\n    \nuser_input = 3  # fetch some user_input here\n    \n# How to prevent sql-injection, if its even possible in this case?\nresult = duckdb.query(\"SELECT * FROM df_data WHERE id={}\".format(user_input))\n\nSo how would you approach this problem? Is sql-injection even possible? Thanks for your help and feel free to ask for more details, if you need some more information!\nEDIT: Fixed a syntax error in the code\n",
        "Answer": "\nThe method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\n\nIt seems it's possible:\n>>> duckdb.execute(\"\"\"SELECT * FROM df_data WHERE id=?\"\"\", (user_input,)).df()\n\n   id    student\n0   3  student_b\n\n",
        "Source": "https://stackoverflow.com/questions/77884985/sql-injection-in-duckdb-queries-on-pandas-dataframes"
    },
    {
        "Title": "SQL injection error in Modsecurity logs in Plesk",
        "Question": "I am receiving the following error for 1 of my wordpress site running on a Plesk server.\n[client 000.00.00.000] ModSecurity: Access denied with code 403 (phase\n 2). Pattern match \"[\\\\\\\\[\\\\\\\\]\\\\\\\\x22',()\\\\\\\\.]{10}$|\\\\\\\\b(?:union\n\\\\\\\\sall\\\\\\\\sselect\\\\\\\\s(?:(?:null|\\\\\\\\d+),?)+|order\\\\\\\\sby\n\\\\\\\\s\\\\\\\\d{1,4}|(?:and|or)\\\\\\\\s\\\\\\\\d{4}=\\\\\\\\d{4}|waitfor\\\\\\\\sdelay\\\\\\\\s'\n\\\\\\\\d+:\\\\\\\\d+:\\\\\\\\d+'|(?:select|and|or)\\\\\\\\s(?:(?:pg_)?sleep\\\\\\\\(\\\\\\\\d+\n\\\\\\\\)|\\\\\\\\d+\\\\\\\\s?=\\\\\\\\s?(?:dbms_pipe\\\\\\\\.receive_message\\\\\\\\ ...\" at \nREQUEST_COOKIES:sbjs_first. [file \"/etc/httpd/conf/modsecurity.d/rules\n/comodo_free/22_SQL_SQLi.conf\"] [line \"66\"] [id \"218500\"] [rev \"18\"] \n[msg \"COMODO WAF: SQLmap attack detected||website name|F|2\"] [data \n\"Matched Data: |||id=(none) found within REQUEST_COOKIES:sbjs_first: \ntyp=typein|||src=(direct)|||mdm=(none)|||cmp=(none)|||cnt=(none)|||trm=\n(none)|||id=(none)\"] [severity \"CRITICAL\"] [tag \"CWAF\"] [tag \"SQLi\"] \n[hostname \"website name\"] [uri \"/wp-login.php\"] [unique_id \"ZamB-\n8j9IfDbYiJgRoahGwAAAAM\"], referer:\n\nWhen I visited some pages on the frontend it gives this error:\nServer Error\n403\nForbidden\nYou do not have permission to access this document.\nThat's what you can do\nReload Page Back to Previous Page Home Page\nI wonder if this a real attack? or false positive\nI was able to export the site to local. It seems working ok there.\n",
        "Answer": "CRS dev-on-duty here. Even if you don't use CRS rules and this is a problem of COMODO WAF rules, I'll try to help. While searching for the cookie name sbjs_first, I found this GitHub issue here, which is an indication that this sourcebuster cookie looks legitimate. Maybe you'll even the solution to your problem in one of the comments in this issue.\nIf this isn't the solution, you may need to tune the rules. Maybe you can also use our (CRS) documentation on false positives and rule tuning.\n",
        "Source": "https://stackoverflow.com/questions/77842169/sql-injection-error-in-modsecurity-logs-in-plesk"
    },
    {
        "Title": "Oracle SP Checkmarx SAST scan showing Parameter Tampering",
        "Question": "SP accepts key and returns flag status. In Checkmarx SAST scan key, It is saying parameter not validated before being used in query. Please help to understand what validation can be added so that it passes the vulnerability test.\nCreate procedure sp_name (key varchar2, v_flag out number) as\nv_key varchar2(50);\nv_sql clob;\nBegin\nIf key is null then\nv_flag:=-1;\nElse\nv_key:=sys.dbms_assert.enquote_literal(upper(trim(key)));\nv_key:=replace(v_key,'''');\nv_sql:=q'[select flag from tbl where key=:1]';\nExecute immediate v_sql into v_flag using v_key;\nEnd if;\nException when no_data_found then\nv_flag:=-1;\nEnd;\n\nI tried bind variable and dbms_assert but still it shows code is vulnerable\n",
        "Answer": "Stop using EXECUTE IMMEDIATE when you do not need to (and trying to make it overly complicated) and use a simple SELECT ... INTO ... statement with the PL/SQL variable as the bind variable (and give the PL/SQL variable a different name to the table's column).\nThe procedure can be simplified to:\nCREATE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  SELECT flag\n  INTO   v_flag\n  FROM   tbl\n  WHERE  key=v_key;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nThen, if you have the sample data:\nCREATE TABLE tbl (key, flag) AS\n  SELECT 'A',  1 FROM DUAL UNION ALL\n  SELECT 'B',  2 FROM DUAL UNION ALL\n  SELECT 'C',  3 FROM DUAL UNION ALL\n  SELECT NULL, 4 FROM DUAL;\n\nThen:\nDECLARE\n  v_flag TBL.FLAG%TYPE;\nBEGIN\n  sp_name('A', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('B', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('C', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('D', v_flag);\n  DBMS_OUTPUT.PUT_LINE('D: ' || v_flag);\n  sp_name(NULL, v_flag);\n  DBMS_OUTPUT.PUT_LINE('NULL: ' || v_flag);\nEND;\n/\n\nOutputs:\n\nA: 1\nB: 2\nC: 3\nD: -1\nNULL: -1\n\n\nOr, if you want it slightly more complicated to avoid the SELECT if the key is NULL then:\nCREATE OR REPLACE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  IF v_key IS NULL THEN\n    v_flag := -1;\n  ELSE\n    SELECT flag\n    INTO   v_flag\n    FROM   tbl\n    WHERE  key=v_key;\n  END IF;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nfiddle\n",
        "Source": "https://stackoverflow.com/questions/77841440/oracle-sp-checkmarx-sast-scan-showing-parameter-tampering"
    },
    {
        "Title": "What is the correct syntax for dollar-parameters in PostgreSQL queries?",
        "Question": "I am struggling with the correct syntax for a dollar-parameter. It sometimes works, sometimes not.\nI am using the 'pg' package for NodeJS, but since AFAIK parsing the query happens on the server side, I don't expect this to matter.\nCode:\nconst client: PoolClient = ...;\nawait client.query('SELECT \\'foo\\' = $1', [projectId]);\nawait client.query('SET \"gvc.currentProjectId\" = $1', [projectId]);\n\nThe first query is obviously useless, but I added it to experiment with the syntax. An error occurs in the second query, so the first one seems to work. The second one fails with:\nunexpected exception error: syntax error at or near \"$1\"\n\nIs it even possible to use dollar-parameters in the value for SET? I want to secure my application against SQL injection attacks, so manually escaping the projectId is a last resort.\n",
        "Answer": "As explained in https://dba.stackexchange.com/a/333947, SET can indeed only take literal values, no parameters or query results. That post links to the set_config command, which does not have such a restriction.\nhttps://pgpedia.info/s/set_config.html\n\nNeither the post not the documentation explain why both exist, nor why SET cannot take parameters since set_config demonstrates that it is possible to do so.\nSimply using set_config over SET solves the problem.\n",
        "Source": "https://stackoverflow.com/questions/77839814/what-is-the-correct-syntax-for-dollar-parameters-in-postgresql-queries"
    },
    {
        "Title": "How do I write prepared statements in ballerina?",
        "Question": "Is there a way to write prepared statements for SQL in ballerina? or is it a good practice to use the following method for that?\nfunction selectUserQuery(string username) returns sql:ParameterizedQuery => `SELECT * FROM users WHERE user_name=${username}`;\n\n",
        "Answer": "In ballerina sql:ParamerterizedQuery works as a prepared statement. (this differs a little from other languages as ballerina mandates giving the variable order, when writing the statement itself)\nYes, using functions is the best practise to keep SQL statements in ballerina.\nFor the sake of completeness, I would like to quote the following from this article.\nConsider the below statement,\nsql:ParameterizedQuery selectQuery = `SELECT * FROM users WHERE user_name=${username}`;\nBallerina executes this query in multiple steps,\n\nTemplate the query:\nThe sql module will replace the insertions in the query using ?. (e.g. `SELECT * FROM users where user_name=?`) Here, all insertions in the query are considered to be user inputs.\n\nThe database compiles the query:\nThe database validates the templated SQL query for syntax and semantics (column availability, authorization) errors. Finally, the server parses the query.\n\nPlaceholder replacement:\nThe programme sends all the user data values to the database. The database will replace the placeholders at this point. However, since the query is pre-compiled, even if the database appends the values, the scope of the execution will not change. i.e. SQL Injection cannot turn a SELECT command into a DELETE.\n\nQuery execution.\n\n\n",
        "Source": "https://stackoverflow.com/questions/77763194/how-do-i-write-prepared-statements-in-ballerina"
    },
    {
        "Title": "Problem with identical metrics results after machine learning",
        "Question": "When trying machine learning on a dataset, I got the same results for metrics such as accuracy and F-score on different machine learning algorithms.\nI have a dataset on which I trained my chosen algorithms. I found it on the Kaggle website: source.\nHere are code snippets from the Jupiter file, and the results of their execution:\nList of connected libraries\nIN:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report\nimport joblib\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras import models, layers\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nLoading dataset\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\ndf.head(10)\n\nLoad, process and split the data for further training of the classification model\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\n\ndf = df[(df['attack_type'] == 'sqli') | (df['attack_type'] == 'norm')]\n\nX = df['payload']\ny = df['label']\n\nvectorizer = CountVectorizer(min_df = 2, max_df = 0.8, stop_words = stopwords.words('english'))\nX = vectorizer.fit_transform(X.values.astype('U')).toarray()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)\n\nOUT:\n(8040, 1585)\n(8040,)\n(2011, 1585)\n(2011,)\n\nNaive Bayes Classifier\nIN:\nnb_clf = GaussianNB()\nnb_clf.fit(X_train, y_train)\ny_pred = nb_clf.predict(X_test)\nprint(f\"Accuracy of Naive Bayes on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Naive Bayes on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of Naive Bayes on test set : 0.9806066633515664\nF1 Score of Naive Bayes on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       0.97      0.98      0.97       732\n        norm       0.99      0.98      0.98      1279\n\n    accuracy                           0.98      2011\n   macro avg       0.98      0.98      0.98      2011\nweighted avg       0.98      0.98      0.98      2011\n\nRandom forest algorithm:\nIN:\nrf_clf = RandomForestClassifier()\nrf_clf.fit(X_train, y_train)\ny_pred_rf = rf_clf.predict(X_test)\nprint(f\"Accuracy of Random Forest on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Random Forest on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred_rf))\n\nOUT:\nAccuracy of Random Forest on test set : 0.9806066633515664\nF1 Score of Random Forest on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.96      0.98       732\n        norm       0.98      1.00      0.99      1279\n\n    accuracy                           0.99      2011\n   macro avg       0.99      0.98      0.99      2011\nweighted avg       0.99      0.99      0.99      2011\n\nSupport vector machine\nIN:\nsvm_clf = SVC(gamma = 'auto')\nsvm_clf.fit(X_train, y_train)\ny_pred = svm_clf.predict(X_test)\nprint(f\"Accuracy of SVM on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of SVM on test set: {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of SVM on test set : 0.9189457981103928\nF1 Score of SVM on test set: 0.8658436213991769\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.76      0.87       689\n        norm       0.89      1.00      0.94      1322\n\n    accuracy                           0.92      2011\n   macro avg       0.95      0.88      0.90      2011\nweighted avg       0.93      0.92      0.92      2011\n\nAs you can see when training on different machine learning algorithms, we get the same results in the case of random forest and naive Bayesian classifier.\nI hope you can help me to fix a possible bug in the code or improve it in some way.\n",
        "Answer": "In your code for Random Forest, you're storing predictions as y_pred_rf but calling your metrics on y_pred\n",
        "Source": "https://stackoverflow.com/questions/77686328/problem-with-identical-metrics-results-after-machine-learning"
    },
    {
        "Title": "WordPress sql injection",
        "Question": "Thanks for letting me post here, I'm just starting to learn programming.\nI have a problem with a WordPress site which I update for my dad's local motorcycle road safety training group, which is run as a charity/non-profit by volunteer instructors. The hosting company (LCN) has taken the site down and emailed the group the following:\n\n\nDomain name : kamg.org.uk\nDatabase : kamg_org_uk_dbtest\nMySQL Server : database3.lcn.com\nOur monitoring scripts have detected an SQL injection attack occurring on your web site kamg.org.uk, using exploitable code hosted there.\nThe SQL queries that have been flagged as suspicious/malicious are listed here :\n----- BEGIN REPORT -----\nTIME RUNNING: 01:34:02\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\nTIME RUNNING: 01:34:00\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\n----- END REPORT -----\n\nWP, plugins and theme are all kept up to date at all times.\nCan I safely just delete those lines from the database to clean the site?\nLCN offer the group free charity hosting but I have found over 1600 domains share the same server. Once the sql injection is cleaned the group will move to managed WP hosting in the hope it will be more secure.\nThx,\nNiels\nI have tried reinstalling WordPress by FTP, but the hosts have denied the attempt, having removed all permissions.\nTheir support is appalling, taking 4 days to respond to queries, and then answering the wrong question with a cut & paste stock response.\nI have just started learning, but I'd be happy to go in and edit files (with some nervousness) but haven't attempted anything at this stage.\n",
        "Answer": "It's not the data that is at fault, it's something in the code of WordPress, or more likely one of the plugins or themes you have installed.\nThe way the code works is something like this:\n$query = 'SELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key,\n  wp_usermeta.meta_value \nFROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"' . $variable . \n  '\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" \n  AND wp_users.ID = wp_usermeta.user_id';\n\nBut the value of $variable has been exploited by some attacker. They set it to the following string:\n\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\n\n(even including the quote characters.)\nWhen the variable is concatenated into the query, it causes the SQL query to have extra expression terms, that the attacker injected.\nIt looks like they're forcing sleep() calls to test if certain tables exist. They'll use this method to learn all your table names. Then they'll use information in subsequent attacks, to read those tables. SQL injection hackers have to probe using techniques like this to try to avoid detection.\nThe original query may be a normal part of the code of WordPress or one of the plugins or themes. But the programmer made a mistake by concatenating a variable whose value was set from untrusted input. Programmers aren't supposed to do this, but many are either unaware of the risk, or else they think it won't happen to their code.\nYou said you are up to date on all the versions of WordPress and plugins, but the vulnerability may exist in the current version. In other words, no newer version with a fix has been released (yet).\nSometimes it doesn't help to update the software, because the newest version has introduced a new vulnerability that didn't exist before. Programmers add new code in every version, and security vulnerabilities are the result of mistakes made by software developers. New vulnerabilities occur regularly.\nWordPress itself is pretty well tested, that's why I suppose the vulnerability may be in a plugin or theme. I don't know which plugins you use.\nOr you may have added custom code that has the vulnerability, so there is no other person who will update it. It's up to you.\nWhat you have to do now is figure out which line of code, not data, is responsible for the vulnerability. If you don't have the skills to do this (basically a text search across many files to find a line of code similar to the one I showed above), then you need to employ someone to help you.\nOnce you find the line of code responsible, either fix it yourself, or if it's in a plugin you could just uninstall that plugin to remove the vulnerable code.\nIt sounds like your hosting company isn't going to help. They probably have very little resources to provide customer service in this case. Even if you fix the code, it sounds like it will be a struggle to get them to allow you to restore your website.\nYou may need to find a new hosting provider if your current one won't communicate or let you have access to your site.\nBut a different hosting provider won't be more secure, because the fault is not with the hosting provider. The fault is in the code you are using.\nIf you install the same code on the current provider or another provider without fixing it, the code will still be vulnerable to hacks. If you upload code you know is vulnerable, then it'll be your fault.\n",
        "Source": "https://stackoverflow.com/questions/77602811/wordpress-sql-injection"
    },
    {
        "Title": "Protects dplyr against SQL injections?",
        "Question": "I would like to use R-Shiny to develop a web app that accesses an SQL database with sensitive data.\nSo far I have written the database query as a pure SQL string.\nHowever, this approach is very susceptible to SQL injections.\nMy intention is therefore to write the database query with dplyr, as the query is written in R and not in pure SQL.\nUnfortunately, I have not yet been able to find any more detailed information or an estimate on this topic online. Therefore I would like to clarify my request in this question.\nSo far I have only read a statement about the dbplyr::translate_sql() function that is supposed to protect SQL injections:\nhttps://dbplyr.tidyverse.org/articles/sql-translation.html#vectors\nAs my data is very confidential, dbplyr / dplyr should provide 100% protection against SQL injections.\nI would be very pleased to receive further information and assessments on this topic.\nUPDATE\nAs suggested in the comments, I have added an example for reproducibility:\n(adapted from: https://shiny.posit.co/r/articles/build/pool-dplyr/)\nlibrary(shiny)\nlibrary(DBI)\nlibrary(pool)\nlibrary(tidyverse)\nlibrary(dbplyr)\n\npool <- dbPool(\n  drv = RMySQL::MySQL(),\n  dbname = \"shinydemo\",\n  host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",\n  username = \"guest\",\n  password = \"guest\")\n\nui <- fluidPage(\n  textInput(\"ID\", \"Enter your ID:\", \"5\"),\n  tableOutput(\"tbl\"),\n  numericInput(\"nrows\", \"How many cities to show?\", 10),\n  plotOutput(\"popPlot\"))\n\nserver <- function(input, output, session) {\n  output$tbl <- renderTable({\n    pool %>% tbl(\"City\") %>%\n      filter(ID == !!input$ID)\n  })\n  output$popPlot <- renderPlot({\n    df <- pool %>% tbl(\"City\") %>%\n      head(as.integer(input$nrows)[1]) %>% collect()\n    pop <- df$Population\n    names(pop) <- df$Name\n    barplot(pop)\n  })\n}\n\nshinyApp(ui, server)\n\n",
        "Answer": "The threat of SQL injection depends on how the user-provided text is incorporated into the dynamic SQL query. So if you are trying to protect against injection, you need to assess each of the ways user input is used when querying the database.\nIn the example you have posted there are two pieces of user input:\n\ninput$nrows which is limited to numeric by the input widget\ninput$ID which is free text, and hence has greater risk of SQL injection.\n\nYou can use any of the approaches below to investigate each piece of user input. Overall, the approach I would choose is to Sanitise and then Review.\nThis answer focuses on the case where you are using dbplyr to translate from R to SQL. If other approaches are used to access the database (such as the DBI package) then a different approach will be required.\n\nOption 1) Review the SQL query that is generated\nConsider where input$ID is used in the example code:\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID)\n\nIn order to execute this, dbplyr will translate the dplyr commands from R into SQL. We can review this translation using the show_query command.\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID) %>%\n  show_query()\n\nThis will probably produce an SQL query similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value'\n\nYou do not need the entire Shiny app to test this for SQL injection. You can simply vary this query and see what happens. For example, try a simple alternative query:\nattempt_inject = 'my_id_value;SELECT 123'\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!attempt_inject) %>%\n  show_query()\n\nI suspect this will produce SQL similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value;SELECT 123'\n\nWhich would seem an effective prevention for SQL injection. But you will need to test this as thoroughly as required to ensure you are confident.\n\nOption 2) Review source code\nThe dbplyr package is open source and available online. You could review the source code to confirm how inputs are handled during translation.\nMy suspicion is that unless inputs are of type sql, then they will be escaped as either text or an SQL object.\nThere is an sql() function that converts input to type sql. One of its uses is to tell dbplyr not to translate the contents of the function but to use them as-is. This means that if your user can submit R objects as inputs then this is a significant area of vulnerability. However, this is unlikely to be the case as your app restricts users to submitting text and numeric input.\n\nOption 3) Sanitise your inputs before passing them to dbplyr\nR has several advantages over pure SQL, in that you can use R to validate users' input before including it in a dbplyr query.\nConsider this an an alternative to your output$tbl component of the app:\noutput$tbl <- renderTable({\n  current_ID = as.character(input$ID)\n  acceptable_ids = pool %>%\n    tbl(\"City\") %>%\n    select(ID) %>%\n    distinct() %>%\n    collect() %>%\n    pull()\n  req(current_ID %in% acceptable_ids)\n\n  pool %>%\n    tbl(\"City\") %>%\n    filter(ID == !!current_ID)\n})\n\nThis approach enforces that the user input is converted to type character and is a value found in the ID column, before passing the user input through to dbplyr.\nThe exact choice of checks will depend on how user input is used. I often include a check that user input does not contain special characters (such as ;{}[]* or spaces).\ndbplyr includes commands to delimit certain inputs. Investigate and use these commands where applicable.\nNotes\n\nreq is a Shiny command that stops execution of a component if the condition is not met. You can use stopifnot outside a Shiny context.\nFetching the list of acceptable ids within the renderTable statement is not efficient app design. This should be calculated once and reused multiple times.\n\n",
        "Source": "https://stackoverflow.com/questions/77598340/protects-dplyr-against-sql-injections"
    },
    {
        "Title": "Interfacing with &quot;API&quot; that only takes raw SQL: Node / pSQL sanitization without prepared statements or parameterization?",
        "Question": "I am working with an \"API\" provided by a client's ERP. They do not have actual endpoints, rather a REST endpoint that you can send raw sql queries to, that they then execute. To make matters even worse, they only recently upgraded to https.\nI am writing some Node cloud functions to interface with this system. There will be two roles working with this product, and I need to prevent the role with less permissions to fire unwanted queries in the application when they are searching with specific parameters.\nFor filtering, I can just check if the values are in an array of allowed terms, but with a search I am not quite sure how to approach this. My general opinion has always been to use parameterized statements, but that is not an option here as I can't actually establish a connection to their database. I also saw some posts where people suggested wrapping the strings in dollar signs since the underlying DB is PostgreSQL, but I could not find anything in the documentation for this purpose.\nI was also thinking about only allowing alpha-numeric characters, but this seems like a potentially weak approach. If anyone knows of any libraries or ideas for dealing with this situation, I would greatly appreciate it.\nI tried looking for a Node library or piece of documentation that could help this situation, but I could not find anything relevant.\n",
        "Answer": "I found this interesting post around the question: https://security.stackexchange.com/questions/172297/sanitizing-input-for-parameterized-queries.\nTo summarize it, doing data sanitization(more like general validation) is always good idea but it will not necessarily guarantee that query will be safe. Directly running queries without parameterized statements will be still quite a big risk even if you find some great library for cleaning data to make it SQL safe.\nInstead try to think of ways to not run user input directly. Add some kind of mapper in between which will accept some filter codes and translate it into SQL values. For example if I had delivery company and wanted to filter all deliveries with status delivered, I would use mapping like this:\nconst status_code = \"DELIVERED\"\nconst statusMapper = {DELIVERED: \"delivered\"(value to filter in sql)}\n\nAnd if my mapper does not find the exact match, return error or empty result and don't run the query at all. If its search bar, try to identify most frequent search keywords and build mapper for that. Obviously it will not be too accurate, but still better than having risk of sql injection, especially if you work with sensitive and important data(I assume you work with company's internal data since you integrate with ERP).\n",
        "Source": "https://stackoverflow.com/questions/77516509/interfacing-with-api-that-only-takes-raw-sql-node-psql-sanitization-without"
    },
    {
        "Title": "Dremio SQL injection vulnerability",
        "Question": "I'd like to query an S3 storage containing parquet files through my Spring Java app with Dremio. These are dynamic queries with user given parameters.\nI use Apache Arrow SQl driver and simply run queries by a JdbcTemplate instantiated with a DataSource from the following properties:\n  driver-class-name: org.apache.arrow.driver.jdbc.ArrowFlightJdbcDriver\n  url: jdbc:arrow-flight-sql://localhost:32010/?useEncryption=false\n  username: user\n  password: pwd\n\nFor the sql string I use a String formatted with the user given value:\n\"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = '%s';\".formatted(userInput)\n\nIt works well but needless to say how big of an SQL injection opportunity it is. If I try to use a Prepared Statement:\nString sql = \"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = ?\"\njdbcTemplate.query(sql, ps -> ps.setString(1, userInput), rs -> {\n  //handling the result set\n});\n\nI get the following error:\ncfjd.org.apache.arrow.flight.FlightRuntimeException: Cannot convert RexNode to equivalent Dremio expression. RexNode Class: org.apache.calcite.rex.RexDynamicParam, RexNode Digest: ?0\n\nI'm finding ambiguous information on the web. The claim that Dremio doesn't support prepared statements could be found in some forums, but all of these comments are several years old*, moreover the official Dremio site has an article recommending the usage of prepared statements..\nAs far as I know Dremio uses ANSI SQL under the hood, which I believe supports prepared statements. Or does that depend on the database engine and not the dialect? Can anyone confirm that it is still not possible with Dremio? Then I'll stop pursuing it further.\nIf that's the case, I will escape the unsafe characters, use a dictionary for encoding and decoding user given characteres, etc.\nIf you have some other advices or experiences mitigating SQL injection without prepared statements though, I would appreciate them as well!\nThank you!\n*latest update I found: https://community.dremio.com/t/sql-parameterization-support/1733/5\n",
        "Answer": "I'll post my findings as an answer, maybe it could be useful for someone in the same boat:\nIn lack of any other ideas I went down the encode/decode road.\nFor that the initial idea was to use an own dictionary, but I figured that hexadecimal encoding should be sufficient enough.\nLuckily Dremio SQL has a FROM_HEX function, which can return a BINARY value for the given hexadecimal string.\nWith that I can (so far..) safely build dynamic queries with any kind of user given input turned into HEX strings and then converting back at execution time, with the function behaving kind of like a wrapper.\nStill, this isn't a perfectly calming solution, but as far as I can see, there isn't really a better option at the moment. I heard Dremio will implement prepared statements (quite a shock that they haven't already), until then, let's hope for the best!\n",
        "Source": "https://stackoverflow.com/questions/77501615/dremio-sql-injection-vulnerability"
    },
    {
        "Title": "SQL Injection in Stored Procedures via MySQL Connector",
        "Question": "I use the mysql-connector-python driver for executing database operations. Recently, I came across stored procedures in MySQL and decided to migrate some of my APIs from utilizing cursor.execute() to cursor.callproc(proc_name, args=()). This transition has proven successful, and everything works seamlessly. However, I'm uncertain about the vulnerability of these stored procedures to SQL injection.\nTo assess this, I created a test stored procedure and examined its susceptibility to SQL injection payloads.\nStored Procedure:\nDELIMITER //\nCREATE PROCEDURE TestProcedure(IN arg_test VARCHAR(150))\n  BEGIN\n    IF EXISTS (SELECT 1 FROM Random_Table WHERE test = arg_test) THEN\n        SELECT 'success' AS message;\n    ELSE\n        SELECT 'failed' AS message;\n    END IF;\n  END //\nDELIMITER ;\n\nPayloads:\n\n' or 1=1 -- \n\" or 1=1 -- \n\nSurprisingly, none of these payloads yielded any successful results. Seeking further assurance, I consulted one of the database administrators in the company. Although he expressed uncertainty, he suggested that these stored procedures function similarly to prepared statements. This aligns with my observation that the cursor.callproc() method accepts user inputs as arguments via the args parameter, resembling prepared statements.\nIf this interpretation is accurate, it implies that using the cursor.callproc() method ensures a secure backend, free from SQL injection concerns. Despite these positive indications, I would like to seek additional confirmation here to guarantee the safety of this approach.\n",
        "Answer": "Like it often happens, the problem is in the terminology. And it creates a lot of trouble (and vulnerabilities). A programmer should be always strict in their definitions.\nWhat you are talking about here is using stored procedure's parameter. Such a parameter is a special case related to stored procedures, and very similar in nature to SQL variables.\nIn this case your database doesn't add the contents of arg_test into the SQL body (as it would have been in python if you did something like + arg_test +) and then evaluate the resulting SQL. On the contrary, is uses arg_test as though it's a variable (in this sense, it's indeed similar to prepared statements, but technically it's entirely different matters).\nWhile speaking of stored procedures, they are irrelevant to injections. By itself, just using a procedure doesn't guarantee anything. One can write a procedure which is immune to injection, and write another which is prone to injection. Just like any other code.\nBut as long as you are just using a parameter passed to the procedure - it's safe.\n",
        "Source": "https://stackoverflow.com/questions/77500796/sql-injection-in-stored-procedures-via-mysql-connector"
    },
    {
        "Title": "Protection query against SQL injection, using PDO",
        "Question": "may I ask you how to make this protected against sql injection?\nI have\n$podminkazeme = \"\";\n$podminkakraj = \"\";\n\nif ( isset( $_GET[ \"zeme\" ] )and !empty( $_GET[ \"zeme\" ] ) ) {\n   $podminkazeme = \"and nb.zemehledani in (\" . str_replace( '%2C', ',',  $_GET[ \"zeme\" ] ) . \")\";\n};\n\nif ( isset( $_GET[ \"kraj\" ] )and !empty( $_GET[ \"kraj\" ] ) ) {\n  $podminkakraj = \"and nb.krajhledani in (\" . str_replace( '%2C', ',', $_GET[ \"kraj\" ]  ) . \")\";\n};\n\n$conn = new PDO( DB_DSN, DB_USERNAME, DB_PASSWORD );\n$sqljednotkaa = \"\n  select nb.*, \n    dv.nazev as developer, \n    UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, \n    UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, \n    uz.nazev as skladUpravil, \n    uzm.nazev as makler, \n    tp.nazev as typProdeje, \n    dal.nazev as nazevdalnice\n  from nabidka nb \n  left join uzivatele uz on uz.id=nb.skladUpravil \n  left join uzivatele uzm on uzm.id=nb.makler \n  left join typProdeje tp on tp.id=nb.typProdeje \n  left join developer dv on dv.id=nb.developer\n  left join dalnice dal on dal.id=nb.dalnice \n  where nb.emptyid is null \n    $podminkaid \n    $podminkastav \n    $podminkaupraveno \n    $podminkavelikost \n    $podminkacena \n    $podminkamakler \n    $podminkaexport \n    $podminkatypprodeje \n    $podminkatypnemovitosti \n    $podminkazeme \n    $podminkadalnice \n    $podminkakraj \n    $podminkaokres \n    $podminkadeveloper \n    $podminkatechnickeparametry \n    $podminkahledanislovo \n  order by nb.emptyid asc $razenipodminka\";\n\n$stjednotkaa = $conn->prepare( $sqljednotkaa );\n$stjednotkaa->execute();\n\n",
        "Answer": "Try this\n$conditions = [];\n$parameters = [];\n\nif (isset($_GET[\"zeme\"]) && !empty($_GET[\"zeme\"])) {\n    $zemeValues = explode(',', $_GET[\"zeme\"]);\n    $conditions[] = \"nb.zemehledani IN (\" . implode(', ', array_fill(0, count($zemeValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $zemeValues);\n}\n\nif (isset($_GET[\"kraj\"]) && !empty($_GET[\"kraj\"])) {\n    $krajValues = explode(',', $_GET[\"kraj\"]);\n    $conditions[] = \"nb.krajhledani IN (\" . implode(', ', array_fill(0, count($krajValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $krajValues);\n}\n\n$conn = new PDO(DB_DSN, DB_USERNAME, DB_PASSWORD);\n$sqljednotkaa = \"SELECT nb.*, dv.nazev as developer, UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, uz.nazev as skladUpravil, uzm.nazev as makler, tp.nazev as typProdeje, dal.nazev as nazevdalnice from nabidka nb left join uzivatele uz on uz.id=nb.skladUpravil left join uzivatele uzm on uzm.id=nb.makler left join typProdeje tp on tp.id=nb.typProdeje left join developer dv on dv.id=nb.developer left join dalnice dal on dal.id=nb.dalnice where nb.emptyid is null\";\nif ($conditions) {\n    $sqljednotkaa .= \" AND \" . implode(\" AND \", $conditions);\n}\n$sqljednotkaa .= \" ORDER BY nb.emptyid ASC $razenipodminka\";\n$stjednotkaa = $conn->prepare($sqljednotkaa);\n$stjednotkaa->execute($parameters);\n\n",
        "Source": "https://stackoverflow.com/questions/77416426/protection-query-against-sql-injection-using-pdo"
    },
    {
        "Title": "Enforcing row-level security in a shared postgres pool",
        "Question": "I'm working on a typical client-server webapp. It is using a system somewhat like GraphQL where the client has some flexibility in specifying what data it needs, without custom API endpoints for every type of data. The server is running node, and is using node-postgres with a typical pg.Pool. A client could send something like this:\n{select: '*', from: 'expenses', where: {'op': 'gt', 'lhs': 'expenses.amount', 'rhs': 20}}\n\nwhich would be translated to SELECT * FROM expenses WHERE expenses.amount > $1 (given $1 = 20). With enough care, this system can be made safe from injection attacks.\nI'd also like to incorporate row-level security policies. For example:\ncreate policy only_see_own_expenses on expenses using (expenses.user_id = <USER ID>);\n\nAs an extra security barrier, I want to make sure that even if an injection attack is succesful, a client can not \"unset\" its user ID.\nI've seen <USER ID> been defined in a few ways:\n\ncurrent_user, in which case every user of the app also needs a postgres user/role\nAn arbitrary setting like current_setting('myapp.user_id') in combination with a SET LOCAL myapp.user_id = ... at the start of a transaction\n\nApproach (2) seems most flexible to me. I'd just wrap every generated SQL query in a BEGIN; SET LOCAL myapp.user_id = 123; {generated query}; END;. The problem is that an attacker could inject another SET LOCAL statement, and impersonate another user.\nIn approach (1) you can similarly wrap every generated query with a SET ROLE ... statement at the start, yielding the same problem. An alternative is to create a new connection for each query with that specific role. I believe postgres would never allow that connection to switch to another role. But setting up a new connection per query would result in a lot of overhead.\nHow do I enforce row-level security without the performance hit of a new connection per query?\n",
        "Answer": "As you observe, setting a placeholder parameter and using SET LOCAL ROLE to temporarily assume a different role can be subverted by attackers who can execute arbitrary SQL, like in an SQL injection attack.\nI don't think that there is a way to accomplish what you want that is safe from SQL injection. The problem is a fundamental one: you handle authentication in the application, not in the database (where you are using a single application user to benefit from connection pooling), but you want to have the database handle authorization via row-level security. That requires a way for the application to tell the database what the application user is. Now the only way that the application can tell the database anything is by using SQL, and an attacker who can run arbitrary SQL statements can always subvert that.\nI think that the only option for you is to harden your application against SQL injection attacks.\n",
        "Source": "https://stackoverflow.com/questions/77272972/enforcing-row-level-security-in-a-shared-postgres-pool"
    },
    {
        "Title": "SQL Injection - Python - MySQL",
        "Question": "Basically,\nI'm trying to find ways to explore SQL Injection vulnerabilities in  the code presented below. The code has another layer, presentation, where it asks the user for board_name input.\nTable_name is an inside variable, user doesn't have control over it.\n    def find_board_by_name(cls, connector, board_name, table_name: str):\n        query = \"SELECT * FROM {} WHERE name = '{}'\".format(table_name,board_name.title())\n        print(query)\n        try:\n            connector.mycursor.execute(query)\n            res = connector.mycursor.fetchone()\n            if res:\n                return res[1]\n            return None\n        except Exception as e:\n            raise e\n        \n\nTried to :\n1- board_name as:          ' OR '1'='1\nIt worked, program returned to me me first item on the table (it wasn't supposed to, since I didn't provide any name)\n2- Tried to put board_name as:          ';Delete Table BoardGames;\nIt didn't work, mysql.connector.errors.InterfaceError: Use multi=True when executing multiple statements was presented to me.\nSo my question is \" mysql.connector\" is protecting me against the majorities of the SQL Injections? Since I didn't set the \"multi\" tag in the code to True?  Could you show me other ways to explore vulnerabilities in this code? Besides the 1 and 2.\nI guess I know how to fix the SQL Injection problem: \"connector.mycursor.execute(query, values)\" probably will do the job.  But, I'm trying to understand better what kind of SQL Vulnerabilities I would have with this original code without this fix.\n",
        "Answer": "SQL injection isn't always malicious. It could result in a simple error instead of deleting all the student records.\nFor example, if some legitimate user of your site is named \"O'Reilly\" then your code formatting would have an imbalanced quote, which would be a syntax error:\nSELECT * FROM tablename WHERE name = 'O'Reilly'\n                                       ^ wtf\n\nUsing parameters avoids this kind of problem. Query parameters aren't just a quick way of interpolating variables. They either escape special characters in the dynamic content (by default Python does this), or else full-blown parameters keep the values separate from the SQL query until after it has been parsed by the SQL server. So no special characters can ever cause a syntax error.\nBut table names and other identifiers cannot be parameters. You can use parameters only in place of SQL values, like your quoted string in your example.\nYou said the user is not in control of the table name variable. That's great, but not sufficient.\nWhat if another programmer on your project isn't careful when calling your find_board_by_name() function, and inadvertently passes unsafe content as the table name? Note that unsafe content is more than just user input.\nWhat if the table name is a reserved keyword in SQL?\nSELECT * FROM order WHERE name = ?\n              ^ syntax error\n\nWhat if the table name contains whitespace or punctuation? There are other risks.\nYou should code your function so it does not trust its caller. For SQL values, do use parameters of course. For other dynamic elements like table names, you do have to interpolate variables into the SQL string, but you can be defensive:\n\nUse an allowlist to verify the table name is a legitimate known table name.\n\nDelimit the table name in back-ticks in your SQL, just in case it's a reserved word or not a simple identifier.\nlegit_table_names = Set(['table1', 'table2', 'table3'])\nif table_name not in legit_table_names:\n  return error # pseudocode\n\nquery = f\"SELECT * FROM {table_name} WHERE name = %s\"\n\n\n\n(I prefer f-strings instead of format() in modern Python)\n",
        "Source": "https://stackoverflow.com/questions/77167563/sql-injection-python-mysql"
    },
    {
        "Title": "PHP Code Functioning as Intended but UNION Injection Payload Doesn&#39;t Work",
        "Question": "I am attempting to make a web application (LAMP stack - MySQL version: 8.0.36-0ubuntu0.22.04.1) that is vulnerable to a SQL UNION Injection attack (or some type of SQL injection attack). The code takes the user's input via POST parameters to get the VIN & mileage.\nThe following PHP Code handles the backend to adding the parameters to the database:\n// If SESSION variables are set then proceed to Mileage.php\n    if (isset($_SESSION['username'])) {\n        // PHP Code for Handling ADDING CAR\n        // Declare Variables\n        $username = $_SESSION['username'];\n        $vin = $_POST['vehicle'];\n        $mileage = $_POST['mileage'];\n\n        // Implement Try-catch for Error Hanlding\n        try {\n            // Add Mileage\n            if(isset($_POST['add_data'])) {\n                $query = \"INSERT INTO mileage_master.mileages (`username`, `VIN`, `mileage`) VALUES ('$username', '$vin', '$mileage')\";\n                $query_result = mysqli_query($db,$query);\n    \n            // Update Mileage\n            } elseif(isset($_POST['update_data'])) {\n                // Query to update associated VIN's Mileage\n                $update = \"UPDATE mileage_master.mileages SET mileage='$mileage' WHERE username='$username' AND VIN='$vin'\";\n                $update_result = mysqli_query($db,$update);\n            // Remove Mileage\n            } elseif(isset($_POST['remove_data'])) {\n                // Query to Remove VIN & Mileage\n                $remove = \"DELETE FROM mileage_master.mileages WHERE username='$username' AND VIN='$vin'\";\n                $remove_result = mysqli_query($db,$remove);\n            }\n        }\n        catch (mysqli_sql_exception $e) {\n            $showAlert = true;\n            // Display Syntax Error\n            $errorMessage = \"My SQL Error: \" . $e->getMessage();\n            // Display Query (Intentional Unsafe Coding Practices)\n            $errorMessage .= \"\\t||\\tQuery: \" . $sql;\n        }\n\n        \n    }    \n    else {\n        header(\"Location: /\");\n    }\n?>\n\nThe following PHP code prints the VIN & mileage to user's page:\n<?php\n    // Query to get all VINs associated with username\n    $result = mysqli_query($db,\"SELECT * FROM mileages WHERE username='$username'\");\n\n    echo \"<table style='margin-top: 35px;'>\";\n    echo \"<tr><th>VIN</th>\";\n    echo \"<th>Mileage</th></tr>\";\n\n    // While Loop to iterate through all returned rows\n    while($row = mysqli_fetch_assoc($result)) {\n        echo \"<tr style='text-align: center;'>\";\n        // VIN\n        echo \"<td>\" . $row['VIN'] . \"</td>\";\n        // Mileage\n        echo \"<td>\" . $row['mileage'] . \"</td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n?>\n\nMy thought process was that because the application uses dynamic queries an attacker could include some type of UNION SELECT statement. The UNION select statement's output would be stored within the VIN column for that query.\nHowever, I am unable to create a successful SQL Injection payload that would accomplish this.\nQuestion\nDo I need to change the logic of my application to make the exploit possible or is my idea not exploitable in the first place?\n",
        "Answer": "You can't get SQL injection in the SELECT query, since the user doesn't have control over the $username variable, and that's the only thing you substitute. But you can do it in the INSERT query, to insert extra rows in the table with arbitrary values.\nIt needs to terminate the current value list, then it can use a subquery in another value list, and finally it has to provide the beginning to match the end of the original value list.\n$vin = \"12345', '20'), ('baduser', (SELECT '67890'), (SELECT '30')), ('baduser2', '1111\";\n\nThis will put a bogus VIN and mileage into the row for $username, then insert additional rows for baduser and baduser2. baduser2 will get another bogus VIN and the mileage from the parameter.\nbaduser can use subqueries to get its VIN and mileage values, as long as the subqueries each only return one row and column. I used literals in the above example, but you can make them arbitrarily complex.\n",
        "Source": "https://stackoverflow.com/questions/78093937/php-code-functioning-as-intended-but-union-injection-payload-doesnt-work"
    },
    {
        "Title": "How to fix SQL injection if we have to use DB name dynamically in SQL Server?",
        "Question": "This is the implementation in code: the schema name comes from a configuration file and is different for each environment. Sonar throws SQL injection alert at this statement:\nselect * \nfrom dbName.dbo.stu_name;     <<dbname is the variable that comes from property file>>\n\nI tried these solutions:\n\nUsing query.setParameter(?,dbname). Tried passing dbname dynamically and vulnerability was fixed. When debugging, the query was throwing an error and did not execute.\n\nUsed String.format(select * from \\'%s\\',tablename.replace(\"\\'\",\"\\'\\'\")) - vulnerability fixed, but query failed to execute\n\n\nI tried various other solutions and nothing worked.\nCan anyone please help me with this?\n",
        "Answer": "The \"best\" defence you can do is not use dynamic SQL. Considering that this is the database that's dynamic, and based on a prior question, I would suggest that this is occurring from an application, so that means you don't need 3-part naming. Instead you parametrise the database name in the connection string and use 2-part naming; no dynamic SQL needed.\nIf you must use dynamic SQL, then the \"best\u2122\ufe0f\" defence would be to validate the database name, and then ensure you properly quote the database name when you inject it into your dynamic statement.\nHere I validate the database name in sys.databases and then use QUOTENAME to quote the name appropriately. If the database doesn't exist, no query is run (and no error is returned):\nDECLARE @DatabaseName sysname = N'YourDatabaseName';\n\nDECLARE @SQL nvarchar(MAX);\nSELECT @SQL = N'SELECT * FROM ' + QUOTENAME(d.name) + N'.dbo.stu_name;'\nFROM sys.databases d\nWHERE d.name = @DatabaseName;\n\nEXEC sys.sp_executesql @SQL;\n\n",
        "Source": "https://stackoverflow.com/questions/78027431/how-to-fix-sql-injection-if-we-have-to-use-db-name-dynamically-in-sql-server"
    },
    {
        "Title": "How to reduce vulnerability to cyber attacks from injection?",
        "Question": "I have very little knowledge about SQL injection, and there are probably other threats I am unaware of out there for stealing company data, how would I make this python code better in regards to security?\nmerge_query = \"\"\"\nMERGE INTO sql_table_name AS Target\nUSING (\n    VALUES {}\n) AS Source (transaction_year, month_num, month_name, price_nt)\nON Target.transaction_year = Source.transaction_year \nAND Target.month_num = Source.month_num\nWHEN MATCHED AND (Target.month_name != Source.month_name OR Target.price_nt != Source.price_nt) THEN\n    UPDATE SET Target.month_name = Source.month_name, Target.price_nt = Source.price_nt\nWHEN NOT MATCHED THEN\n    INSERT (transaction_year, month_num, month_name, price_nt) VALUES (Source.transaction_year, Source.month_num, Source.month_name, Source.price_nt);\n\"\"\".format(','.join(['(?,?,?,?)' for _ in range(len(data))]))\n\nparams = [item for sublist in data for item in sublist]\n\ntry:\n    obj_crsr.execute(merge_query, params)\n\nexcept Exception as e:\n    obj_crsr.rollback()\n    print(e)\n    print(\"Transaction rolled back\")\n\nelse:\n    obj_cnxn.commit()\n    obj_crsr.close()\n    obj_cnxn.close()\n\nThis python code is given data in the following format:\n[(2023, M12,    December,   541.44),\n(2023,  M11,    November,   486.64),\n(2023,  M10,    October,    468.23),\n(2023,  M09,    September,  478.80),\n(2023,  M08,    August,     475.41)]\n\nAnd then is converted to a list in the params variable.  That data looks like this:\n['2023', 'M12', 'December', '541.442', '2023', 'M11', 'November', '486.639', '2023', 'M10', 'October', '468.226', '2023', 'M09', 'September', '478.802', '2023', 'M08', 'August', '475.411']\n\nThis is the only method I have found to work when trying to merge data into an existing table using PYODBC.  I have heard of parameterizing the query or naming sql variables, but I don't know how to adapt existing examples/solution on stack overflow to my specific use case.  Any suggestions are appreciated.\n",
        "Answer": "There is nothing wrong with your existing code as far as injection is concerned.\nInjection only happens when user data is injected directly into the query. Here, that is not happening. What is happening is that a dynamic list of ? parameter markers are being injected, in a well-defined way (once per row), and the actual values are passed as a dynamic list of parameters. There is absolutely no scope for injection here.\nBe aware of a few points though:\n\nUsing such code does tend to focus minds on \"oh just inject the data\". Might be worth putting in a comment such as only paramaters are injected here.\nIf there are no rows at all to insert then you get invalid code ( VALUES ), so you should check for that.\nDynamic numbers of parameters mean you get a recompile for every possible variation of parameters. This is not as many as would be had if you actually injected the data, but still a concern.\nA Table-Valued Parameter or a bulk insert into a temp table are therefore both better options than any of this, but neither are supported by pyodbc. fast_executemany or to_sql might be options, or BULK INSERT from an external file.\nThe maximum number of parameters is 2100, you will hit performance issues well before that though.\n\n",
        "Source": "https://stackoverflow.com/questions/77996154/how-to-reduce-vulnerability-to-cyber-attacks-from-injection"
    },
    {
        "Title": "Is using Hibernate&#39;s Restrictions.eq() method safe against SQL injection?",
        "Question": "Is using Hibernate's Restrictions.eq() method, as used in the example below, safe against SQL injection? Or similar methods like Restrictions.in(), Restrictions.ge(), ...\nString vulnerable = //parameter from user interface \nCriteria ct = this.getCriteria();\nct.add(Restrictions.eq(\"propertyName\", vulnerable));\n\nI have found that probably is, as explained in this answer\nbut reviewing OWASP documentation, there is an example that shows a comment which confuses me (// This should REALLY be validated too). Is needed to validate the input, or is secure as is?\nThe example in the OWASP documentation\n// Criteria API\n// This should REALLY be validated too\nString userSuppliedParameter = request.getParameter(\"Product-Description\");\n// Perform input validation to detect attacks\nInventory inv = (Inventory) session.createCriteria(Inventory.class).add\n(Restrictions.eq(\"productDescription\", userSuppliedParameter)).uniqueResult();\n\n",
        "Answer": "Yes, Hibernate's Criteria API would protect you against SQL Injection, as it parameterises the query - you can see this in action by enabling sql logging.\nWhat you do need to be careful about is concatenating user inputs etc. I think the documentation may perhaps be referring to validate the user input at both client and server side.\n",
        "Source": "https://stackoverflow.com/questions/77993970/is-using-hibernates-restrictions-eq-method-safe-against-sql-injection"
    },
    {
        "Title": "Operand type clash: int is incompatible with date in sql",
        "Question": "i using am writing a insert statement but getting above error\nInsert query\nvar insertSql = string.Format(\n                $\"INSERT INTO Sales (Date, Team, Sales) VALUES ({0}, {1}, {2})\",\n                new List<SqlParameter>()\n                {\n                    new(\"@date\", sales.Date.ToString(\"yyyy-MM-dd\")),\n                    new(\"@team\", sales.Team),\n                    new(\"@sales\", sales.Sales),\n                });\n            var rowCount = Sql.ExecuteNonQuery(Conn,insertSql);\n\nhere is my table schema and class\nSaleId int,\nDate Date,\nTeam varchar(50),\nSales int\n\npublic class Sales\n{\n    public int SalesId { get; set; }\n    public DateTime Date { get; set; }\n    public string Team { get; set; }\n    public int Sales { get; set; }\n}\n\nI want to use parameterized query to achive this so tried this but giving above error\n",
        "Answer": "The immediate problem here is that $\"...\" is itself an interpolated string, and the values you are injecting are the literal 0, 1, and 2 - they're not placeholders: they're the values. Removing the $ would make it a literal string suitable for string.Format, but you don't want to use string.Format here; also, you don't want to format the date - just pass it as a date.\nHonestly: if you're writing the SQL yourself, I'm not sure EF is even needed here; with Dapper this would be simply:\nconn.Execute(\"INSERT INTO Sales (Date, Team, Sales) Values (@Date, @Team, @Sales)\",\n    sales);\n\nor with a trick for better SQL formatting:\nconn.Execute(\"\"\"\n    INSERT INTO Sales (Date, Team, Sales)\n    Values (@Date, @Team, @Sales)\n    \"\"\", sales);\n\nDapper will deal with finding sales.Date, sales.Team and sales.Sales, and add them correctly. EF may also have an API for doing ad-hoc queries like this, but... this feels more like a Dapper scenario, unless you're emotionally invested in EF.\n",
        "Source": "https://stackoverflow.com/questions/77926016/operand-type-clash-int-is-incompatible-with-date-in-sql"
    },
    {
        "Title": "How to limit memory usage with PDO in MariaDB : Fatal error: Allowed memory size of 67108864 bytes exhausted",
        "Question": "I am changing my SQL request to PDO in order to integrate more security against SQL injecting.  I was using before procedural msqli and everything was working ok.  Now I updated server to PHP 8.2 and I am using PDO and prepared statements.\nThe BD I am accessing is old MariaDB and has a table with 247 fields most of which are NULL on a single row. (It is sections for a description of mushrooms, but only some of each are really described in a single row (mushrooms)).\nMost of the 247 fields are set to mediumtext because they can content up to a couple paragraphs.\nMy connection script is :\ntry {\n\n    db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\nreturn;\n} \n\nWhen I select one row of that table in order to echo the not NULL descriptions column, as soon as I execute the statement I run into a full memory.  The error is at the stmt->execute() line, not even at the fetchAll line.\n$description = 'someTag';\n\n$sql = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n$stmt = $db->prepare($sql);\n$stmt->bindParam(':tag', $description, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n$result = $stmt->fetchAll();\n$stmt->closeCursor();\n\nThe error :\nFatal error: Allowed memory size of 67108864 bytes exhausted (tried to allocate 262144 bytes) in /home/mycoqueb/public_html/nou.mycoquebec.org/scripts/bd-query.php on line (**the $stmt->execute() line)\n\nI tried to use :\nwhile ($row = $stmt->fetch()) {\n\nInstead of fetchAll() but it changed noting, I used it on every other request from the same page and it changed noting.  I flushed variables that were no more useful to NULL on the rest of the page and it changed nothing.  I even isolated the script on an empty page and it exceeds the memory limit.\nI tried to add this to my connection script and it changed nothing :\ndb->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\nI tried to select only one field instead of * and this worked, but I don't have an easy way to find NOT NULL columns in the table for a specific tag (row).\nI tried to find a SQL statement to restrict my SELECT to NOT NULL columns but I was not successful.\nI know I could get add memory_limit = 256M to the phpini file, but that is not what I want since the website has a high usage and for now its on a multihosted server.\nThe best solution would be to reengineer the MariaDB database using a table with description sections labels and linking only used sections to the main description table for each row, but I have limited access to the db since it is online with the old website and the old website needs to stay online and up to date for 1-2 years after new deployment. I though of creating a daily cron job to do that but I would like to avoid for the moment.\nAny Idea how I can get this to work?  It was working fine using msqli on php 8.1.\nTo answer the worries of contributors that think it's related to another part of the page code, here is the complete code of the isolated test page.\nfunction convert($size)\n {\n    $unit=array('b','kb','mb','gb','tb','pb');\n    return @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];\n }\n\n\n$servername = \"localhost\";\n$username = \"myUser\";\n$password = \"myPass\";\n$dbname = \"myDB\";\n\n\ntry {\n\n    $db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    //$db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\n } catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\n    return;\n}   \n\n$query = (array_key_exists(\"query\",$_REQUEST) ? $_REQUEST[\"query\"] : \"\");\n\n\nif($query != \"\"){\n\n    $tag_desc = 'Aegerita candida';\n    // Code works if I limit to \"SELECT Titre FROM description WHERE tag = :tag LIMIT 1\";\n    $sql_description = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n    $stmt = $db->prepare($sql_description);\n    $stmt->bindParam(':tag', $tag_desc, PDO::PARAM_STR);\n    \n    echo convert(memory_get_usage(true));  // returns 2mb\n    $stmt->execute();\n    $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n    \n    $i = 0;\n    \n    while ($row = $stmt->fetch()) {\n\n        if($i == 0) {\n\n            ?><table style=\"border-collapse:collapse;border: 0;table-layout: fixed;color: #063850;background-color: #DDDDDD;text-align: left\"><thead><tr style=\"border: 2px solid #063850;\"> <?php\n            foreach (array_keys($row) as $key) {\n                //print_r($key);\n                echo (\"<th style='padding:5px;border: 2px solid #063850;position:sticky;top: -2;z-index:10;background-color:#e5a045'>$key</th>\");\n            }\n            echo (\"</tr></thead>\");\n        }\n\n        $i++;\n\n        echo (\"<tr style='border: 2px solid #063850'>\");\n        foreach ($row as $value) {\n            echo (\"<td style='padding:2px;border: 2px solid #063850'>$value</td>\");\n            // <img src=\\\"$value\\\" height=\\\"400\\\" >\n        }\n        echo (\"</tr>\");\n    }\n    \n    if ($i > 0) {\n        echo (\"</table>\");\n        echo ('<div style=\"margin-top:400px\">&nbsp;</div>');\n    } else {\n        echo \"Aucun r\u00e9sultat\";\n    }\n\n}\n\n$db = null;\n\nHas mentioned it automatically work if I limit my sql to a couple fields.\nThe error is still on the stmt->execute() line.\n",
        "Answer": "Could it be that the issue is your data model?\nIf you have a table that has a lot of nulls, then the data is most likely not normalized.\nInstead of having 256 columns in your table, maybe just have the ones that are always there, and then relate it to a separate table with three fields: foreign key to the main table, a tag field and a value field.\nIf you are rewriting your application to USE PDO anyway, some long-term considerations could be included.\nExample table\nLayout like yours (all data in one table):\n\n\n\n\nid\nname\nemail\nsomeotherdata\ntag1\ntag2\ntag3\ntag4\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\nNULL\na\nNULL\n100\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\nc\na\nNULL\n400\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\nNULL\nNULL\n5000\nNULL\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\nNULL\na\nNULL\n100\n\n\n\nSuggested Tag-Value table layout\nMain Table\n\n\n\n\nid\nname\nemail\nsomeotherdata\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\n\n\n\n\nTag-Value Table\n\n\n\n\nid\ntag\nvalue\n\n\n\n\n1\ntag2\na\n\n\n1\ntag4\n100\n\n\n2\ntag1\nc\n\n\n2\ntag2\na\n\n\n2\ntag4\n400\n\n\n3\ntag3\n5000\n\n\n4\ntag2\na\n\n\n4\ntag4\n100\n\n\n\nUsage\nInstead of selecting just your row, you WILL need to either join the results together, or make two separate calls. I would suggest two calls, especially since you are rtunning into memory issues.\nSELECT \n  id, \n  name,\n  email,\n  someotherdata\nFROM\n  MainTable\nWHERE\n  id = 1;\n\n-- and then the tags\nSELECT \n  id, \n  tag,\n  value\nFROM\n  TagValueTable\nWHERE\n  id = 1; -- reference to the main table\n\n\n\nAdvantaages of this normalized approach\n\nLess bloat (not so many nulls)\nSimpler structures\nREST ready\nMore resilient\n\nAdd tags without changing the DDL of the database (ALTER)\n\n\nYou can still get the original layout by making subselects and transpositions in mysql\nYou can easily make statistics on the tags related to each other\n\nDisadvantages\n\nComplexity of the data model increases\nYou need to do a lot of extra SQL gymnastics to get EXACTLY what you had before\n\n",
        "Source": "https://stackoverflow.com/questions/77895050/how-to-limit-memory-usage-with-pdo-in-mariadb-fatal-error-allowed-memory-size"
    },
    {
        "Title": "PHP: Prepare JSON selector to Prevent MySQL Injection",
        "Question": "What is the best/proper way to prepare a dynamic MySQL JSON selector for queries, in order to prevent SQL injection? As an example, say I want to execute the following query:\nSELECT `key` ->> \"$.key.path\" AS `setting_value`\nFROM `settings`\nLIMIT 1\n\nBut I want to make the key path dynamic, e.g.:\n$sql = <<<SQL\n    SELECT `key` ->> \"{$path}\" AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nWith conditional values, I can structure the SQL for a prepared statement using PDO, e.g.:\n$sql = <<<SQL\n    SELECT *\n    FROM `settings`\n    WHERE `other_field` = :field_val\n    LIMIT 1\nSQL;\n\n$statement = $this->handle()->prepare($sql);\n$statement->execute([':field_val' => 'some val']);\n$records = $statement->fetchAll(PDO::FETCH_OBJ);\n\nAdding something like the following to my database adapter (or even to my helper functions) seems rather inelegant and prone to errors/issues:\n    public function cleanJsonSelector(string $selector) : string {\n        return preg_replace('/[^-\\$a-zA-Z0-9_\\[\\].*\\s]/', '', $selector);\n    }\n\nThoughts/help?\n",
        "Answer": "The -> and ->> operators only support string literals. They do not expressions, variables, or parameters.\nBut you can use any expression \u2014\u00a0including a parameter placeholder \u2014\u00a0in the equivalent JSON function JSON_EXTRACT().\nThe ->> operator is like JSON_UNQUOTE(JSON_EXTRACT(json_doc, path))\n$sql = <<<SQL\n    SELECT JSON_UNQUOTE(JSON_EXTRACT(`key`, :path)) AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nThis seems like an unnecessary inconsistency in the functionality of MySQL's JSON operators, but this is how it's implemented in the current MySQL version 8.3.\n\nFor what it's worth, it was requested to support expressions after the -> operator (and presumably also the ->> operator) here: https://bugs.mysql.com/bug.php?id=87360\nYou may want to log into the MySQL bug tracker site and click the \"Affects Me\" button to hopefully increase the priority of implementing that feature.\n\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => true (the default), then parameters are not true parameters, they are string-substitutions into the SQL query before it is parsed. So what looks like a parameterized query really uses a string literal as far as MySQL is concerned, and the ->> operator is successful.\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => false, then parameters placeholders are parsed by MySQL during the prepare step. Since parameters are not supported as the argument to the ->> operator, this will fail.\nMysqli only supports true parameters, so it will always fail.\n",
        "Source": "https://stackoverflow.com/questions/77892840/php-prepare-json-selector-to-prevent-mysql-injection"
    },
    {
        "Title": "SQL-Injection in duckdb-queries on pandas dataframes",
        "Question": "In a project I am working with duckdb to perform some queries on dataframes. For one of the queries, I have some user-input that I need to add to the query. That is why I am wondering if SQL-Injection is possible in this case. Is there a way a user could harm the application or the system through the input? And if so, how could I prevent this case? It seems that duckdb has no PreparedStatement for queries on dataframes.\nI already looked up in the documentation (https://duckdb.org/docs/api/python/overview.html) but couldn't find anything useful. The method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\nThere is another question on stackoverflow (Syntax for Duckdb > Python SQL with Parameter\\Variable) about this topic but the answer only works on real sql-connections and the version with f-strings seems insecure to me.\nHere is a small code sample to show what I mean:\nimport duckdb\nimport pandas as pd\n\ndf_data = pd.DataFrame({'id': [1, 2, 3, 4], 'student': ['student_a', 'student_a', 'student_b', 'student_c']})\n    \nuser_input = 3  # fetch some user_input here\n    \n# How to prevent sql-injection, if its even possible in this case?\nresult = duckdb.query(\"SELECT * FROM df_data WHERE id={}\".format(user_input))\n\nSo how would you approach this problem? Is sql-injection even possible? Thanks for your help and feel free to ask for more details, if you need some more information!\nEDIT: Fixed a syntax error in the code\n",
        "Answer": "\nThe method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\n\nIt seems it's possible:\n>>> duckdb.execute(\"\"\"SELECT * FROM df_data WHERE id=?\"\"\", (user_input,)).df()\n\n   id    student\n0   3  student_b\n\n",
        "Source": "https://stackoverflow.com/questions/77884985/sql-injection-in-duckdb-queries-on-pandas-dataframes"
    },
    {
        "Title": "SQL injection error in Modsecurity logs in Plesk",
        "Question": "I am receiving the following error for 1 of my wordpress site running on a Plesk server.\n[client 000.00.00.000] ModSecurity: Access denied with code 403 (phase\n 2). Pattern match \"[\\\\\\\\[\\\\\\\\]\\\\\\\\x22',()\\\\\\\\.]{10}$|\\\\\\\\b(?:union\n\\\\\\\\sall\\\\\\\\sselect\\\\\\\\s(?:(?:null|\\\\\\\\d+),?)+|order\\\\\\\\sby\n\\\\\\\\s\\\\\\\\d{1,4}|(?:and|or)\\\\\\\\s\\\\\\\\d{4}=\\\\\\\\d{4}|waitfor\\\\\\\\sdelay\\\\\\\\s'\n\\\\\\\\d+:\\\\\\\\d+:\\\\\\\\d+'|(?:select|and|or)\\\\\\\\s(?:(?:pg_)?sleep\\\\\\\\(\\\\\\\\d+\n\\\\\\\\)|\\\\\\\\d+\\\\\\\\s?=\\\\\\\\s?(?:dbms_pipe\\\\\\\\.receive_message\\\\\\\\ ...\" at \nREQUEST_COOKIES:sbjs_first. [file \"/etc/httpd/conf/modsecurity.d/rules\n/comodo_free/22_SQL_SQLi.conf\"] [line \"66\"] [id \"218500\"] [rev \"18\"] \n[msg \"COMODO WAF: SQLmap attack detected||website name|F|2\"] [data \n\"Matched Data: |||id=(none) found within REQUEST_COOKIES:sbjs_first: \ntyp=typein|||src=(direct)|||mdm=(none)|||cmp=(none)|||cnt=(none)|||trm=\n(none)|||id=(none)\"] [severity \"CRITICAL\"] [tag \"CWAF\"] [tag \"SQLi\"] \n[hostname \"website name\"] [uri \"/wp-login.php\"] [unique_id \"ZamB-\n8j9IfDbYiJgRoahGwAAAAM\"], referer:\n\nWhen I visited some pages on the frontend it gives this error:\nServer Error\n403\nForbidden\nYou do not have permission to access this document.\nThat's what you can do\nReload Page Back to Previous Page Home Page\nI wonder if this a real attack? or false positive\nI was able to export the site to local. It seems working ok there.\n",
        "Answer": "CRS dev-on-duty here. Even if you don't use CRS rules and this is a problem of COMODO WAF rules, I'll try to help. While searching for the cookie name sbjs_first, I found this GitHub issue here, which is an indication that this sourcebuster cookie looks legitimate. Maybe you'll even the solution to your problem in one of the comments in this issue.\nIf this isn't the solution, you may need to tune the rules. Maybe you can also use our (CRS) documentation on false positives and rule tuning.\n",
        "Source": "https://stackoverflow.com/questions/77842169/sql-injection-error-in-modsecurity-logs-in-plesk"
    },
    {
        "Title": "Oracle SP Checkmarx SAST scan showing Parameter Tampering",
        "Question": "SP accepts key and returns flag status. In Checkmarx SAST scan key, It is saying parameter not validated before being used in query. Please help to understand what validation can be added so that it passes the vulnerability test.\nCreate procedure sp_name (key varchar2, v_flag out number) as\nv_key varchar2(50);\nv_sql clob;\nBegin\nIf key is null then\nv_flag:=-1;\nElse\nv_key:=sys.dbms_assert.enquote_literal(upper(trim(key)));\nv_key:=replace(v_key,'''');\nv_sql:=q'[select flag from tbl where key=:1]';\nExecute immediate v_sql into v_flag using v_key;\nEnd if;\nException when no_data_found then\nv_flag:=-1;\nEnd;\n\nI tried bind variable and dbms_assert but still it shows code is vulnerable\n",
        "Answer": "Stop using EXECUTE IMMEDIATE when you do not need to (and trying to make it overly complicated) and use a simple SELECT ... INTO ... statement with the PL/SQL variable as the bind variable (and give the PL/SQL variable a different name to the table's column).\nThe procedure can be simplified to:\nCREATE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  SELECT flag\n  INTO   v_flag\n  FROM   tbl\n  WHERE  key=v_key;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nThen, if you have the sample data:\nCREATE TABLE tbl (key, flag) AS\n  SELECT 'A',  1 FROM DUAL UNION ALL\n  SELECT 'B',  2 FROM DUAL UNION ALL\n  SELECT 'C',  3 FROM DUAL UNION ALL\n  SELECT NULL, 4 FROM DUAL;\n\nThen:\nDECLARE\n  v_flag TBL.FLAG%TYPE;\nBEGIN\n  sp_name('A', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('B', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('C', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('D', v_flag);\n  DBMS_OUTPUT.PUT_LINE('D: ' || v_flag);\n  sp_name(NULL, v_flag);\n  DBMS_OUTPUT.PUT_LINE('NULL: ' || v_flag);\nEND;\n/\n\nOutputs:\n\nA: 1\nB: 2\nC: 3\nD: -1\nNULL: -1\n\n\nOr, if you want it slightly more complicated to avoid the SELECT if the key is NULL then:\nCREATE OR REPLACE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  IF v_key IS NULL THEN\n    v_flag := -1;\n  ELSE\n    SELECT flag\n    INTO   v_flag\n    FROM   tbl\n    WHERE  key=v_key;\n  END IF;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nfiddle\n",
        "Source": "https://stackoverflow.com/questions/77841440/oracle-sp-checkmarx-sast-scan-showing-parameter-tampering"
    },
    {
        "Title": "What is the correct syntax for dollar-parameters in PostgreSQL queries?",
        "Question": "I am struggling with the correct syntax for a dollar-parameter. It sometimes works, sometimes not.\nI am using the 'pg' package for NodeJS, but since AFAIK parsing the query happens on the server side, I don't expect this to matter.\nCode:\nconst client: PoolClient = ...;\nawait client.query('SELECT \\'foo\\' = $1', [projectId]);\nawait client.query('SET \"gvc.currentProjectId\" = $1', [projectId]);\n\nThe first query is obviously useless, but I added it to experiment with the syntax. An error occurs in the second query, so the first one seems to work. The second one fails with:\nunexpected exception error: syntax error at or near \"$1\"\n\nIs it even possible to use dollar-parameters in the value for SET? I want to secure my application against SQL injection attacks, so manually escaping the projectId is a last resort.\n",
        "Answer": "As explained in https://dba.stackexchange.com/a/333947, SET can indeed only take literal values, no parameters or query results. That post links to the set_config command, which does not have such a restriction.\nhttps://pgpedia.info/s/set_config.html\n\nNeither the post not the documentation explain why both exist, nor why SET cannot take parameters since set_config demonstrates that it is possible to do so.\nSimply using set_config over SET solves the problem.\n",
        "Source": "https://stackoverflow.com/questions/77839814/what-is-the-correct-syntax-for-dollar-parameters-in-postgresql-queries"
    },
    {
        "Title": "How do I write prepared statements in ballerina?",
        "Question": "Is there a way to write prepared statements for SQL in ballerina? or is it a good practice to use the following method for that?\nfunction selectUserQuery(string username) returns sql:ParameterizedQuery => `SELECT * FROM users WHERE user_name=${username}`;\n\n",
        "Answer": "In ballerina sql:ParamerterizedQuery works as a prepared statement. (this differs a little from other languages as ballerina mandates giving the variable order, when writing the statement itself)\nYes, using functions is the best practise to keep SQL statements in ballerina.\nFor the sake of completeness, I would like to quote the following from this article.\nConsider the below statement,\nsql:ParameterizedQuery selectQuery = `SELECT * FROM users WHERE user_name=${username}`;\nBallerina executes this query in multiple steps,\n\nTemplate the query:\nThe sql module will replace the insertions in the query using ?. (e.g. `SELECT * FROM users where user_name=?`) Here, all insertions in the query are considered to be user inputs.\n\nThe database compiles the query:\nThe database validates the templated SQL query for syntax and semantics (column availability, authorization) errors. Finally, the server parses the query.\n\nPlaceholder replacement:\nThe programme sends all the user data values to the database. The database will replace the placeholders at this point. However, since the query is pre-compiled, even if the database appends the values, the scope of the execution will not change. i.e. SQL Injection cannot turn a SELECT command into a DELETE.\n\nQuery execution.\n\n\n",
        "Source": "https://stackoverflow.com/questions/77763194/how-do-i-write-prepared-statements-in-ballerina"
    },
    {
        "Title": "Problem with identical metrics results after machine learning",
        "Question": "When trying machine learning on a dataset, I got the same results for metrics such as accuracy and F-score on different machine learning algorithms.\nI have a dataset on which I trained my chosen algorithms. I found it on the Kaggle website: source.\nHere are code snippets from the Jupiter file, and the results of their execution:\nList of connected libraries\nIN:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report\nimport joblib\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras import models, layers\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nLoading dataset\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\ndf.head(10)\n\nLoad, process and split the data for further training of the classification model\nIN:\ndf = pd.read_csv(\"payload_mini.csv\",encoding='utf-16')\n\ndf = df[(df['attack_type'] == 'sqli') | (df['attack_type'] == 'norm')]\n\nX = df['payload']\ny = df['label']\n\nvectorizer = CountVectorizer(min_df = 2, max_df = 0.8, stop_words = stopwords.words('english'))\nX = vectorizer.fit_transform(X.values.astype('U')).toarray()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)\n\nOUT:\n(8040, 1585)\n(8040,)\n(2011, 1585)\n(2011,)\n\nNaive Bayes Classifier\nIN:\nnb_clf = GaussianNB()\nnb_clf.fit(X_train, y_train)\ny_pred = nb_clf.predict(X_test)\nprint(f\"Accuracy of Naive Bayes on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Naive Bayes on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of Naive Bayes on test set : 0.9806066633515664\nF1 Score of Naive Bayes on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       0.97      0.98      0.97       732\n        norm       0.99      0.98      0.98      1279\n\n    accuracy                           0.98      2011\n   macro avg       0.98      0.98      0.98      2011\nweighted avg       0.98      0.98      0.98      2011\n\nRandom forest algorithm:\nIN:\nrf_clf = RandomForestClassifier()\nrf_clf.fit(X_train, y_train)\ny_pred_rf = rf_clf.predict(X_test)\nprint(f\"Accuracy of Random Forest on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of Random Forest on test set : {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred_rf))\n\nOUT:\nAccuracy of Random Forest on test set : 0.9806066633515664\nF1 Score of Random Forest on test set : 0.9735234215885948\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.96      0.98       732\n        norm       0.98      1.00      0.99      1279\n\n    accuracy                           0.99      2011\n   macro avg       0.99      0.98      0.99      2011\nweighted avg       0.99      0.99      0.99      2011\n\nSupport vector machine\nIN:\nsvm_clf = SVC(gamma = 'auto')\nsvm_clf.fit(X_train, y_train)\ny_pred = svm_clf.predict(X_test)\nprint(f\"Accuracy of SVM on test set : {accuracy_score(y_pred, y_test)}\")\nprint(f\"F1 Score of SVM on test set: {f1_score(y_pred, y_test, pos_label='anom')}\")\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nOUT:\nAccuracy of SVM on test set : 0.9189457981103928\nF1 Score of SVM on test set: 0.8658436213991769\n\nClassification Report:\n              precision    recall  f1-score   support\n\n        anom       1.00      0.76      0.87       689\n        norm       0.89      1.00      0.94      1322\n\n    accuracy                           0.92      2011\n   macro avg       0.95      0.88      0.90      2011\nweighted avg       0.93      0.92      0.92      2011\n\nAs you can see when training on different machine learning algorithms, we get the same results in the case of random forest and naive Bayesian classifier.\nI hope you can help me to fix a possible bug in the code or improve it in some way.\n",
        "Answer": "In your code for Random Forest, you're storing predictions as y_pred_rf but calling your metrics on y_pred\n",
        "Source": "https://stackoverflow.com/questions/77686328/problem-with-identical-metrics-results-after-machine-learning"
    },
    {
        "Title": "WordPress sql injection",
        "Question": "Thanks for letting me post here, I'm just starting to learn programming.\nI have a problem with a WordPress site which I update for my dad's local motorcycle road safety training group, which is run as a charity/non-profit by volunteer instructors. The hosting company (LCN) has taken the site down and emailed the group the following:\n\n\nDomain name : kamg.org.uk\nDatabase : kamg_org_uk_dbtest\nMySQL Server : database3.lcn.com\nOur monitoring scripts have detected an SQL injection attack occurring on your web site kamg.org.uk, using exploitable code hosted there.\nThe SQL queries that have been flagged as suspicious/malicious are listed here :\n----- BEGIN REPORT -----\nTIME RUNNING: 01:34:02\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\nTIME RUNNING: 01:34:00\nSELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key, wp_usermeta.meta_value FROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" AND wp_users.ID = wp_usermeta.user_id\n----- END REPORT -----\n\nWP, plugins and theme are all kept up to date at all times.\nCan I safely just delete those lines from the database to clean the site?\nLCN offer the group free charity hosting but I have found over 1600 domains share the same server. Once the sql injection is cleaned the group will move to managed WP hosting in the hope it will be more secure.\nThx,\nNiels\nI have tried reinstalling WordPress by FTP, but the hosts have denied the attempt, having removed all permissions.\nTheir support is appalling, taking 4 days to respond to queries, and then answering the wrong question with a cut & paste stock response.\nI have just started learning, but I'd be happy to go in and edit files (with some nervousness) but haven't attempted anything at this stage.\n",
        "Answer": "It's not the data that is at fault, it's something in the code of WordPress, or more likely one of the plugins or themes you have installed.\nThe way the code works is something like this:\n$query = 'SELECT wp_users.ID, wp_users.user_login, wp_usermeta.meta_key,\n  wp_usermeta.meta_value \nFROM wp_users INNER JOIN wp_usermeta ON wp_users.user_login = \"' . $variable . \n  '\" AND wp_usermeta.meta_key LIKE \"%_user_level\" AND wp_usermeta.meta_value = \"10\" \n  AND wp_users.ID = wp_usermeta.user_id';\n\nBut the value of $variable has been exploited by some attacker. They set it to the following string:\n\" OR CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE TABLE_NAME LIKE 0x255f7573657273) THEN sleep(5) ELSE 0 END AND \"1\"=\"1\n\n(even including the quote characters.)\nWhen the variable is concatenated into the query, it causes the SQL query to have extra expression terms, that the attacker injected.\nIt looks like they're forcing sleep() calls to test if certain tables exist. They'll use this method to learn all your table names. Then they'll use information in subsequent attacks, to read those tables. SQL injection hackers have to probe using techniques like this to try to avoid detection.\nThe original query may be a normal part of the code of WordPress or one of the plugins or themes. But the programmer made a mistake by concatenating a variable whose value was set from untrusted input. Programmers aren't supposed to do this, but many are either unaware of the risk, or else they think it won't happen to their code.\nYou said you are up to date on all the versions of WordPress and plugins, but the vulnerability may exist in the current version. In other words, no newer version with a fix has been released (yet).\nSometimes it doesn't help to update the software, because the newest version has introduced a new vulnerability that didn't exist before. Programmers add new code in every version, and security vulnerabilities are the result of mistakes made by software developers. New vulnerabilities occur regularly.\nWordPress itself is pretty well tested, that's why I suppose the vulnerability may be in a plugin or theme. I don't know which plugins you use.\nOr you may have added custom code that has the vulnerability, so there is no other person who will update it. It's up to you.\nWhat you have to do now is figure out which line of code, not data, is responsible for the vulnerability. If you don't have the skills to do this (basically a text search across many files to find a line of code similar to the one I showed above), then you need to employ someone to help you.\nOnce you find the line of code responsible, either fix it yourself, or if it's in a plugin you could just uninstall that plugin to remove the vulnerable code.\nIt sounds like your hosting company isn't going to help. They probably have very little resources to provide customer service in this case. Even if you fix the code, it sounds like it will be a struggle to get them to allow you to restore your website.\nYou may need to find a new hosting provider if your current one won't communicate or let you have access to your site.\nBut a different hosting provider won't be more secure, because the fault is not with the hosting provider. The fault is in the code you are using.\nIf you install the same code on the current provider or another provider without fixing it, the code will still be vulnerable to hacks. If you upload code you know is vulnerable, then it'll be your fault.\n",
        "Source": "https://stackoverflow.com/questions/77602811/wordpress-sql-injection"
    },
    {
        "Title": "Protects dplyr against SQL injections?",
        "Question": "I would like to use R-Shiny to develop a web app that accesses an SQL database with sensitive data.\nSo far I have written the database query as a pure SQL string.\nHowever, this approach is very susceptible to SQL injections.\nMy intention is therefore to write the database query with dplyr, as the query is written in R and not in pure SQL.\nUnfortunately, I have not yet been able to find any more detailed information or an estimate on this topic online. Therefore I would like to clarify my request in this question.\nSo far I have only read a statement about the dbplyr::translate_sql() function that is supposed to protect SQL injections:\nhttps://dbplyr.tidyverse.org/articles/sql-translation.html#vectors\nAs my data is very confidential, dbplyr / dplyr should provide 100% protection against SQL injections.\nI would be very pleased to receive further information and assessments on this topic.\nUPDATE\nAs suggested in the comments, I have added an example for reproducibility:\n(adapted from: https://shiny.posit.co/r/articles/build/pool-dplyr/)\nlibrary(shiny)\nlibrary(DBI)\nlibrary(pool)\nlibrary(tidyverse)\nlibrary(dbplyr)\n\npool <- dbPool(\n  drv = RMySQL::MySQL(),\n  dbname = \"shinydemo\",\n  host = \"shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com\",\n  username = \"guest\",\n  password = \"guest\")\n\nui <- fluidPage(\n  textInput(\"ID\", \"Enter your ID:\", \"5\"),\n  tableOutput(\"tbl\"),\n  numericInput(\"nrows\", \"How many cities to show?\", 10),\n  plotOutput(\"popPlot\"))\n\nserver <- function(input, output, session) {\n  output$tbl <- renderTable({\n    pool %>% tbl(\"City\") %>%\n      filter(ID == !!input$ID)\n  })\n  output$popPlot <- renderPlot({\n    df <- pool %>% tbl(\"City\") %>%\n      head(as.integer(input$nrows)[1]) %>% collect()\n    pop <- df$Population\n    names(pop) <- df$Name\n    barplot(pop)\n  })\n}\n\nshinyApp(ui, server)\n\n",
        "Answer": "The threat of SQL injection depends on how the user-provided text is incorporated into the dynamic SQL query. So if you are trying to protect against injection, you need to assess each of the ways user input is used when querying the database.\nIn the example you have posted there are two pieces of user input:\n\ninput$nrows which is limited to numeric by the input widget\ninput$ID which is free text, and hence has greater risk of SQL injection.\n\nYou can use any of the approaches below to investigate each piece of user input. Overall, the approach I would choose is to Sanitise and then Review.\nThis answer focuses on the case where you are using dbplyr to translate from R to SQL. If other approaches are used to access the database (such as the DBI package) then a different approach will be required.\n\nOption 1) Review the SQL query that is generated\nConsider where input$ID is used in the example code:\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID)\n\nIn order to execute this, dbplyr will translate the dplyr commands from R into SQL. We can review this translation using the show_query command.\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!input$ID) %>%\n  show_query()\n\nThis will probably produce an SQL query similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value'\n\nYou do not need the entire Shiny app to test this for SQL injection. You can simply vary this query and see what happens. For example, try a simple alternative query:\nattempt_inject = 'my_id_value;SELECT 123'\npool %>%\n  tbl(\"City\") %>%\n  filter(ID == !!attempt_inject) %>%\n  show_query()\n\nI suspect this will produce SQL similar to the following:\nSELECT *\nFROM city\nWHERE ID == 'my_id_value;SELECT 123'\n\nWhich would seem an effective prevention for SQL injection. But you will need to test this as thoroughly as required to ensure you are confident.\n\nOption 2) Review source code\nThe dbplyr package is open source and available online. You could review the source code to confirm how inputs are handled during translation.\nMy suspicion is that unless inputs are of type sql, then they will be escaped as either text or an SQL object.\nThere is an sql() function that converts input to type sql. One of its uses is to tell dbplyr not to translate the contents of the function but to use them as-is. This means that if your user can submit R objects as inputs then this is a significant area of vulnerability. However, this is unlikely to be the case as your app restricts users to submitting text and numeric input.\n\nOption 3) Sanitise your inputs before passing them to dbplyr\nR has several advantages over pure SQL, in that you can use R to validate users' input before including it in a dbplyr query.\nConsider this an an alternative to your output$tbl component of the app:\noutput$tbl <- renderTable({\n  current_ID = as.character(input$ID)\n  acceptable_ids = pool %>%\n    tbl(\"City\") %>%\n    select(ID) %>%\n    distinct() %>%\n    collect() %>%\n    pull()\n  req(current_ID %in% acceptable_ids)\n\n  pool %>%\n    tbl(\"City\") %>%\n    filter(ID == !!current_ID)\n})\n\nThis approach enforces that the user input is converted to type character and is a value found in the ID column, before passing the user input through to dbplyr.\nThe exact choice of checks will depend on how user input is used. I often include a check that user input does not contain special characters (such as ;{}[]* or spaces).\ndbplyr includes commands to delimit certain inputs. Investigate and use these commands where applicable.\nNotes\n\nreq is a Shiny command that stops execution of a component if the condition is not met. You can use stopifnot outside a Shiny context.\nFetching the list of acceptable ids within the renderTable statement is not efficient app design. This should be calculated once and reused multiple times.\n\n",
        "Source": "https://stackoverflow.com/questions/77598340/protects-dplyr-against-sql-injections"
    },
    {
        "Title": "Interfacing with &quot;API&quot; that only takes raw SQL: Node / pSQL sanitization without prepared statements or parameterization?",
        "Question": "I am working with an \"API\" provided by a client's ERP. They do not have actual endpoints, rather a REST endpoint that you can send raw sql queries to, that they then execute. To make matters even worse, they only recently upgraded to https.\nI am writing some Node cloud functions to interface with this system. There will be two roles working with this product, and I need to prevent the role with less permissions to fire unwanted queries in the application when they are searching with specific parameters.\nFor filtering, I can just check if the values are in an array of allowed terms, but with a search I am not quite sure how to approach this. My general opinion has always been to use parameterized statements, but that is not an option here as I can't actually establish a connection to their database. I also saw some posts where people suggested wrapping the strings in dollar signs since the underlying DB is PostgreSQL, but I could not find anything in the documentation for this purpose.\nI was also thinking about only allowing alpha-numeric characters, but this seems like a potentially weak approach. If anyone knows of any libraries or ideas for dealing with this situation, I would greatly appreciate it.\nI tried looking for a Node library or piece of documentation that could help this situation, but I could not find anything relevant.\n",
        "Answer": "I found this interesting post around the question: https://security.stackexchange.com/questions/172297/sanitizing-input-for-parameterized-queries.\nTo summarize it, doing data sanitization(more like general validation) is always good idea but it will not necessarily guarantee that query will be safe. Directly running queries without parameterized statements will be still quite a big risk even if you find some great library for cleaning data to make it SQL safe.\nInstead try to think of ways to not run user input directly. Add some kind of mapper in between which will accept some filter codes and translate it into SQL values. For example if I had delivery company and wanted to filter all deliveries with status delivered, I would use mapping like this:\nconst status_code = \"DELIVERED\"\nconst statusMapper = {DELIVERED: \"delivered\"(value to filter in sql)}\n\nAnd if my mapper does not find the exact match, return error or empty result and don't run the query at all. If its search bar, try to identify most frequent search keywords and build mapper for that. Obviously it will not be too accurate, but still better than having risk of sql injection, especially if you work with sensitive and important data(I assume you work with company's internal data since you integrate with ERP).\n",
        "Source": "https://stackoverflow.com/questions/77516509/interfacing-with-api-that-only-takes-raw-sql-node-psql-sanitization-without"
    },
    {
        "Title": "Dremio SQL injection vulnerability",
        "Question": "I'd like to query an S3 storage containing parquet files through my Spring Java app with Dremio. These are dynamic queries with user given parameters.\nI use Apache Arrow SQl driver and simply run queries by a JdbcTemplate instantiated with a DataSource from the following properties:\n  driver-class-name: org.apache.arrow.driver.jdbc.ArrowFlightJdbcDriver\n  url: jdbc:arrow-flight-sql://localhost:32010/?useEncryption=false\n  username: user\n  password: pwd\n\nFor the sql string I use a String formatted with the user given value:\n\"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = '%s';\".formatted(userInput)\n\nIt works well but needless to say how big of an SQL injection opportunity it is. If I try to use a Prepared Statement:\nString sql = \"SELECT * FROM \"my-s3-storage\".table t WHERE t.description = ?\"\njdbcTemplate.query(sql, ps -> ps.setString(1, userInput), rs -> {\n  //handling the result set\n});\n\nI get the following error:\ncfjd.org.apache.arrow.flight.FlightRuntimeException: Cannot convert RexNode to equivalent Dremio expression. RexNode Class: org.apache.calcite.rex.RexDynamicParam, RexNode Digest: ?0\n\nI'm finding ambiguous information on the web. The claim that Dremio doesn't support prepared statements could be found in some forums, but all of these comments are several years old*, moreover the official Dremio site has an article recommending the usage of prepared statements..\nAs far as I know Dremio uses ANSI SQL under the hood, which I believe supports prepared statements. Or does that depend on the database engine and not the dialect? Can anyone confirm that it is still not possible with Dremio? Then I'll stop pursuing it further.\nIf that's the case, I will escape the unsafe characters, use a dictionary for encoding and decoding user given characteres, etc.\nIf you have some other advices or experiences mitigating SQL injection without prepared statements though, I would appreciate them as well!\nThank you!\n*latest update I found: https://community.dremio.com/t/sql-parameterization-support/1733/5\n",
        "Answer": "I'll post my findings as an answer, maybe it could be useful for someone in the same boat:\nIn lack of any other ideas I went down the encode/decode road.\nFor that the initial idea was to use an own dictionary, but I figured that hexadecimal encoding should be sufficient enough.\nLuckily Dremio SQL has a FROM_HEX function, which can return a BINARY value for the given hexadecimal string.\nWith that I can (so far..) safely build dynamic queries with any kind of user given input turned into HEX strings and then converting back at execution time, with the function behaving kind of like a wrapper.\nStill, this isn't a perfectly calming solution, but as far as I can see, there isn't really a better option at the moment. I heard Dremio will implement prepared statements (quite a shock that they haven't already), until then, let's hope for the best!\n",
        "Source": "https://stackoverflow.com/questions/77501615/dremio-sql-injection-vulnerability"
    },
    {
        "Title": "SQL Injection in Stored Procedures via MySQL Connector",
        "Question": "I use the mysql-connector-python driver for executing database operations. Recently, I came across stored procedures in MySQL and decided to migrate some of my APIs from utilizing cursor.execute() to cursor.callproc(proc_name, args=()). This transition has proven successful, and everything works seamlessly. However, I'm uncertain about the vulnerability of these stored procedures to SQL injection.\nTo assess this, I created a test stored procedure and examined its susceptibility to SQL injection payloads.\nStored Procedure:\nDELIMITER //\nCREATE PROCEDURE TestProcedure(IN arg_test VARCHAR(150))\n  BEGIN\n    IF EXISTS (SELECT 1 FROM Random_Table WHERE test = arg_test) THEN\n        SELECT 'success' AS message;\n    ELSE\n        SELECT 'failed' AS message;\n    END IF;\n  END //\nDELIMITER ;\n\nPayloads:\n\n' or 1=1 -- \n\" or 1=1 -- \n\nSurprisingly, none of these payloads yielded any successful results. Seeking further assurance, I consulted one of the database administrators in the company. Although he expressed uncertainty, he suggested that these stored procedures function similarly to prepared statements. This aligns with my observation that the cursor.callproc() method accepts user inputs as arguments via the args parameter, resembling prepared statements.\nIf this interpretation is accurate, it implies that using the cursor.callproc() method ensures a secure backend, free from SQL injection concerns. Despite these positive indications, I would like to seek additional confirmation here to guarantee the safety of this approach.\n",
        "Answer": "Like it often happens, the problem is in the terminology. And it creates a lot of trouble (and vulnerabilities). A programmer should be always strict in their definitions.\nWhat you are talking about here is using stored procedure's parameter. Such a parameter is a special case related to stored procedures, and very similar in nature to SQL variables.\nIn this case your database doesn't add the contents of arg_test into the SQL body (as it would have been in python if you did something like + arg_test +) and then evaluate the resulting SQL. On the contrary, is uses arg_test as though it's a variable (in this sense, it's indeed similar to prepared statements, but technically it's entirely different matters).\nWhile speaking of stored procedures, they are irrelevant to injections. By itself, just using a procedure doesn't guarantee anything. One can write a procedure which is immune to injection, and write another which is prone to injection. Just like any other code.\nBut as long as you are just using a parameter passed to the procedure - it's safe.\n",
        "Source": "https://stackoverflow.com/questions/77500796/sql-injection-in-stored-procedures-via-mysql-connector"
    },
    {
        "Title": "Protection query against SQL injection, using PDO",
        "Question": "may I ask you how to make this protected against sql injection?\nI have\n$podminkazeme = \"\";\n$podminkakraj = \"\";\n\nif ( isset( $_GET[ \"zeme\" ] )and !empty( $_GET[ \"zeme\" ] ) ) {\n   $podminkazeme = \"and nb.zemehledani in (\" . str_replace( '%2C', ',',  $_GET[ \"zeme\" ] ) . \")\";\n};\n\nif ( isset( $_GET[ \"kraj\" ] )and !empty( $_GET[ \"kraj\" ] ) ) {\n  $podminkakraj = \"and nb.krajhledani in (\" . str_replace( '%2C', ',', $_GET[ \"kraj\" ]  ) . \")\";\n};\n\n$conn = new PDO( DB_DSN, DB_USERNAME, DB_PASSWORD );\n$sqljednotkaa = \"\n  select nb.*, \n    dv.nazev as developer, \n    UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, \n    UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, \n    uz.nazev as skladUpravil, \n    uzm.nazev as makler, \n    tp.nazev as typProdeje, \n    dal.nazev as nazevdalnice\n  from nabidka nb \n  left join uzivatele uz on uz.id=nb.skladUpravil \n  left join uzivatele uzm on uzm.id=nb.makler \n  left join typProdeje tp on tp.id=nb.typProdeje \n  left join developer dv on dv.id=nb.developer\n  left join dalnice dal on dal.id=nb.dalnice \n  where nb.emptyid is null \n    $podminkaid \n    $podminkastav \n    $podminkaupraveno \n    $podminkavelikost \n    $podminkacena \n    $podminkamakler \n    $podminkaexport \n    $podminkatypprodeje \n    $podminkatypnemovitosti \n    $podminkazeme \n    $podminkadalnice \n    $podminkakraj \n    $podminkaokres \n    $podminkadeveloper \n    $podminkatechnickeparametry \n    $podminkahledanislovo \n  order by nb.emptyid asc $razenipodminka\";\n\n$stjednotkaa = $conn->prepare( $sqljednotkaa );\n$stjednotkaa->execute();\n\n",
        "Answer": "Try this\n$conditions = [];\n$parameters = [];\n\nif (isset($_GET[\"zeme\"]) && !empty($_GET[\"zeme\"])) {\n    $zemeValues = explode(',', $_GET[\"zeme\"]);\n    $conditions[] = \"nb.zemehledani IN (\" . implode(', ', array_fill(0, count($zemeValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $zemeValues);\n}\n\nif (isset($_GET[\"kraj\"]) && !empty($_GET[\"kraj\"])) {\n    $krajValues = explode(',', $_GET[\"kraj\"]);\n    $conditions[] = \"nb.krajhledani IN (\" . implode(', ', array_fill(0, count($krajValues), '?')) . \")\";\n    $parameters = array_merge($parameters, $krajValues);\n}\n\n$conn = new PDO(DB_DSN, DB_USERNAME, DB_PASSWORD);\n$sqljednotkaa = \"SELECT nb.*, dv.nazev as developer, UNIX_TIMESTAMP(nb.datumAktualizace) as datumAktualizace, UNIX_TIMESTAMP(nb.datumPripomenuti) as datumPripomenuti, uz.nazev as skladUpravil, uzm.nazev as makler, tp.nazev as typProdeje, dal.nazev as nazevdalnice from nabidka nb left join uzivatele uz on uz.id=nb.skladUpravil left join uzivatele uzm on uzm.id=nb.makler left join typProdeje tp on tp.id=nb.typProdeje left join developer dv on dv.id=nb.developer left join dalnice dal on dal.id=nb.dalnice where nb.emptyid is null\";\nif ($conditions) {\n    $sqljednotkaa .= \" AND \" . implode(\" AND \", $conditions);\n}\n$sqljednotkaa .= \" ORDER BY nb.emptyid ASC $razenipodminka\";\n$stjednotkaa = $conn->prepare($sqljednotkaa);\n$stjednotkaa->execute($parameters);\n\n",
        "Source": "https://stackoverflow.com/questions/77416426/protection-query-against-sql-injection-using-pdo"
    },
    {
        "Title": "Enforcing row-level security in a shared postgres pool",
        "Question": "I'm working on a typical client-server webapp. It is using a system somewhat like GraphQL where the client has some flexibility in specifying what data it needs, without custom API endpoints for every type of data. The server is running node, and is using node-postgres with a typical pg.Pool. A client could send something like this:\n{select: '*', from: 'expenses', where: {'op': 'gt', 'lhs': 'expenses.amount', 'rhs': 20}}\n\nwhich would be translated to SELECT * FROM expenses WHERE expenses.amount > $1 (given $1 = 20). With enough care, this system can be made safe from injection attacks.\nI'd also like to incorporate row-level security policies. For example:\ncreate policy only_see_own_expenses on expenses using (expenses.user_id = <USER ID>);\n\nAs an extra security barrier, I want to make sure that even if an injection attack is succesful, a client can not \"unset\" its user ID.\nI've seen <USER ID> been defined in a few ways:\n\ncurrent_user, in which case every user of the app also needs a postgres user/role\nAn arbitrary setting like current_setting('myapp.user_id') in combination with a SET LOCAL myapp.user_id = ... at the start of a transaction\n\nApproach (2) seems most flexible to me. I'd just wrap every generated SQL query in a BEGIN; SET LOCAL myapp.user_id = 123; {generated query}; END;. The problem is that an attacker could inject another SET LOCAL statement, and impersonate another user.\nIn approach (1) you can similarly wrap every generated query with a SET ROLE ... statement at the start, yielding the same problem. An alternative is to create a new connection for each query with that specific role. I believe postgres would never allow that connection to switch to another role. But setting up a new connection per query would result in a lot of overhead.\nHow do I enforce row-level security without the performance hit of a new connection per query?\n",
        "Answer": "As you observe, setting a placeholder parameter and using SET LOCAL ROLE to temporarily assume a different role can be subverted by attackers who can execute arbitrary SQL, like in an SQL injection attack.\nI don't think that there is a way to accomplish what you want that is safe from SQL injection. The problem is a fundamental one: you handle authentication in the application, not in the database (where you are using a single application user to benefit from connection pooling), but you want to have the database handle authorization via row-level security. That requires a way for the application to tell the database what the application user is. Now the only way that the application can tell the database anything is by using SQL, and an attacker who can run arbitrary SQL statements can always subvert that.\nI think that the only option for you is to harden your application against SQL injection attacks.\n",
        "Source": "https://stackoverflow.com/questions/77272972/enforcing-row-level-security-in-a-shared-postgres-pool"
    },
    {
        "Title": "SQL Injection - Python - MySQL",
        "Question": "Basically,\nI'm trying to find ways to explore SQL Injection vulnerabilities in  the code presented below. The code has another layer, presentation, where it asks the user for board_name input.\nTable_name is an inside variable, user doesn't have control over it.\n    def find_board_by_name(cls, connector, board_name, table_name: str):\n        query = \"SELECT * FROM {} WHERE name = '{}'\".format(table_name,board_name.title())\n        print(query)\n        try:\n            connector.mycursor.execute(query)\n            res = connector.mycursor.fetchone()\n            if res:\n                return res[1]\n            return None\n        except Exception as e:\n            raise e\n        \n\nTried to :\n1- board_name as:          ' OR '1'='1\nIt worked, program returned to me me first item on the table (it wasn't supposed to, since I didn't provide any name)\n2- Tried to put board_name as:          ';Delete Table BoardGames;\nIt didn't work, mysql.connector.errors.InterfaceError: Use multi=True when executing multiple statements was presented to me.\nSo my question is \" mysql.connector\" is protecting me against the majorities of the SQL Injections? Since I didn't set the \"multi\" tag in the code to True?  Could you show me other ways to explore vulnerabilities in this code? Besides the 1 and 2.\nI guess I know how to fix the SQL Injection problem: \"connector.mycursor.execute(query, values)\" probably will do the job.  But, I'm trying to understand better what kind of SQL Vulnerabilities I would have with this original code without this fix.\n",
        "Answer": "SQL injection isn't always malicious. It could result in a simple error instead of deleting all the student records.\nFor example, if some legitimate user of your site is named \"O'Reilly\" then your code formatting would have an imbalanced quote, which would be a syntax error:\nSELECT * FROM tablename WHERE name = 'O'Reilly'\n                                       ^ wtf\n\nUsing parameters avoids this kind of problem. Query parameters aren't just a quick way of interpolating variables. They either escape special characters in the dynamic content (by default Python does this), or else full-blown parameters keep the values separate from the SQL query until after it has been parsed by the SQL server. So no special characters can ever cause a syntax error.\nBut table names and other identifiers cannot be parameters. You can use parameters only in place of SQL values, like your quoted string in your example.\nYou said the user is not in control of the table name variable. That's great, but not sufficient.\nWhat if another programmer on your project isn't careful when calling your find_board_by_name() function, and inadvertently passes unsafe content as the table name? Note that unsafe content is more than just user input.\nWhat if the table name is a reserved keyword in SQL?\nSELECT * FROM order WHERE name = ?\n              ^ syntax error\n\nWhat if the table name contains whitespace or punctuation? There are other risks.\nYou should code your function so it does not trust its caller. For SQL values, do use parameters of course. For other dynamic elements like table names, you do have to interpolate variables into the SQL string, but you can be defensive:\n\nUse an allowlist to verify the table name is a legitimate known table name.\n\nDelimit the table name in back-ticks in your SQL, just in case it's a reserved word or not a simple identifier.\nlegit_table_names = Set(['table1', 'table2', 'table3'])\nif table_name not in legit_table_names:\n  return error # pseudocode\n\nquery = f\"SELECT * FROM {table_name} WHERE name = %s\"\n\n\n\n(I prefer f-strings instead of format() in modern Python)\n",
        "Source": "https://stackoverflow.com/questions/77167563/sql-injection-python-mysql"
    },
    {
        "Title": "PHP Code Functioning as Intended but UNION Injection Payload Doesn&#39;t Work",
        "Question": "I am attempting to make a web application (LAMP stack - MySQL version: 8.0.36-0ubuntu0.22.04.1) that is vulnerable to a SQL UNION Injection attack (or some type of SQL injection attack). The code takes the user's input via POST parameters to get the VIN & mileage.\nThe following PHP Code handles the backend to adding the parameters to the database:\n// If SESSION variables are set then proceed to Mileage.php\n    if (isset($_SESSION['username'])) {\n        // PHP Code for Handling ADDING CAR\n        // Declare Variables\n        $username = $_SESSION['username'];\n        $vin = $_POST['vehicle'];\n        $mileage = $_POST['mileage'];\n\n        // Implement Try-catch for Error Hanlding\n        try {\n            // Add Mileage\n            if(isset($_POST['add_data'])) {\n                $query = \"INSERT INTO mileage_master.mileages (`username`, `VIN`, `mileage`) VALUES ('$username', '$vin', '$mileage')\";\n                $query_result = mysqli_query($db,$query);\n    \n            // Update Mileage\n            } elseif(isset($_POST['update_data'])) {\n                // Query to update associated VIN's Mileage\n                $update = \"UPDATE mileage_master.mileages SET mileage='$mileage' WHERE username='$username' AND VIN='$vin'\";\n                $update_result = mysqli_query($db,$update);\n            // Remove Mileage\n            } elseif(isset($_POST['remove_data'])) {\n                // Query to Remove VIN & Mileage\n                $remove = \"DELETE FROM mileage_master.mileages WHERE username='$username' AND VIN='$vin'\";\n                $remove_result = mysqli_query($db,$remove);\n            }\n        }\n        catch (mysqli_sql_exception $e) {\n            $showAlert = true;\n            // Display Syntax Error\n            $errorMessage = \"My SQL Error: \" . $e->getMessage();\n            // Display Query (Intentional Unsafe Coding Practices)\n            $errorMessage .= \"\\t||\\tQuery: \" . $sql;\n        }\n\n        \n    }    \n    else {\n        header(\"Location: /\");\n    }\n?>\n\nThe following PHP code prints the VIN & mileage to user's page:\n<?php\n    // Query to get all VINs associated with username\n    $result = mysqli_query($db,\"SELECT * FROM mileages WHERE username='$username'\");\n\n    echo \"<table style='margin-top: 35px;'>\";\n    echo \"<tr><th>VIN</th>\";\n    echo \"<th>Mileage</th></tr>\";\n\n    // While Loop to iterate through all returned rows\n    while($row = mysqli_fetch_assoc($result)) {\n        echo \"<tr style='text-align: center;'>\";\n        // VIN\n        echo \"<td>\" . $row['VIN'] . \"</td>\";\n        // Mileage\n        echo \"<td>\" . $row['mileage'] . \"</td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n?>\n\nMy thought process was that because the application uses dynamic queries an attacker could include some type of UNION SELECT statement. The UNION select statement's output would be stored within the VIN column for that query.\nHowever, I am unable to create a successful SQL Injection payload that would accomplish this.\nQuestion\nDo I need to change the logic of my application to make the exploit possible or is my idea not exploitable in the first place?\n",
        "Answer": "You can't get SQL injection in the SELECT query, since the user doesn't have control over the $username variable, and that's the only thing you substitute. But you can do it in the INSERT query, to insert extra rows in the table with arbitrary values.\nIt needs to terminate the current value list, then it can use a subquery in another value list, and finally it has to provide the beginning to match the end of the original value list.\n$vin = \"12345', '20'), ('baduser', (SELECT '67890'), (SELECT '30')), ('baduser2', '1111\";\n\nThis will put a bogus VIN and mileage into the row for $username, then insert additional rows for baduser and baduser2. baduser2 will get another bogus VIN and the mileage from the parameter.\nbaduser can use subqueries to get its VIN and mileage values, as long as the subqueries each only return one row and column. I used literals in the above example, but you can make them arbitrarily complex.\n",
        "Source": "https://stackoverflow.com/questions/78093937/php-code-functioning-as-intended-but-union-injection-payload-doesnt-work"
    },
    {
        "Title": "How to fix SQL injection if we have to use DB name dynamically in SQL Server?",
        "Question": "This is the implementation in code: the schema name comes from a configuration file and is different for each environment. Sonar throws SQL injection alert at this statement:\nselect * \nfrom dbName.dbo.stu_name;     <<dbname is the variable that comes from property file>>\n\nI tried these solutions:\n\nUsing query.setParameter(?,dbname). Tried passing dbname dynamically and vulnerability was fixed. When debugging, the query was throwing an error and did not execute.\n\nUsed String.format(select * from \\'%s\\',tablename.replace(\"\\'\",\"\\'\\'\")) - vulnerability fixed, but query failed to execute\n\n\nI tried various other solutions and nothing worked.\nCan anyone please help me with this?\n",
        "Answer": "The \"best\" defence you can do is not use dynamic SQL. Considering that this is the database that's dynamic, and based on a prior question, I would suggest that this is occurring from an application, so that means you don't need 3-part naming. Instead you parametrise the database name in the connection string and use 2-part naming; no dynamic SQL needed.\nIf you must use dynamic SQL, then the \"best\u2122\ufe0f\" defence would be to validate the database name, and then ensure you properly quote the database name when you inject it into your dynamic statement.\nHere I validate the database name in sys.databases and then use QUOTENAME to quote the name appropriately. If the database doesn't exist, no query is run (and no error is returned):\nDECLARE @DatabaseName sysname = N'YourDatabaseName';\n\nDECLARE @SQL nvarchar(MAX);\nSELECT @SQL = N'SELECT * FROM ' + QUOTENAME(d.name) + N'.dbo.stu_name;'\nFROM sys.databases d\nWHERE d.name = @DatabaseName;\n\nEXEC sys.sp_executesql @SQL;\n\n",
        "Source": "https://stackoverflow.com/questions/78027431/how-to-fix-sql-injection-if-we-have-to-use-db-name-dynamically-in-sql-server"
    },
    {
        "Title": "How to reduce vulnerability to cyber attacks from injection?",
        "Question": "I have very little knowledge about SQL injection, and there are probably other threats I am unaware of out there for stealing company data, how would I make this python code better in regards to security?\nmerge_query = \"\"\"\nMERGE INTO sql_table_name AS Target\nUSING (\n    VALUES {}\n) AS Source (transaction_year, month_num, month_name, price_nt)\nON Target.transaction_year = Source.transaction_year \nAND Target.month_num = Source.month_num\nWHEN MATCHED AND (Target.month_name != Source.month_name OR Target.price_nt != Source.price_nt) THEN\n    UPDATE SET Target.month_name = Source.month_name, Target.price_nt = Source.price_nt\nWHEN NOT MATCHED THEN\n    INSERT (transaction_year, month_num, month_name, price_nt) VALUES (Source.transaction_year, Source.month_num, Source.month_name, Source.price_nt);\n\"\"\".format(','.join(['(?,?,?,?)' for _ in range(len(data))]))\n\nparams = [item for sublist in data for item in sublist]\n\ntry:\n    obj_crsr.execute(merge_query, params)\n\nexcept Exception as e:\n    obj_crsr.rollback()\n    print(e)\n    print(\"Transaction rolled back\")\n\nelse:\n    obj_cnxn.commit()\n    obj_crsr.close()\n    obj_cnxn.close()\n\nThis python code is given data in the following format:\n[(2023, M12,    December,   541.44),\n(2023,  M11,    November,   486.64),\n(2023,  M10,    October,    468.23),\n(2023,  M09,    September,  478.80),\n(2023,  M08,    August,     475.41)]\n\nAnd then is converted to a list in the params variable.  That data looks like this:\n['2023', 'M12', 'December', '541.442', '2023', 'M11', 'November', '486.639', '2023', 'M10', 'October', '468.226', '2023', 'M09', 'September', '478.802', '2023', 'M08', 'August', '475.411']\n\nThis is the only method I have found to work when trying to merge data into an existing table using PYODBC.  I have heard of parameterizing the query or naming sql variables, but I don't know how to adapt existing examples/solution on stack overflow to my specific use case.  Any suggestions are appreciated.\n",
        "Answer": "There is nothing wrong with your existing code as far as injection is concerned.\nInjection only happens when user data is injected directly into the query. Here, that is not happening. What is happening is that a dynamic list of ? parameter markers are being injected, in a well-defined way (once per row), and the actual values are passed as a dynamic list of parameters. There is absolutely no scope for injection here.\nBe aware of a few points though:\n\nUsing such code does tend to focus minds on \"oh just inject the data\". Might be worth putting in a comment such as only paramaters are injected here.\nIf there are no rows at all to insert then you get invalid code ( VALUES ), so you should check for that.\nDynamic numbers of parameters mean you get a recompile for every possible variation of parameters. This is not as many as would be had if you actually injected the data, but still a concern.\nA Table-Valued Parameter or a bulk insert into a temp table are therefore both better options than any of this, but neither are supported by pyodbc. fast_executemany or to_sql might be options, or BULK INSERT from an external file.\nThe maximum number of parameters is 2100, you will hit performance issues well before that though.\n\n",
        "Source": "https://stackoverflow.com/questions/77996154/how-to-reduce-vulnerability-to-cyber-attacks-from-injection"
    },
    {
        "Title": "Is using Hibernate&#39;s Restrictions.eq() method safe against SQL injection?",
        "Question": "Is using Hibernate's Restrictions.eq() method, as used in the example below, safe against SQL injection? Or similar methods like Restrictions.in(), Restrictions.ge(), ...\nString vulnerable = //parameter from user interface \nCriteria ct = this.getCriteria();\nct.add(Restrictions.eq(\"propertyName\", vulnerable));\n\nI have found that probably is, as explained in this answer\nbut reviewing OWASP documentation, there is an example that shows a comment which confuses me (// This should REALLY be validated too). Is needed to validate the input, or is secure as is?\nThe example in the OWASP documentation\n// Criteria API\n// This should REALLY be validated too\nString userSuppliedParameter = request.getParameter(\"Product-Description\");\n// Perform input validation to detect attacks\nInventory inv = (Inventory) session.createCriteria(Inventory.class).add\n(Restrictions.eq(\"productDescription\", userSuppliedParameter)).uniqueResult();\n\n",
        "Answer": "Yes, Hibernate's Criteria API would protect you against SQL Injection, as it parameterises the query - you can see this in action by enabling sql logging.\nWhat you do need to be careful about is concatenating user inputs etc. I think the documentation may perhaps be referring to validate the user input at both client and server side.\n",
        "Source": "https://stackoverflow.com/questions/77993970/is-using-hibernates-restrictions-eq-method-safe-against-sql-injection"
    },
    {
        "Title": "Operand type clash: int is incompatible with date in sql",
        "Question": "i using am writing a insert statement but getting above error\nInsert query\nvar insertSql = string.Format(\n                $\"INSERT INTO Sales (Date, Team, Sales) VALUES ({0}, {1}, {2})\",\n                new List<SqlParameter>()\n                {\n                    new(\"@date\", sales.Date.ToString(\"yyyy-MM-dd\")),\n                    new(\"@team\", sales.Team),\n                    new(\"@sales\", sales.Sales),\n                });\n            var rowCount = Sql.ExecuteNonQuery(Conn,insertSql);\n\nhere is my table schema and class\nSaleId int,\nDate Date,\nTeam varchar(50),\nSales int\n\npublic class Sales\n{\n    public int SalesId { get; set; }\n    public DateTime Date { get; set; }\n    public string Team { get; set; }\n    public int Sales { get; set; }\n}\n\nI want to use parameterized query to achive this so tried this but giving above error\n",
        "Answer": "The immediate problem here is that $\"...\" is itself an interpolated string, and the values you are injecting are the literal 0, 1, and 2 - they're not placeholders: they're the values. Removing the $ would make it a literal string suitable for string.Format, but you don't want to use string.Format here; also, you don't want to format the date - just pass it as a date.\nHonestly: if you're writing the SQL yourself, I'm not sure EF is even needed here; with Dapper this would be simply:\nconn.Execute(\"INSERT INTO Sales (Date, Team, Sales) Values (@Date, @Team, @Sales)\",\n    sales);\n\nor with a trick for better SQL formatting:\nconn.Execute(\"\"\"\n    INSERT INTO Sales (Date, Team, Sales)\n    Values (@Date, @Team, @Sales)\n    \"\"\", sales);\n\nDapper will deal with finding sales.Date, sales.Team and sales.Sales, and add them correctly. EF may also have an API for doing ad-hoc queries like this, but... this feels more like a Dapper scenario, unless you're emotionally invested in EF.\n",
        "Source": "https://stackoverflow.com/questions/77926016/operand-type-clash-int-is-incompatible-with-date-in-sql"
    },
    {
        "Title": "How to limit memory usage with PDO in MariaDB : Fatal error: Allowed memory size of 67108864 bytes exhausted",
        "Question": "I am changing my SQL request to PDO in order to integrate more security against SQL injecting.  I was using before procedural msqli and everything was working ok.  Now I updated server to PHP 8.2 and I am using PDO and prepared statements.\nThe BD I am accessing is old MariaDB and has a table with 247 fields most of which are NULL on a single row. (It is sections for a description of mushrooms, but only some of each are really described in a single row (mushrooms)).\nMost of the 247 fields are set to mediumtext because they can content up to a couple paragraphs.\nMy connection script is :\ntry {\n\n    db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\nreturn;\n} \n\nWhen I select one row of that table in order to echo the not NULL descriptions column, as soon as I execute the statement I run into a full memory.  The error is at the stmt->execute() line, not even at the fetchAll line.\n$description = 'someTag';\n\n$sql = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n$stmt = $db->prepare($sql);\n$stmt->bindParam(':tag', $description, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n$result = $stmt->fetchAll();\n$stmt->closeCursor();\n\nThe error :\nFatal error: Allowed memory size of 67108864 bytes exhausted (tried to allocate 262144 bytes) in /home/mycoqueb/public_html/nou.mycoquebec.org/scripts/bd-query.php on line (**the $stmt->execute() line)\n\nI tried to use :\nwhile ($row = $stmt->fetch()) {\n\nInstead of fetchAll() but it changed noting, I used it on every other request from the same page and it changed noting.  I flushed variables that were no more useful to NULL on the rest of the page and it changed nothing.  I even isolated the script on an empty page and it exceeds the memory limit.\nI tried to add this to my connection script and it changed nothing :\ndb->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\nI tried to select only one field instead of * and this worked, but I don't have an easy way to find NOT NULL columns in the table for a specific tag (row).\nI tried to find a SQL statement to restrict my SELECT to NOT NULL columns but I was not successful.\nI know I could get add memory_limit = 256M to the phpini file, but that is not what I want since the website has a high usage and for now its on a multihosted server.\nThe best solution would be to reengineer the MariaDB database using a table with description sections labels and linking only used sections to the main description table for each row, but I have limited access to the db since it is online with the old website and the old website needs to stay online and up to date for 1-2 years after new deployment. I though of creating a daily cron job to do that but I would like to avoid for the moment.\nAny Idea how I can get this to work?  It was working fine using msqli on php 8.1.\nTo answer the worries of contributors that think it's related to another part of the page code, here is the complete code of the isolated test page.\nfunction convert($size)\n {\n    $unit=array('b','kb','mb','gb','tb','pb');\n    return @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];\n }\n\n\n$servername = \"localhost\";\n$username = \"myUser\";\n$password = \"myPass\";\n$dbname = \"myDB\";\n\n\ntry {\n\n    $db = new PDO(\"mysql:dbname=$dbname;host=$servername;charset=utf8mb4\", $username, $password );\n\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    //$db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n\n } catch (Exception $e) {\n    echo 'Erreur de connection: ',  $e->getMessage(), \"\\n\";\n    return;\n}   \n\n$query = (array_key_exists(\"query\",$_REQUEST) ? $_REQUEST[\"query\"] : \"\");\n\n\nif($query != \"\"){\n\n    $tag_desc = 'Aegerita candida';\n    // Code works if I limit to \"SELECT Titre FROM description WHERE tag = :tag LIMIT 1\";\n    $sql_description = \"SELECT * FROM description WHERE tag = :tag LIMIT 1\";\n\n    $stmt = $db->prepare($sql_description);\n    $stmt->bindParam(':tag', $tag_desc, PDO::PARAM_STR);\n    \n    echo convert(memory_get_usage(true));  // returns 2mb\n    $stmt->execute();\n    $result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\n    \n    $i = 0;\n    \n    while ($row = $stmt->fetch()) {\n\n        if($i == 0) {\n\n            ?><table style=\"border-collapse:collapse;border: 0;table-layout: fixed;color: #063850;background-color: #DDDDDD;text-align: left\"><thead><tr style=\"border: 2px solid #063850;\"> <?php\n            foreach (array_keys($row) as $key) {\n                //print_r($key);\n                echo (\"<th style='padding:5px;border: 2px solid #063850;position:sticky;top: -2;z-index:10;background-color:#e5a045'>$key</th>\");\n            }\n            echo (\"</tr></thead>\");\n        }\n\n        $i++;\n\n        echo (\"<tr style='border: 2px solid #063850'>\");\n        foreach ($row as $value) {\n            echo (\"<td style='padding:2px;border: 2px solid #063850'>$value</td>\");\n            // <img src=\\\"$value\\\" height=\\\"400\\\" >\n        }\n        echo (\"</tr>\");\n    }\n    \n    if ($i > 0) {\n        echo (\"</table>\");\n        echo ('<div style=\"margin-top:400px\">&nbsp;</div>');\n    } else {\n        echo \"Aucun r\u00e9sultat\";\n    }\n\n}\n\n$db = null;\n\nHas mentioned it automatically work if I limit my sql to a couple fields.\nThe error is still on the stmt->execute() line.\n",
        "Answer": "Could it be that the issue is your data model?\nIf you have a table that has a lot of nulls, then the data is most likely not normalized.\nInstead of having 256 columns in your table, maybe just have the ones that are always there, and then relate it to a separate table with three fields: foreign key to the main table, a tag field and a value field.\nIf you are rewriting your application to USE PDO anyway, some long-term considerations could be included.\nExample table\nLayout like yours (all data in one table):\n\n\n\n\nid\nname\nemail\nsomeotherdata\ntag1\ntag2\ntag3\ntag4\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\nNULL\na\nNULL\n100\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\nc\na\nNULL\n400\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\nNULL\nNULL\n5000\nNULL\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\nNULL\na\nNULL\n100\n\n\n\nSuggested Tag-Value table layout\nMain Table\n\n\n\n\nid\nname\nemail\nsomeotherdata\n\n\n\n\n1\nJaques\nj@lullaby.fr\nblablabla\n\n\n2\nAllouette\na@lullaby.fr\nbl\u00e9bl\u00e9bl\u00e9\n\n\n3\nMogens\nm@lullaby.dk\nbl\u00e6bl\u00e6bl\u00e6\n\n\n4\nBirthe\nb@lullaby.dk\nbl\u00f8bl\u00f8bl\u00f8\n\n\n\n\nTag-Value Table\n\n\n\n\nid\ntag\nvalue\n\n\n\n\n1\ntag2\na\n\n\n1\ntag4\n100\n\n\n2\ntag1\nc\n\n\n2\ntag2\na\n\n\n2\ntag4\n400\n\n\n3\ntag3\n5000\n\n\n4\ntag2\na\n\n\n4\ntag4\n100\n\n\n\nUsage\nInstead of selecting just your row, you WILL need to either join the results together, or make two separate calls. I would suggest two calls, especially since you are rtunning into memory issues.\nSELECT \n  id, \n  name,\n  email,\n  someotherdata\nFROM\n  MainTable\nWHERE\n  id = 1;\n\n-- and then the tags\nSELECT \n  id, \n  tag,\n  value\nFROM\n  TagValueTable\nWHERE\n  id = 1; -- reference to the main table\n\n\n\nAdvantaages of this normalized approach\n\nLess bloat (not so many nulls)\nSimpler structures\nREST ready\nMore resilient\n\nAdd tags without changing the DDL of the database (ALTER)\n\n\nYou can still get the original layout by making subselects and transpositions in mysql\nYou can easily make statistics on the tags related to each other\n\nDisadvantages\n\nComplexity of the data model increases\nYou need to do a lot of extra SQL gymnastics to get EXACTLY what you had before\n\n",
        "Source": "https://stackoverflow.com/questions/77895050/how-to-limit-memory-usage-with-pdo-in-mariadb-fatal-error-allowed-memory-size"
    },
    {
        "Title": "PHP: Prepare JSON selector to Prevent MySQL Injection",
        "Question": "What is the best/proper way to prepare a dynamic MySQL JSON selector for queries, in order to prevent SQL injection? As an example, say I want to execute the following query:\nSELECT `key` ->> \"$.key.path\" AS `setting_value`\nFROM `settings`\nLIMIT 1\n\nBut I want to make the key path dynamic, e.g.:\n$sql = <<<SQL\n    SELECT `key` ->> \"{$path}\" AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nWith conditional values, I can structure the SQL for a prepared statement using PDO, e.g.:\n$sql = <<<SQL\n    SELECT *\n    FROM `settings`\n    WHERE `other_field` = :field_val\n    LIMIT 1\nSQL;\n\n$statement = $this->handle()->prepare($sql);\n$statement->execute([':field_val' => 'some val']);\n$records = $statement->fetchAll(PDO::FETCH_OBJ);\n\nAdding something like the following to my database adapter (or even to my helper functions) seems rather inelegant and prone to errors/issues:\n    public function cleanJsonSelector(string $selector) : string {\n        return preg_replace('/[^-\\$a-zA-Z0-9_\\[\\].*\\s]/', '', $selector);\n    }\n\nThoughts/help?\n",
        "Answer": "The -> and ->> operators only support string literals. They do not expressions, variables, or parameters.\nBut you can use any expression \u2014\u00a0including a parameter placeholder \u2014\u00a0in the equivalent JSON function JSON_EXTRACT().\nThe ->> operator is like JSON_UNQUOTE(JSON_EXTRACT(json_doc, path))\n$sql = <<<SQL\n    SELECT JSON_UNQUOTE(JSON_EXTRACT(`key`, :path)) AS `setting_value`\n    FROM `settings`\n    LIMIT 1\nSQL;\n\nThis seems like an unnecessary inconsistency in the functionality of MySQL's JSON operators, but this is how it's implemented in the current MySQL version 8.3.\n\nFor what it's worth, it was requested to support expressions after the -> operator (and presumably also the ->> operator) here: https://bugs.mysql.com/bug.php?id=87360\nYou may want to log into the MySQL bug tracker site and click the \"Affects Me\" button to hopefully increase the priority of implementing that feature.\n\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => true (the default), then parameters are not true parameters, they are string-substitutions into the SQL query before it is parsed. So what looks like a parameterized query really uses a string literal as far as MySQL is concerned, and the ->> operator is successful.\nIf one uses PDO and sets PDO::ATTR_EMULATE_PREPARES => false, then parameters placeholders are parsed by MySQL during the prepare step. Since parameters are not supported as the argument to the ->> operator, this will fail.\nMysqli only supports true parameters, so it will always fail.\n",
        "Source": "https://stackoverflow.com/questions/77892840/php-prepare-json-selector-to-prevent-mysql-injection"
    },
    {
        "Title": "SQL-Injection in duckdb-queries on pandas dataframes",
        "Question": "In a project I am working with duckdb to perform some queries on dataframes. For one of the queries, I have some user-input that I need to add to the query. That is why I am wondering if SQL-Injection is possible in this case. Is there a way a user could harm the application or the system through the input? And if so, how could I prevent this case? It seems that duckdb has no PreparedStatement for queries on dataframes.\nI already looked up in the documentation (https://duckdb.org/docs/api/python/overview.html) but couldn't find anything useful. The method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\nThere is another question on stackoverflow (Syntax for Duckdb > Python SQL with Parameter\\Variable) about this topic but the answer only works on real sql-connections and the version with f-strings seems insecure to me.\nHere is a small code sample to show what I mean:\nimport duckdb\nimport pandas as pd\n\ndf_data = pd.DataFrame({'id': [1, 2, 3, 4], 'student': ['student_a', 'student_a', 'student_b', 'student_c']})\n    \nuser_input = 3  # fetch some user_input here\n    \n# How to prevent sql-injection, if its even possible in this case?\nresult = duckdb.query(\"SELECT * FROM df_data WHERE id={}\".format(user_input))\n\nSo how would you approach this problem? Is sql-injection even possible? Thanks for your help and feel free to ask for more details, if you need some more information!\nEDIT: Fixed a syntax error in the code\n",
        "Answer": "\nThe method duckdb.execute(query, parameters) only seems to work on databases with a real sql-connection and not on dataframes.\n\nIt seems it's possible:\n>>> duckdb.execute(\"\"\"SELECT * FROM df_data WHERE id=?\"\"\", (user_input,)).df()\n\n   id    student\n0   3  student_b\n\n",
        "Source": "https://stackoverflow.com/questions/77884985/sql-injection-in-duckdb-queries-on-pandas-dataframes"
    },
    {
        "Title": "SQL injection error in Modsecurity logs in Plesk",
        "Question": "I am receiving the following error for 1 of my wordpress site running on a Plesk server.\n[client 000.00.00.000] ModSecurity: Access denied with code 403 (phase\n 2). Pattern match \"[\\\\\\\\[\\\\\\\\]\\\\\\\\x22',()\\\\\\\\.]{10}$|\\\\\\\\b(?:union\n\\\\\\\\sall\\\\\\\\sselect\\\\\\\\s(?:(?:null|\\\\\\\\d+),?)+|order\\\\\\\\sby\n\\\\\\\\s\\\\\\\\d{1,4}|(?:and|or)\\\\\\\\s\\\\\\\\d{4}=\\\\\\\\d{4}|waitfor\\\\\\\\sdelay\\\\\\\\s'\n\\\\\\\\d+:\\\\\\\\d+:\\\\\\\\d+'|(?:select|and|or)\\\\\\\\s(?:(?:pg_)?sleep\\\\\\\\(\\\\\\\\d+\n\\\\\\\\)|\\\\\\\\d+\\\\\\\\s?=\\\\\\\\s?(?:dbms_pipe\\\\\\\\.receive_message\\\\\\\\ ...\" at \nREQUEST_COOKIES:sbjs_first. [file \"/etc/httpd/conf/modsecurity.d/rules\n/comodo_free/22_SQL_SQLi.conf\"] [line \"66\"] [id \"218500\"] [rev \"18\"] \n[msg \"COMODO WAF: SQLmap attack detected||website name|F|2\"] [data \n\"Matched Data: |||id=(none) found within REQUEST_COOKIES:sbjs_first: \ntyp=typein|||src=(direct)|||mdm=(none)|||cmp=(none)|||cnt=(none)|||trm=\n(none)|||id=(none)\"] [severity \"CRITICAL\"] [tag \"CWAF\"] [tag \"SQLi\"] \n[hostname \"website name\"] [uri \"/wp-login.php\"] [unique_id \"ZamB-\n8j9IfDbYiJgRoahGwAAAAM\"], referer:\n\nWhen I visited some pages on the frontend it gives this error:\nServer Error\n403\nForbidden\nYou do not have permission to access this document.\nThat's what you can do\nReload Page Back to Previous Page Home Page\nI wonder if this a real attack? or false positive\nI was able to export the site to local. It seems working ok there.\n",
        "Answer": "CRS dev-on-duty here. Even if you don't use CRS rules and this is a problem of COMODO WAF rules, I'll try to help. While searching for the cookie name sbjs_first, I found this GitHub issue here, which is an indication that this sourcebuster cookie looks legitimate. Maybe you'll even the solution to your problem in one of the comments in this issue.\nIf this isn't the solution, you may need to tune the rules. Maybe you can also use our (CRS) documentation on false positives and rule tuning.\n",
        "Source": "https://stackoverflow.com/questions/77842169/sql-injection-error-in-modsecurity-logs-in-plesk"
    },
    {
        "Title": "Oracle SP Checkmarx SAST scan showing Parameter Tampering",
        "Question": "SP accepts key and returns flag status. In Checkmarx SAST scan key, It is saying parameter not validated before being used in query. Please help to understand what validation can be added so that it passes the vulnerability test.\nCreate procedure sp_name (key varchar2, v_flag out number) as\nv_key varchar2(50);\nv_sql clob;\nBegin\nIf key is null then\nv_flag:=-1;\nElse\nv_key:=sys.dbms_assert.enquote_literal(upper(trim(key)));\nv_key:=replace(v_key,'''');\nv_sql:=q'[select flag from tbl where key=:1]';\nExecute immediate v_sql into v_flag using v_key;\nEnd if;\nException when no_data_found then\nv_flag:=-1;\nEnd;\n\nI tried bind variable and dbms_assert but still it shows code is vulnerable\n",
        "Answer": "Stop using EXECUTE IMMEDIATE when you do not need to (and trying to make it overly complicated) and use a simple SELECT ... INTO ... statement with the PL/SQL variable as the bind variable (and give the PL/SQL variable a different name to the table's column).\nThe procedure can be simplified to:\nCREATE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  SELECT flag\n  INTO   v_flag\n  FROM   tbl\n  WHERE  key=v_key;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nThen, if you have the sample data:\nCREATE TABLE tbl (key, flag) AS\n  SELECT 'A',  1 FROM DUAL UNION ALL\n  SELECT 'B',  2 FROM DUAL UNION ALL\n  SELECT 'C',  3 FROM DUAL UNION ALL\n  SELECT NULL, 4 FROM DUAL;\n\nThen:\nDECLARE\n  v_flag TBL.FLAG%TYPE;\nBEGIN\n  sp_name('A', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('B', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('C', v_flag);\n  DBMS_OUTPUT.PUT_LINE('A: ' || v_flag);\n  sp_name('D', v_flag);\n  DBMS_OUTPUT.PUT_LINE('D: ' || v_flag);\n  sp_name(NULL, v_flag);\n  DBMS_OUTPUT.PUT_LINE('NULL: ' || v_flag);\nEND;\n/\n\nOutputs:\n\nA: 1\nB: 2\nC: 3\nD: -1\nNULL: -1\n\n\nOr, if you want it slightly more complicated to avoid the SELECT if the key is NULL then:\nCREATE OR REPLACE PROCEDURE sp_name (\n  v_key  IN  TBL.KEY%TYPE,\n  v_flag OUT TBL.FLAG%TYPE\n)\nAS\nBEGIN\n  IF v_key IS NULL THEN\n    v_flag := -1;\n  ELSE\n    SELECT flag\n    INTO   v_flag\n    FROM   tbl\n    WHERE  key=v_key;\n  END IF;\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    v_flag := -1;\nEND;\n/\n\nfiddle\n",
        "Source": "https://stackoverflow.com/questions/77841440/oracle-sp-checkmarx-sast-scan-showing-parameter-tampering"
    },
    {
        "Title": "What is the correct syntax for dollar-parameters in PostgreSQL queries?",
        "Question": "I am struggling with the correct syntax for a dollar-parameter. It sometimes works, sometimes not.\nI am using the 'pg' package for NodeJS, but since AFAIK parsing the query happens on the server side, I don't expect this to matter.\nCode:\nconst client: PoolClient = ...;\nawait client.query('SELECT \\'foo\\' = $1', [projectId]);\nawait client.query('SET \"gvc.currentProjectId\" = $1', [projectId]);\n\nThe first query is obviously useless, but I added it to experiment with the syntax. An error occurs in the second query, so the first one seems to work. The second one fails with:\nunexpected exception error: syntax error at or near \"$1\"\n\nIs it even possible to use dollar-parameters in the value for SET? I want to secure my application against SQL injection attacks, so manually escaping the projectId is a last resort.\n",
        "Answer": "As explained in https://dba.stackexchange.com/a/333947, SET can indeed only take literal values, no parameters or query results. That post links to the set_config command, which does not have such a restriction.\nhttps://pgpedia.info/s/set_config.html\n\nNeither the post not the documentation explain why both exist, nor why SET cannot take parameters since set_config demonstrates that it is possible to do so.\nSimply using set_config over SET solves the problem.\n",
        "Source": "https://stackoverflow.com/questions/77839814/what-is-the-correct-syntax-for-dollar-parameters-in-postgresql-queries"
    }
]