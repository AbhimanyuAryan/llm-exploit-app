{"questionTitle": "How do I get this code to accommodate any given number by only using boolean logic (no conditionals/ functions)", "question": "<p>Here is the problem:</p>\n<pre><code>number = 1101\n#You may modify the lines of code above, but don't move them!\n#When you Submit your code, we'll change these lines to\n#assign different values to the variables.\n#\n#The number above represents a binary number. It will always\n#be up to eight digits, and all eight digits will always be\n#either 1 or 0.\n#\n#The string gives the binary representation of a number. In\n#binary, each digit of that string corresponds to a power of\n#2. The far left digit represents 128, then 64, then 32, then\n#16, then 8, then 4, then 2, and then finally 1 at the far right.\n#\n#So, to convert the number to a decimal number, you want to (for\n#example) add 128 to the total if the first digit is 1, 64 if the\n#second digit is 1, 32 if the third digit is 1, etc.\n#\n#For example, 00001101 is the number 13: there is a 0 in the 128s\n#place, 64s place, 32s place, 16s place, and 2s place. There are\n#1s in the 8s, 4s, and 1s place. 8 + 4 + 1 = 13.\n#\n#Note that although we use 'if' a lot to describe this problem,\n#this can be done entirely boolean logic and numerical comparisons.\n#\n#Print the number that results from this conversion.\n</code></pre>\n<hr />\n<p>Here is my code</p>\n<pre><code>##Add your code here!\n\nnumber_str = str(number) # &quot;1101&quot;\nfirst_num = int(number_str[-1]) * 1\n#print(&quot;first num:&quot;, first_num)\nsecond_num = int(number_str[-2]) * 2\n#print(&quot;second num:&quot;, second_num) \nthird_num = int(number_str[-3]) * 4\n#print(&quot;Third num:&quot;, third_num)\nfourth_num = int(number_str[-4]) * 8\n#print(&quot;fourth num:&quot;, fourth_num)\nfifth_num = int(number_str[-5]) * 16\nsixt_num = int(number_str[-6]) * 32\nseventh_num = int(number_str[-7]) * 64\ndecimal = first_num + second_num + third_num + fourth_num + fifth_num + sixt_num + seventh_num\nprint(decimal)\n</code></pre>\n<p>The error I got was:\nWe found a few things wrong with your code. The first one is shown below, and the rest can be found in full_results.txt in the dropdown in the top left:\nWe tested your code with number = 1010111. We expected your code to print this:\n87\nHowever, it printed this:\n7</p>\n<hr />\n<p>I understand that I hard-coded this problem to accommodate 4 digits. I would like this to work for any given numbers without throwing an IndexError: string index out of range.</p>\n<p>I appreciate your help.</p>\n", "acceptedAnswer": "<p>I don't like doing people's homework for them, but in this case I think the example says more than an explanation.</p>\n<p>You do this conversion one character at a time, from left to right.  At each step, you shift the result left by one, and if the digit is '1', you add it in.</p>\n<pre><code>number = 1011\ndecimal = 0\nfor c in str(number):\n    decimal = decimal * 2 + (c=='1')\nprint(decimal)\n</code></pre>\n<p>If that's too clever, replace <code>(c=='1')</code> with <code>int(c)</code>.</p>\n<h2>FOLLOWUP</h2>\n<p>This is what I've been trying to tell you.  The code you have will actually do the correct conversion, but it only works if you have exactly 7 digits.  All you need to do is change the code so you CHECK the number of digits before you try one:</p>\n<pre><code>number = 1010111\n\nnum = str(number)\nresult = int(num[-1]) * 1\nif len(num) &gt; 1:\n    result += int(num[-2]) * 2\nif len(num) &gt; 2:\n    result += int(num[-3]) * 4\nif len(num) &gt; 3:\n    result += int(num[-4]) * 8\nif len(num) &gt; 4:\n    result += int(num[-5]) * 16\nif len(num) &gt; 5:\n    result += int(num[-6]) * 32\nif len(num) &gt; 6:\n    result += int(num[-7]) * 64\nif len(num) &gt; 7:\n    result += int(num[-8]) * 128\n\nprint(result)\n</code></pre>\n", "questionSource": "https://stackoverflow.com/questions/77943252/how-do-i-get-this-code-to-accommodate-any-given-number-by-only-using-boolean-log"}