{"questionTitle": "More efficient ways of finding common values from multiple lists of arrays", "question": "<p>I want to find a more efficient way of finding common values from a set of arrays. Say I have three lists of arrays:</p>\n<pre><code>list_1 = [np.array([1, 2, 3]), np.array([]), np.array([4, 5, 6])]\nlist_2 = [np.array([2, 3, 6], np.array([1, 2, 3]), np.array([4, 5, 6, 7, 8, 9])]\nlist_3 = [np.array([5, 2, 3, 7]), np.array([7, 8, 9]), np.array([1, 2, 3, 4, 5, 6])]\n</code></pre>\n<p>What I want to get is another list of arrays of common elements from each index:</p>\n<pre><code>out = [np.array([2, 3]), np.array([]), np.array([4, 5, 6])]\n</code></pre>\n<p>Currently I am doing this using:</p>\n<pre><code>common_vals = []\nfor index in range(len(list_1)):\n    common_elements = reduce(np.intersect1d, (list_1[index], list_2[index], list_3[index])\n    common_vals.append(common_elements)\n</code></pre>\n<p>Which is quite slow when the length of list_1 can be a couple of thousand items, and the number of lists is large.</p>\n<p>A test set could be created by:</p>\n<pre><code>from random import random\n\nlist_1, list_2, list_3 = [], [], []\nfor i in range(10_000):\n    length_1 = random.randint(0, 1000)\n    list_1.append(np.array(set([random.randint(0,1000) for _ in range(length_1)])))\n    length_2 = random.randint(0, 1000)\n    list_2.append(np.array(set([random.randint(0,1000) for _ in range(length_2)])))\n    length_3 = random.randint(0, 1000)\n    list_3.append(np.array(set([random.randint(0,1000) for _ in range(length_3)])))\n</code></pre>\n<p>[Clarification]</p>\n<p>The lists of arrays are lists of indices so the numbers will always be integers. They are ordered and need to maintain that order and will always be the same length. So the first list of the output of common items should be the common items from index 1 of each of the input lists. Each item in the inputs lists of lists will be unique so in the final output list they should appear once.</p>\n", "acceptedAnswer": "<p>I doubt numpy will be much help here. The easiest way to do this, IMO, is to employ Python's sets. Transpose the list of lists to obtain list of columns, turn elements of each column into sets, and run <code>set.intersection</code> on them.</p>\n<pre><code>lists = [list_1, list_2, list_3]\nintersections = [set.intersection(*[set(x) for x in col]) for col in zip(*lists)]\nprint(intersections)\n# =&gt; [{2, 3}, set(), {4, 5, 6}]\n</code></pre>\n", "questionSource": "https://stackoverflow.com/questions/78273172/more-efficient-ways-of-finding-common-values-from-multiple-lists-of-arrays"}