{"questionTitle": "FileNotFoundError: [WinError 2] The system cannot find the file specified - FFMPEG", "question": "<p>I am running a script using conda environment on Windows and getting this error (stack trace below), which is apparently caused by python executable not being able to find the ffmpeg.exe. There are numerous questions about this, but none of the solutions unfortunately worked for me, so I hope someone has fresh ideas.</p>\n<p>What I tried:</p>\n<ul>\n<li><code>conda install -c conda-forge ffmpeg</code> (after this I can run ffmpeg in command line, but still getting the error)</li>\n<li><code>pip install ffmpeg-python</code></li>\n<li>Added the folder where ffmpeg.exe is located in conda env to the Windows Path as well as to sys.path in python.</li>\n<li>copied the same ffmpeg.exe a) to the location of python.exe in conda env, b) to the location of the script I am running, c) to the location of subprocess.py.</li>\n<li>Downloaded ffmpeg windows binary and repeated the last two steps with that file.</li>\n</ul>\n<p>Is there anything else that I can try to make it work?</p>\n<pre><code>---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[10], line 22\n     19 truncate_second = 8.2         # Video end = start_second + truncate_second\n     21 # Extract Video CAVP Features &amp; New Video Path:\n---&gt; 22 cavp_feats, new_video_path = extract_cavp(video_path, start_second, truncate_second, tmp_path=tmp_path)\n\nFile D:\\Software\\Anaconda\\envs\\diff_foley\\Lib\\site-packages\\torch\\nn\\modules\\module.py:1518, in Module._wrapped_call_impl(self, *args, **kwargs)\n   1516     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1517 else:\n-&gt; 1518     return self._call_impl(*args, **kwargs)\n\nFile D:\\Software\\Anaconda\\envs\\diff_foley\\Lib\\site-packages\\torch\\nn\\modules\\module.py:1527, in Module._call_impl(self, *args, **kwargs)\n   1522 # If we don't have any hooks, we want to skip the rest of the logic in\n   1523 # this function, and just call forward.\n   1524 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks\n   1525         or _global_backward_pre_hooks or _global_backward_hooks\n   1526         or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1527     return forward_call(*args, **kwargs)\n   1529 try:\n   1530     result = None\n\nFile D:\\Software\\Anaconda\\envs\\diff_foley\\Lib\\site-packages\\torch\\utils\\_contextlib.py:115, in context_decorator.&lt;locals&gt;.decorate_context(*args, **kwargs)\n    112 @functools.wraps(func)\n    113 def decorate_context(*args, **kwargs):\n    114     with ctx_factory():\n--&gt; 115         return func(*args, **kwargs)\n\nFile D:\\Work\\DIff-Foley\\Diff-Foley\\inference\\demo_util.py:131, in Extract_CAVP_Features.forward(self, video_path, start_second, truncate_second, tmp_path)\n    129 print(&quot;truncate second: &quot;, truncate_second)\n    130 # Load the video, change fps:\n--&gt; 131 video_path_low_fps = reencode_video_with_diff_fps(video_path, self.tmp_path, self.fps, start_second, truncate_second)\n    132 video_path_high_fps = reencode_video_with_diff_fps(video_path, self.tmp_path, 21.5, start_second, truncate_second)\n    134 # read the video:\n\nFile D:\\Work\\DIff-Foley\\Diff-Foley\\inference\\demo_util.py:42, in reencode_video_with_diff_fps(video_path, tmp_path, extraction_fps, start_second, truncate_second)\n     31 def reencode_video_with_diff_fps(video_path: str, tmp_path: str, extraction_fps: int, start_second, truncate_second) -&gt; str:\n     32     '''Reencodes the video given the path and saves it to the tmp_path folder.\n     33 \n     34     Args:\n   (...)\n     40         str: The path where the tmp file is stored. To be used to load the video from\n     41     '''\n---&gt; 42     assert which_ffmpeg() != '', 'Is ffmpeg installed? Check if the conda environment is activated.'\n     43     # assert video_path.endswith('.mp4'), 'The file does not end with .mp4. Comment this if expected'\n     44     # create tmp dir if doesn't exist\n     45     os.makedirs(tmp_path, exist_ok=True)\n\nFile D:\\Work\\DIff-Foley\\Diff-Foley\\inference\\demo_util.py:26, in which_ffmpeg()\n     20 def which_ffmpeg() -&gt; str:\n     21     '''Determines the path to ffmpeg library\n     22 \n     23     Returns:\n     24         str -- path to the library\n     25     '''\n---&gt; 26     result = subprocess.run(['which', 'ffmpeg'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n     27     ffmpeg_path = result.stdout.decode('utf-8').replace('\\n', '')\n     28     return ffmpeg_path\n\nFile D:\\Software\\Anaconda\\envs\\diff_foley\\Lib\\subprocess.py:548, in run(input, capture_output, timeout, check, *popenargs, **kwargs)\n    545     kwargs['stdout'] = PIPE\n    546     kwargs['stderr'] = PIPE\n--&gt; 548 with Popen(*popenargs, **kwargs) as process:\n    549     try:\n    550         stdout, stderr = process.communicate(input, timeout=timeout)\n\nFile D:\\Software\\Anaconda\\envs\\diff_foley\\Lib\\subprocess.py:1026, in Popen.__init__(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags, restore_signals, start_new_session, pass_fds, user, group, extra_groups, encoding, errors, text, umask, pipesize, process_group)\n   1022         if self.text_mode:\n   1023             self.stderr = io.TextIOWrapper(self.stderr,\n   1024                     encoding=encoding, errors=errors)\n-&gt; 1026     self._execute_child(args, executable, preexec_fn, close_fds,\n   1027                         pass_fds, cwd, env,\n   1028                         startupinfo, creationflags, shell,\n   1029                         p2cread, p2cwrite,\n   1030                         c2pread, c2pwrite,\n   1031                         errread, errwrite,\n   1032                         restore_signals,\n   1033                         gid, gids, uid, umask,\n   1034                         start_new_session, process_group)\n   1035 except:\n   1036     # Cleanup if the child failed starting.\n   1037     for f in filter(None, (self.stdin, self.stdout, self.stderr)):\n\nFile D:\\Software\\Anaconda\\envs\\diff_foley\\Lib\\subprocess.py:1538, in Popen._execute_child(self, args, executable, preexec_fn, close_fds, pass_fds, cwd, env, startupinfo, creationflags, shell, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite, unused_restore_signals, unused_gid, unused_gids, unused_uid, unused_umask, unused_start_new_session, unused_process_group)\n   1536 # Start the process\n   1537 try:\n-&gt; 1538     hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n   1539                              # no special security\n   1540                              None, None,\n   1541                              int(not close_fds),\n   1542                              creationflags,\n   1543                              env,\n   1544                              cwd,\n   1545                              startupinfo)\n   1546 finally:\n   1547     # Child is launched. Close the parent's copy of those pipe\n   1548     # handles that only the child should have open.  You need\n   (...)\n   1551     # pipe will not close when the child process exits and the\n   1552     # ReadFile will hang.\n   1553     self._close_pipe_fds(p2cread, p2cwrite,\n   1554                          c2pread, c2pwrite,\n   1555                          errread, errwrite)\n\nFileNotFoundError: [WinError 2] The system cannot find the file specified\n</code></pre>\n", "acceptedAnswer": "<p>You need to put the ffmpeg.exe in the path either via environment variable or manipulating <code>sys.path</code> during Python runtime.</p>\n<p>There are a couple convenience alternatives that I'm aware of.</p>\n<ol>\n<li><a href=\"https://github.com/python-ffmpegio/python-ffmpeg-downloader\" rel=\"nofollow noreferrer\"><code>ffmpeg-downloader</code></a> (I'm the dev.)</li>\n</ol>\n<p>This package gives you a pip-like command to download the latest (and other versions of) ffmpeg. This one installs ffmpeg to user's AppData directory for use across multiple Python venvs (or other general use).</p>\n<p>A quick use:</p>\n<pre><code>pip install ffmpeg-downloader\nffdl install --add-path\n</code></pre>\n<p>See the repo readme for other usages.</p>\n<ol start=\"2\">\n<li><a href=\"https://github.com/zackees/static_ffmpeg\" rel=\"nofollow noreferrer\"><code>static-ffmpeg</code></a></li>\n</ol>\n<p>This one on the other hand downloads the ffmpeg to the current venv.</p>\n<p>If you don't use venv's, either should work for you. If you use ffmpeg in multiple projects with venv, I suggest using the former.</p>\n", "questionSource": "https://stackoverflow.com/questions/78170272/filenotfounderror-winerror-2-the-system-cannot-find-the-file-specified-ffmp"}