{"questionTitle": "How do I extract two numbers from a string and generate all numbers between them in rust", "question": "<p>I have a user-input form which allows them to provide either a single value <code>n</code> or a range in the format <code>start-end</code>. I want to generate a vector of all numbers in the range (with just one entry in the <code>n</code> case).</p>\n<p>I have the below which solves the problem:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn parse_ports(ports: &amp;str) -&gt; Result&lt;Vec&lt;u32&gt;, ParseError&gt; {\n    let ports: Vec&lt;&amp;str&gt; = ports.split(&quot;-&quot;).collect();\n\n    if ports.len() == 1 {\n        Ok(\n            ports.iter()\n                .map(|x| x.parse().unwrap())\n                .collect()\n        )\n    } else if ports.len() == 2 {\n        let start: u32 = ports[0].parse().unwrap();\n        let end: u32 = ports[1].parse().unwrap();\n\n        Ok((start..end + 1).collect::&lt;Vec&lt;u32&gt;&gt;())\n    } else {\n        // At some point this should probably error but that is a tomorrow problem\n        Ok(vec![])\n    }\n}\n</code></pre>\n<p>I am sure I can do this more efficiently but I'm wildly inexperienced in Rust so would appreciate any help or feedback.</p>\n<p>I feel like I should be able to do this without the <code>if</code>. I also expect I can run some validation on the string rather than dealing with the <code>len != 1 and len != 2</code> case in the if.</p>\n", "acceptedAnswer": "<p>If you only have the <em>single</em> and <em>pair</em> cases, then you could use <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.split_once\" rel=\"nofollow noreferrer\"><code>split_once()</code></a>.</p>\n<p>If you always attempt to parse in the <code>None</code> case, then an empty string (<code>ports</code>), will also implicitly return an error:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::num::ParseIntError;\n\nfn parse_ports(ports: &amp;str) -&gt; Result&lt;Vec&lt;u32&gt;, ParseIntError&gt; {\n    let (start, end) = if let Some((start, end)) = ports.split_once('-') {\n        let start = start.parse()?;\n        let end = end.parse()?;\n        (start, end)\n    } else {\n        let start = ports.parse()?;\n        (start, start)\n    };\n\n    Ok((start..end + 1).collect())\n}\n</code></pre>\n<p>Depending in what logic you need <em>in-between</em>, then there's various ways you can structure this logic:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn parse_ports(ports: &amp;str) -&gt; Result&lt;Vec&lt;u32&gt;, ParseIntError&gt; {\n    let (start, end) = match ports.split_once('-') {\n        Some((start, end)) =&gt; (start, Some(end)),\n        None =&gt; (ports, None),\n    };\n\n    let start = start.parse()?;\n    let end = end.map(|end| end.parse()).transpose()?;\n\n    Ok(match end {\n        Some(end) =&gt; (start..=end).collect(),\n        None =&gt; vec![start],\n    })\n}\n</code></pre>\n", "questionSource": "https://stackoverflow.com/questions/78277096/how-do-i-extract-two-numbers-from-a-string-and-generate-all-numbers-between-them"}