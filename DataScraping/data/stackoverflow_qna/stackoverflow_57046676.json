{"questionTitle": "Flutter: Error: Internal Server Error, Code 500", "question": "<p>When connecting to an endpoint using flutter, it returns error 500, next to an expiration time variable, now this only happens when I send the user name and password, the thing is, with the same information using PostMan the result is code 200 and all the corresponding variables. What could be the problem?</p>\n\n<p>Use basically flutter in conjunction with Android Studio and postman</p>\n\n<pre><code>import 'package:flutter/material.dart';\n\nimport 'package:http/http.dart' as http;\nimport 'dart:async';\nimport 'package:loginqr/post_model.dart';\nimport 'dart:io';\nimport 'package:loginqr/SignIn.dart';\nvoid main() =&gt; runApp(MyApp());\n\n\n\nclass MyApp extends StatelessWidget {\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        // This is the theme of your applicatio\n        // Try running your application with \"flutter run\". You'll see the\n        // application has a blue toolbar. Then, without quitting the app, try\n        // changing the primarySwatch below to Colors.green and then invoke\n        // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",\n        // or simply save your changes to \"hot reload\" in a Flutter IDE).\n        // Notice that the counter didn't reset back to zero; the application\n        // is not restarted.\n        primarySwatch: Colors.blue,\n      ),\n      home: MyHomePage(title: 'aa',),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key, this.title}) : super(key: key);\n\n  // This widget is the home page of your application. It is stateful, meaning\n  // that it has a State object (defined below) that contains fields that affect\n  // how it looks.\n\n  // This class is the configuration for the state. It holds the values (in this\n  // case the title) provided by the parent (in this case the App widget) and\n  // used by the build method of the State. Fields in a Widget subclass are\n  // always marked \"final\".\n\n  final String title;\n\n  @override\n  _MyHomePageState createState() =&gt; _MyHomePageState();\n}\n\nclass _MyHomePageState extends State&lt;MyHomePage&gt; {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      // This call to setState tells the Flutter framework that something has\n      // changed in this State, which causes it to rerun the build method below\n      // so that the display can reflect the updated values. If we changed\n      // _counter without calling setState(), then the build method would not be\n      // called again, and so nothing would appear to happen.\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // This method is rerun every time setState is called, for instance as done\n    // by the _incrementCounter method above.\n    //\n    // The Flutter framework has been optimized to make rerunning build methods\n    // fast, so that you can just rebuild anything that needs updating rather\n    // than having to individually change instances of widgets.\n    return Scaffold(\n      appBar: AppBar(\n        // Here we take the value from the MyHomePage object that was created by\n        // the App.build method, and use it to set our appbar title.\n        title: Text(widget.title),\n      ),\n      body: MyCustomFrom(),\n\n\n      // This trailing comma makes auto-formatting nicer for build methods.\n    );\n  }\n}\n\nclass MyCustomFrom extends StatefulWidget{\n  @override\n  State&lt;StatefulWidget&gt; createState() {\n    // TODO: implement createState\n    return MyCustomFromState();\n  }\n\n}\n\n\nclass MyCustomFromState extends State&lt;MyCustomFrom&gt; {\n\n\n  Future&lt;String&gt; getData() async {\n\n    final response = await http.post(\n        Uri.encodeFull(\"Example End Point login\"),\n\n     body: {\n\n          \"username\": user,\n          \"password\": password\n        },\n\n        );\n\n    //application/json\n\n//   print(response.statusCode);\n\n    print(response.body);\n  //  print(response.toStri()ng());\n  }\n\n\n\n\n\n  String _deviceid = 'Unknown';\n  String user = '';\n  String password = '';\n\n  TextEditingController controller = new TextEditingController();\n  TextEditingController controller2 = new TextEditingController();\n\n  @override\n  void dispose() {\n    controller.dispose();\n    controller2.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final username = TextFormField(\n      controller: controller,\n      keyboardType: TextInputType.text,\n      autofocus: false,\n      decoration: InputDecoration(\n          hintText: \"Username\",\n          hintStyle: TextStyle(fontSize: 16.0),\n          contentPadding: EdgeInsets.fromLTRB(20.0, 0.0, 20.0, 10.0),\n          border:\n          UnderlineInputBorder(borderRadius: BorderRadius.circular(32.0))),\n    );\n    final password = TextFormField(\n      controller: controller2,\n      autofocus: false,\n      obscureText: true,\n      decoration: InputDecoration(\n          hintText: \"Password\",\n          hintStyle: TextStyle(fontSize: 16.0),\n          contentPadding: EdgeInsets.fromLTRB(20.0, 25.0, 20.0, 10.0),\n          border:\n          UnderlineInputBorder(borderRadius: BorderRadius.circular(32.0))),\n    );\n\n    final loginButton = Padding(\n      padding: EdgeInsets.symmetric(vertical: 25.0),\n      child: Material(\n        borderRadius: BorderRadius.circular(30.0),\n        shadowColor: Colors.blueAccent.shade100,\n        elevation: 10.0,\n        child: MaterialButton(\n          minWidth: 200.0,\n          height: 42.0,\n          color: Colors.blueAccent,\n          onPressed: (){\ngetData();\n          },\n          child: Text(\n            \"Login\",\n            style: TextStyle(color: Colors.white),\n          ),\n        ),\n      ),\n    );\n    return Form(\n      child: new Center(\n        child: ListView(\n            padding: EdgeInsets.only(left: 24.0, right: 24.0, top: 10.0),\n            children: &lt;Widget&gt;[\n              username,\n              SizedBox(height: 8.0),\n              password,\n              SizedBox(height: 24.0),\n              loginButton\n            ]),\n      ),\n    );\n\n  }\n}\n</code></pre>\n\n<p>using tue code print(response.body);\nthe output is:</p>\n\n<pre><code>I/flutter (21983): {\"timestamp\":1563220761561,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalStateException\",\"message\":\"java.lang.IllegalStateException: STREAMED\",\"path\":\"/api/login\"}\n</code></pre>\n\n<p>and using postman tue output is:</p>\n\n<pre><code>{\"access-token\":\"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJBRE1JTklTVFJBRE9SIiwiZXhwIjoxNTYzMzAwOTE3fQ.MMTqHaROX69WEDrCdHK9DFToA49CeraVzQC4zGn08CrSz3GCiA7HabbFaZAZLeKtoK0Z_-OulPMoVgZhCW9R7g\",\"status\":true,\"expire\":1563300917916}\n</code></pre>\n", "acceptedAnswer": "<p>Here's the cURL request you say is working in your comment above, formatted a little nicer:</p>\n\n<pre><code>curl -X POST \\ \n  URLSample..orSomething \\ \n  -H 'Content-Type: application/json' \\ \n  -H 'Postman-Token: a3621ffc-f029-4973-b015-c7fea1c2b429' \\ \n  -H 'cache-control: no-cache' \\ \n  -d '{ \"username\" : \"administrador\", \"password\" : \"admin2010\" }'\n</code></pre>\n\n<p>As you can see with the <code>Content-Type</code> header, Postman (and cURL) are telling the server to expect JSON data in the request body. You can also see that JSON payload being sent.</p>\n\n<p>Now looking at your code, we can start to understand why it isn't working. You are not setting the content type header in your request, but more importantly you are not sending JSON.</p>\n\n<p>Here is your request body:</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>body: {\n  \"username\": user,\n  \"password\": password\n},\n</code></pre>\n\n<p>This is actually a dart <code>Map&lt;String, dynamic&gt;</code>. From the http documentation, this will be encoded into form data, not JSON:</p>\n\n<blockquote>\n  <p>If body is a Map, it's encoded as form fields using encoding. The content-type of the request will be set to \"application/x-www-form-urlencoded\"; this cannot be overridden.</p>\n</blockquote>\n\n<p>So to fix your request, we should set the <code>Content-Type</code> header, and do the JSON encoding ourselves. It will end up looking like this:</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>// we import the convert library to access jsonEncode\nimport 'dart:convert';\n\nMap&lt;String, dynamic&gt; requestPayload = {\n  \"username\": user,\n  \"password\": password,\n};\n\nfinal response = await http.post(\n  Uri.encodeFull(\"Example End Point login\"),\n  body: jsonEncode(requestPayload),\n  headers: {'Content-Type': 'application/json'},\n\n);\n</code></pre>\n", "questionSource": "https://stackoverflow.com/questions/57046676/flutter-error-internal-server-error-code-500"}