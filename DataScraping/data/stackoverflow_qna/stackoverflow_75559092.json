{"questionTitle": "Avoid/remove escape quotes in serde_json", "question": "<p>I try to create a JSON object with <code>serde_json::json!</code> but the problem is that I get <code>\\&quot;</code> but I don't want them. How can I prevent or remove them?</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn create_cache_json(token: String, change: String, payload: Vec&lt;Value&gt;) -&gt; Value {\n   let json = serde_json::json!(\n       {\n           &quot;token&quot;: token,  \n           &quot;change&quot;: change, \n           &quot;data&quot;: {\n               &quot;payload&quot;: payload\n           }\n       });\n   \n   \n   info!(&quot;{}&quot;, json);\n\n   return json;\n}\n</code></pre>\n<p>this code returns</p>\n<pre class=\"lang-json prettyprint-override\"><code>{\n   &quot;change&quot;: &quot;\\&quot;new\\&quot;&quot;,\n   &quot;data&quot;: {\n       &quot;payload&quot;:[]\n   },\n   &quot;token&quot;: &quot;\\&quot;2a256356\\&quot;&quot;\n}\n</code></pre>\n<p><strong>EDIT:</strong>\nThe input values are:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let token = &quot;foo&quot;.to_string();\n    let change = &quot;new&quot;.to_string();\n    let payload: Vec&lt;serde_json::Value&gt; = Vec::new();\n \n    create_cache_json(token, change, payload);\n}\n</code></pre>\n<p>The input are literals that already have quotes.</p>\n<p>The token output is: <code>&quot;foo&quot;</code> but it should be <code>foo</code>.\nUsing crates like <code>quote</code> don't work because the values have to be strings.\nFor this function should the payload be empty.</p>\n", "acceptedAnswer": "<p>I fixed it by changing the <code>json!</code> function to <code>format!</code> and then creating a <code>Value</code> from the String.</p>\n<p>Here is the code to create a JSON object with given arguments. This should work with every datatype. If anyone else need this:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn create_json(\n     token: String, \n     change: String, \n     payload: Vec&lt;Value&gt;\n) -&gt; CacheEntry {\n\n    let body: String = format!(\n        &quot;{{\\&quot;token\\&quot;: {token}, \\&quot;change\\&quot;: {change}, \\&quot;data\\&quot;: [{:#?}] }}&quot;\n        , payload);\n    let json: CacheEntry = serde_json::from_str(&amp;body).unwrap();\n\n    return json;\n}\n</code></pre>\n<p><strong>EDIT:</strong>\nAs Charles Duffy said, the code above is vulnerable to injection attacks and here is a better solution:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fmt;\n\n#[derive(Debug)]\npub struct UserData {\n    pub token: String,\n    pub change: String,\n    pub data: Payload\n}\n\n#[derive(Debug)]\npub struct Payload {\n    pub payload: Vec&lt;String&gt;\n}\n\nimpl fmt::Display for UserData {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n        write!(f, \n            &quot;{{token: {:#?}, change: {:#?}, data: {:#?}}}&quot;, \n            self.token, self.change, self.data)\n    }\n}\n\nfn create_cache_json(user_data: UserData) -&gt; String {\n   \n    let json = user_data.to_string();\n   \n   println!(&quot;{}&quot;, json);\n\n   return json;\n}\n\n\nfn main() {\n    let p: Vec&lt;String&gt; = Vec::new();\n\n    let ud = UserData {\n        token: &quot;foo&quot;.to_string(),\n        change: &quot;bar&quot;.to_string(),\n        data: Payload {\n            payload: p\n        }\n    };\n    \n    create_cache_json(ud);\n}\n</code></pre>\n", "questionSource": "https://stackoverflow.com/questions/75559092/avoid-remove-escape-quotes-in-serde-json"}