{"questionTitle": "Run a method before all methods of a class", "question": "<p>Is it possible to do that in C# 3 or 4? Maybe with some reflection?</p>\n\n<pre><code>class Magic\n{\n\n    [RunBeforeAll]\n    public void BaseMethod()\n    {\n    }\n\n    //runs BaseMethod before being executed\n    public void Method1()\n    {\n    }\n\n    //runs BaseMethod before being executed\n    public void Method2()\n    {\n    }\n}\n</code></pre>\n\n<p>EDIT</p>\n\n<p>There is an alternate solution for this, make <code>Magic</code> a singleton and put your code on the getter of the static instance. That's what I did:</p>\n\n<pre><code>public class Magic\n{\n\n    private static Magic magic = new Magic();\n    public static Magic Instance\n    {\n        get\n        {\n            magic.BaseMethod();\n            return magic;\n        }\n    }\n\n    public void BaseMethod()\n    {\n    }\n\n    //runs BaseMethod before being executed\n    public void Method1()\n    {\n    }\n\n    //runs BaseMethod before being executed\n    public void Method2()\n    {\n    }\n}\n</code></pre>\n", "acceptedAnswer": "<p>You can't do this automatically in C# - you should probably be looking at AOP, e.g. with <a href=\"https://www.postsharp.net/\" rel=\"noreferrer\">PostSharp</a>.</p>\n", "questionSource": "https://stackoverflow.com/questions/9192709/run-a-method-before-all-methods-of-a-class"}