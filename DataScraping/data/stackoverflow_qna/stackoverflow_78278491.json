{"questionTitle": "Python3 extract various subsets from list/array into a single new variable", "question": "<p>In matlab for an 1xM array let us say a=1,1.5,2,2.5,...10</p>\n<blockquote>\n<p><code>a=1:0.5:10;</code></p>\n</blockquote>\n<p>one can easily extract several subsets of the array in 1 line of code\nb=a([1:3 10:13]);</p>\n<p>making b=1,1.5,2,5.5,6,6.5,7. If one would like to achieve something equivalent in python3 an numpy what is the recommended approach? Note the actual vector is of length 1e7 and the subsets to extracts are of different lengths and random initial and final indexes.</p>\n", "acceptedAnswer": "<p>Personally, I would use <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.r_.html\" rel=\"nofollow noreferrer\"><code>numpy.r_</code></a> for sequence concatenation, you can use it in two ways (see use case 1 and 2 in its docs, corresponding to <code>b</code> and <code>c</code> below):</p>\n<pre class=\"lang-py prettyprint-override\"><code>import numpy as np\n\na = np.linspace(1, 10, num=19)  # 1., 1.5, 2., 2.5, \u2026, 10.\nb = np.r_[a[0:3], a[9:13]]      # Use case 1: concatenation of arrays\nc = a[np.r_[0:3, 9:13]]         # Use case 2: concatenation of indices\nprint(b)\nprint(c)\n# &gt;&gt;&gt; [1.  1.5 2.  5.5 6.  6.5 7. ]\n# &gt;&gt;&gt; [1.  1.5 2.  5.5 6.  6.5 7. ]\n</code></pre>\n<p>Note the different indexing as compared to Matlab (indexing is zero-based, upper bound is exclusive).</p>\n<p>There are several alternatives or variations, e.g. you can also use <a href=\"https://docs.python.org/dev/library/functions.html#slice\" rel=\"nofollow noreferrer\"><code>slice()</code></a> for the array bounds:</p>\n<pre class=\"lang-py prettyprint-override\"><code>d = np.r_[a[slice(0, 3)], a[slice(9, 13)]]\ne = a[np.r_[slice(0, 3), slice(9, 13)]]\n</code></pre>\n<p>I don't know your exact use case. In general, I would prefer options <code>b</code> or <code>c</code> though.</p>\n", "questionSource": "https://stackoverflow.com/questions/78278491/python3-extract-various-subsets-from-list-array-into-a-single-new-variable"}