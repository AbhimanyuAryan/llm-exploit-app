{"questionTitle": "How can I solve N+1 problem double prefetch_related using order_by in Django?", "question": "<p>In <code>models.py</code> the simple structure is...</p>\n<pre><code>Model A(parent of B) &lt;- Model B(parent of C) &lt;- Model C\n</code></pre>\n<p>And in views.py, I want to use both <code>prefetch_related</code> in B,C and <code>order_by</code> in b.</p>\n<pre><code>a_obj = A.objects.prefetch_related(Prefetch(&quot;b__c&quot;, queryset=B.objects.all().order_by(&quot;-order&quot;)))\n</code></pre>\n<p>but in <code>serializers.py</code>, I cannot access to c's data.</p>\n<pre><code>def get_data(self, group):\n   for b in group.b.all():\n      print(b.c.all())  # ===&gt; result: queryset [B object(pk)]\n</code></pre>\n<p>And I also tried another way in <code>views.py</code> and <code>serializers.py</code></p>\n<pre><code># views.py\na_obj = A.objects.prefetch_related(&quot;b__c&quot;)\n\n# serializers.py\ndef get_data(self, group):\n   for b in group.b.all().order_by(&quot;-order&quot;):\n      print(b.c.all())  # ===&gt; N+1 query occurred\n</code></pre>\n<p>But I have N+1 problem.</p>\n<p>What should I do?</p>\n", "acceptedAnswer": "<p>It's very simple. Editing in <code>models.py</code> that needs ordering.</p>\n<p>And I deleted all of my codes in <code>views.py</code> and <code>serializers.py</code></p>\n<pre><code>class B(models.Model):\n   ...\n   class Meta:\n      ordering=['-order']\n</code></pre>\n", "questionSource": "https://stackoverflow.com/questions/78277386/how-can-i-solve-n1-problem-double-prefetch-related-using-order-by-in-django"}