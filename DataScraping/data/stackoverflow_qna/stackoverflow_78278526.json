{"questionTitle": "How to compare tcl variable by &quot;otherValuePtr&quot; instead of &quot;bytes&quot;", "question": "<p>4As we know Tcl_obj is a struct as picture shown.\nAnd for example: &quot;set var 1,  if { $var == 1 } { puts &quot;success&quot; }&quot;\nAnd &quot;var&quot; is a Tcl_obj, tcl command &quot;==&quot; is match &quot;bytes&quot; in Tcl_Obj type, if var's bytes is 1, then it will go into { puts &quot;success&quot;}.  But I want to match the &quot;otherValuePtr&quot; in Tcl_Obj struct. if otherValuePtr is 1, then it will go into { puts &quot;success&quot;}.  How did I implement it?</p>\n<p>I read the c code in ./generic/tclCompile.c, but I have no result, so sad.</p>\n<p><img src=\"https://i.stack.imgur.com/YuxeS.png\" alt=\"enter image description here\" /></p>\n<p>Help to resolve this problem.</p>\n", "acceptedAnswer": "<p>You can't in general.</p>\n<p>The contents of the union in the <code>internalRep</code> field (the <code>otherValuePtr</code> is part of that) are determined by the <code>typePtr</code>. You can <em>only</em> compare two of them when <em>both</em> values' types are ones that you understand completely (typically because you issued the type). Otherwise, the official ways to compare them are either to use <code>Tcl_GetStringFromObj()</code> on each to get a UTF-8 representation and compare those, or to demand that the values conform to some other model (an operation that is permitted to fail) and compare those (e.g., you do <code>Tcl_GetIntFromObj()</code> on each). If you aren't the owner of the type, it's very likely that you won't know how to correctly extract it from the union; Tcl has fairly complex internal models for some of its types (especially in Tcl 9.0), and <em>will</em> and <em>does</em> change the implementations of its internal types from version to version. They are not a stable API, but an implementation detail.</p>\n<p>The standard recommendation is to design your types so that the conversion from internal representation to string is stable (usually easy for things like lists and integers) or so that the internal representation is always derived from the string so that you never need to serialize anything in the first place.</p>\n<p>However, if your code already owns the type concerned, you <em>already know</em> how to extract the real internal representation from the <code>internalRep</code> field and what to do with it at that point. You need to know that in order to write a type implementation after all! You just can't safely do that for others' types.</p>\n", "questionSource": "https://stackoverflow.com/questions/78278526/how-to-compare-tcl-variable-by-othervalueptr-instead-of-bytes"}