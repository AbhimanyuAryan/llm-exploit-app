{"questionTitle": "How to select first N number of groups based on values of a column conditionally?", "question": "<p>This is my DataFrame:</p>\n<pre><code>import pandas as pd \ndf = pd.DataFrame(\n    {\n        'a': [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 10, 22],\n        'b': [1, 1, 1, -1, -1, -1, -1, 2, 2, 2, 2, -1, -1, -1, -1],\n        'c': [25, 25, 25, 45, 45, 45, 45, 65, 65, 65, 65, 40, 40, 30, 30]\n    }\n)\n</code></pre>\n<p>The expected output: Grouping <code>df</code> by <code>c</code> and a condition:</p>\n<pre><code>     a  b   c\n0   10  1  25\n1   15  1  25\n2   20  1  25\n3   25 -1  45\n4   30 -1  45\n5   35 -1  45\n6   40 -1  45\n11  65 -1  40\n12  70 -1  40\n</code></pre>\n<p>The process is as follows:</p>\n<p><strong>a)</strong> Selecting the group that all of the <code>b</code> values is <code>1</code>. In my data and this <code>df</code> there is only one group with this condition.</p>\n<p><strong>b)</strong> Selecting first two groups (from top of <code>df</code>) that all of their <code>b</code> values are -1.</p>\n<p>For example:</p>\n<p>a) Group 25 is selected.</p>\n<p>b) There are three groups with this condition. First two groups are: Group 45 and 40.</p>\n<p>Note that there is a possibility in my data that there are no groups that has <code>a</code> or <code>b</code> condition. If that is the case, returning whatever matches the criteria is fine. For example the output could be only one group or no groups at all.</p>\n<p>The groups that I want are shown below:</p>\n<p><a href=\"https://i.stack.imgur.com/6jqeH.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/6jqeH.png\" alt=\"enter image description here\" /></a></p>\n<p>These are my attempts that got very close:</p>\n<pre><code>df1 = df.groupby('c').filter(lambda g: g.b.eq(1).all())\ngb = df.groupby('c')\nnew_gb = pd.concat([gb.get_group(group) for i, group in enumerate(gb.groups) if i &lt; 2])\n</code></pre>\n", "acceptedAnswer": "<p>You can use custom masks for <a href=\"https://pandas.pydata.org/docs/user_guide/indexing.html#boolean-indexing\" rel=\"nofollow noreferrer\">boolean indexing</a>:</p>\n<pre><code># identify groups with all 1\nm1 = df['b'].eq(1).groupby(df['c']).transform('all')\n# identify groups with all -1\nm2 = df['b'].eq(-1).groupby(df['c']).transform('all')\n# keep rows of first 2 groups with all -1\nm3 = df['c'].isin(df.loc[m2, 'c'].unique()[:2])\n\n# select m1 OR m3\nout = df[m1 | m3]\n</code></pre>\n<p>Or, for a variant without <code>groupby</code>, using <code>set</code> operations:</p>\n<pre><code># identify rows with 1/-1\nm1 = df['b'].eq(1)\nm2 = df['b'].eq(-1)\n\n# drop c that have values other that 1/-1:  {65}\n# drop -1 groups after 2nd occurrence:      {30}\ndrop = set(df.loc[~(m1|m2), 'c']) | set(df.loc[m2, 'c'].unique()[2:])\n\nout = df[~df['c'].isin(drop)]\n</code></pre>\n<p>Output:</p>\n<pre><code>     a  b   c\n0   10  1  25\n1   15  1  25\n2   20  1  25\n3   25 -1  45\n4   30 -1  45\n5   35 -1  45\n6   40 -1  45\n11  65 -1  40\n12  70 -1  40\n</code></pre>\n<p>Intermediates (first approach):</p>\n<pre><code>     a  b   c     m1     m2     m3\n0   10  1  25   True  False  False\n1   15  1  25   True  False  False\n2   20  1  25   True  False  False\n3   25 -1  45  False   True   True\n4   30 -1  45  False   True   True\n5   35 -1  45  False   True   True\n6   40 -1  45  False   True   True\n7   45  2  65  False  False  False\n8   50  2  65  False  False  False\n9   55  2  65  False  False  False\n10  60  2  65  False  False  False\n11  65 -1  40  False   True   True\n12  70 -1  40  False   True   True\n13  10 -1  30  False   True  False\n14  22 -1  30  False   True  False\n</code></pre>\n<p>Intermediates (second approach):</p>\n<pre><code>     a  b   c     m1     m2  ~isin(drop)\n0   10  1  25   True  False         True\n1   15  1  25   True  False         True\n2   20  1  25   True  False         True\n3   25 -1  45  False   True         True\n4   30 -1  45  False   True         True\n5   35 -1  45  False   True         True\n6   40 -1  45  False   True         True\n7   45  2  65  False  False        False\n8   50  2  65  False  False        False\n9   55  2  65  False  False        False\n10  60  2  65  False  False        False\n11  65 -1  40  False   True         True\n12  70 -1  40  False   True         True\n13  10 -1  30  False   True        False\n14  22 -1  30  False   True        False\n</code></pre>\n", "questionSource": "https://stackoverflow.com/questions/78278506/how-to-select-first-n-number-of-groups-based-on-values-of-a-column-conditionally"}