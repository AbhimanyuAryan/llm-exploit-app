{"questionTitle": "Flip card animation in Python", "question": "<p>I have two still images, one for the front of a card, and one for the back. I want to create a video animation of the card flipping over and showing the back, similar to <a href=\"https://codepen.io/auroratide/pen/WNmmQzP\" rel=\"nofollow noreferrer\">this CodePen</a> that does it in CSS and JavaScript.</p>\n<p>I am sure that it's possible in Python and a library like PIL, Pyglet or Pygame (e.g., with <a href=\"https://stackoverflow.com/questions/14177744/how-does-perspective-transformation-work-in-pil\">perspective drawing in PIL</a>), but I cannot find it with a search for <code>python pil|pyglet|pygame code flip card animation</code>. It seems general enough that I think someone has needed this before.</p>\n<p>Has anyone faced this problem and has code that animates a card turning over?</p>\n", "acceptedAnswer": "<p>You're lucky :)</p>\n<p>I've published this gist for you:\n<a href=\"https://gist.github.com/iburakov/49b2934d0ff5bee17fd99df8b3c812a5\" rel=\"nofollow noreferrer\">https://gist.github.com/iburakov/49b2934d0ff5bee17fd99df8b3c812a5</a></p>\n<p>It's doing exactly what you're asking using <a href=\"https://www.ursinaengine.org/index.html\" rel=\"nofollow noreferrer\">Ursina</a>, which is a game engine (and quite a sketchy one!) that is obviously an overkill for the task and isn't performance-friendly, but has its upsides:</p>\n<ul>\n<li>It's just ~50 lines of code!</li>\n<li>I've enabled mipmap texture filtering so it isn't flickering (in one\nline!)</li>\n<li>It should be easily extensible if you decide to add a visible card border to the scene or a motion blur shader, etc.</li>\n</ul>\n<p>It also runs in a headless mode (without a window) and, as an intermediate result, produces a series of PNGs which might be more convenient for you.</p>\n<p><strong>Note</strong>: for PNG files, you don't need any external libraries, but you need to have the files present in the current directory (it doesn't work if you provide a filepath, even if it exists).</p>\n<p><a href=\"https://gist.github.com/iburakov/49b2934d0ff5bee17fd99df8b3c812a5/raw/539f0b7737a89247fd8c3d6a692779244a4fc2d1/output.mp4\" rel=\"nofollow noreferrer\">output example</a></p>\n<p>Here's a copy of the code in case the link goes down:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&quot;&quot;&quot;\nRequirements:\n- pip install ursina==6.1.2\n- ffmpeg should be on path to render MP4 from PNGs\n&quot;&quot;&quot;\n\nimport math\nimport time\nfrom pathlib import Path\n\nfrom ursina import Sprite, Texture, Ursina, window, color, Vec3\nfrom ursina.prefabs.video_recorder import VideoRecorder\n\napp = Ursina(size=(1920, 1080))  # use this in development to see rendered window\n#app = Ursina(development_mode=False, window_type=&quot;offscreen&quot;)  # If you want to render without a window.\n\nwindow.color = color.white  # Set background color (this only works in a rendered window).\nwindow.cog_button.disable = True  # Remove gear/cog button from bottom right.\n\nTexture.default_filtering = &quot;mipmap&quot;\nside_a = Sprite(texture=&quot;_card_a.png&quot;)  # At origin, facing the camera. The file has to be in the current directory.\nside_b = Sprite(texture=&quot;_card_b.png&quot;, rotation_y=180)\n\n# If your graphic is already HDTV, set size and position to render correctly.\nside_a.length = 1920\nside_a.width = 1080\nside_a.world_position = Vec3(0, 0, 6.35)\n\nside_b.length = 1920\nside_b.width = 1080\nside_b.world_position = Vec3(0, 0, 6.35)\n\n\n_total_frames = 60\nrec = VideoRecorder(fps=30, max_duration=100000)  # we'll stop the recorder manually\nrec_dir = Path(&quot;video_temp&quot;)  # recorder crashes if rec_dir is changed :/\nrec.start_recording()\n\n\ndef update():\n    frame = rec.i\n    if frame &gt; _total_frames:\n        _finish()\n\n    cos_arg = frame / _total_frames * math.pi\n    angle_coef = math.cos(cos_arg) ** 2  # [0; 1]\n    angle = angle_coef * 180\n    side_a.rotation_y = angle - 180\n    side_b.rotation_y = angle\n\n    print(f&quot;frame {frame}/{_total_frames} ({frame/_total_frames:.0%})&quot;)\n\n\ndef _finish():\n    # first frame is empty for some reason :/\n    (rec_dir / &quot;untitled_video_0000.png&quot;).unlink()\n\n    rec.stop_recording()\n    # well, now we wait for ffmpeg to finish in an extremely sketchy way :/\n    # no access to Popen result here\n    time.sleep(10)\n\n    exit(0)\n\n\napp.run()\n</code></pre>\n", "questionSource": "https://stackoverflow.com/questions/78171052/flip-card-animation-in-python"}